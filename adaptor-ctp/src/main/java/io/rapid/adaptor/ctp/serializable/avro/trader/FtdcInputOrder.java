/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.rapid.adaptor.ctp.serializable.avro.trader;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** FtdcInputOrder */
@org.apache.avro.specific.AvroGenerated
public class FtdcInputOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4118716453210462628L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FtdcInputOrder\",\"namespace\":\"io.rapid.adaptor.ctp.serializable.avro.trader\",\"doc\":\"FtdcInputOrder\",\"fields\":[{\"name\":\"ErrorID\",\"type\":\"int\",\"doc\":\"FTDC响应信息 - 错误代码\"},{\"name\":\"ErrorMsg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"FTDC响应信息 - 错误信息\"},{\"name\":\"IsLast\",\"type\":\"boolean\",\"doc\":\"是否最后一条信息\"},{\"name\":\"BrokerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"经纪公司代码\"},{\"name\":\"InvestorID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"投资者代码\"},{\"name\":\"InstrumentID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"合约代码\"},{\"name\":\"OrderRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"报单引用\"},{\"name\":\"UserID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"用户代码\"},{\"name\":\"OrderPriceType\",\"type\":\"int\",\"doc\":\"报单价格条件\"},{\"name\":\"Direction\",\"type\":\"int\",\"doc\":\"买卖方向\"},{\"name\":\"CombOffsetFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"组合开平标志\"},{\"name\":\"CombHedgeFlag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"组合投机套保标志\"},{\"name\":\"LimitPrice\",\"type\":\"double\",\"doc\":\"价格\"},{\"name\":\"VolumeTotalOriginal\",\"type\":\"int\",\"doc\":\"数量\"},{\"name\":\"TimeCondition\",\"type\":\"int\",\"doc\":\"有效期类型\"},{\"name\":\"GTDDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"GTD日期\"},{\"name\":\"VolumeCondition\",\"type\":\"int\",\"doc\":\"成交量类型\"},{\"name\":\"MinVolume\",\"type\":\"int\",\"doc\":\"最小成交量\"},{\"name\":\"ContingentCondition\",\"type\":\"int\",\"doc\":\"触发条件\"},{\"name\":\"StopPrice\",\"type\":\"double\",\"doc\":\"止损价\"},{\"name\":\"ForceCloseReason\",\"type\":\"int\",\"doc\":\"强平原因\"},{\"name\":\"IsAutoSuspend\",\"type\":\"int\",\"doc\":\"自动挂起标志\"},{\"name\":\"BusinessUnit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"业务单元\"},{\"name\":\"RequestID\",\"type\":\"int\",\"doc\":\"请求编号\"},{\"name\":\"UserForceClose\",\"type\":\"int\",\"doc\":\"用户强评标志\"},{\"name\":\"IsSwapOrder\",\"type\":\"int\",\"doc\":\"互换单标志\"},{\"name\":\"ExchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易所代码\"},{\"name\":\"InvestUnitID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"投资单元代码\"},{\"name\":\"AccountID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"资金账号\"},{\"name\":\"CurrencyID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"币种代码\"},{\"name\":\"ClientID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易编码\"},{\"name\":\"IPAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"IP地址\"},{\"name\":\"MacAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"MAC地址\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FtdcInputOrder> ENCODER =
      new BinaryMessageEncoder<FtdcInputOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FtdcInputOrder> DECODER =
      new BinaryMessageDecoder<FtdcInputOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FtdcInputOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FtdcInputOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FtdcInputOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FtdcInputOrder>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FtdcInputOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FtdcInputOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FtdcInputOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FtdcInputOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** FTDC响应信息 - 错误代码 */
  public int ErrorID;
  /** FTDC响应信息 - 错误信息 */
  public java.lang.String ErrorMsg;
  /** 是否最后一条信息 */
  public boolean IsLast;
  /** 经纪公司代码 */
  public java.lang.String BrokerID;
  /** 投资者代码 */
  public java.lang.String InvestorID;
  /** 合约代码 */
  public java.lang.String InstrumentID;
  /** 报单引用 */
  public java.lang.String OrderRef;
  /** 用户代码 */
  public java.lang.String UserID;
  /** 报单价格条件 */
  public int OrderPriceType;
  /** 买卖方向 */
  public int Direction;
  /** 组合开平标志 */
  public java.lang.String CombOffsetFlag;
  /** 组合投机套保标志 */
  public java.lang.String CombHedgeFlag;
  /** 价格 */
  public double LimitPrice;
  /** 数量 */
  public int VolumeTotalOriginal;
  /** 有效期类型 */
  public int TimeCondition;
  /** GTD日期 */
  public java.lang.String GTDDate;
  /** 成交量类型 */
  public int VolumeCondition;
  /** 最小成交量 */
  public int MinVolume;
  /** 触发条件 */
  public int ContingentCondition;
  /** 止损价 */
  public double StopPrice;
  /** 强平原因 */
  public int ForceCloseReason;
  /** 自动挂起标志 */
  public int IsAutoSuspend;
  /** 业务单元 */
  public java.lang.String BusinessUnit;
  /** 请求编号 */
  public int RequestID;
  /** 用户强评标志 */
  public int UserForceClose;
  /** 互换单标志 */
  public int IsSwapOrder;
  /** 交易所代码 */
  public java.lang.String ExchangeID;
  /** 投资单元代码 */
  public java.lang.String InvestUnitID;
  /** 资金账号 */
  public java.lang.String AccountID;
  /** 币种代码 */
  public java.lang.String CurrencyID;
  /** 交易编码 */
  public java.lang.String ClientID;
  /** IP地址 */
  public java.lang.String IPAddress;
  /** MAC地址 */
  public java.lang.String MacAddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FtdcInputOrder() {}

  /**
   * All-args constructor.
   * @param ErrorID FTDC响应信息 - 错误代码
   * @param ErrorMsg FTDC响应信息 - 错误信息
   * @param IsLast 是否最后一条信息
   * @param BrokerID 经纪公司代码
   * @param InvestorID 投资者代码
   * @param InstrumentID 合约代码
   * @param OrderRef 报单引用
   * @param UserID 用户代码
   * @param OrderPriceType 报单价格条件
   * @param Direction 买卖方向
   * @param CombOffsetFlag 组合开平标志
   * @param CombHedgeFlag 组合投机套保标志
   * @param LimitPrice 价格
   * @param VolumeTotalOriginal 数量
   * @param TimeCondition 有效期类型
   * @param GTDDate GTD日期
   * @param VolumeCondition 成交量类型
   * @param MinVolume 最小成交量
   * @param ContingentCondition 触发条件
   * @param StopPrice 止损价
   * @param ForceCloseReason 强平原因
   * @param IsAutoSuspend 自动挂起标志
   * @param BusinessUnit 业务单元
   * @param RequestID 请求编号
   * @param UserForceClose 用户强评标志
   * @param IsSwapOrder 互换单标志
   * @param ExchangeID 交易所代码
   * @param InvestUnitID 投资单元代码
   * @param AccountID 资金账号
   * @param CurrencyID 币种代码
   * @param ClientID 交易编码
   * @param IPAddress IP地址
   * @param MacAddress MAC地址
   */
  public FtdcInputOrder(java.lang.Integer ErrorID, java.lang.String ErrorMsg, java.lang.Boolean IsLast, java.lang.String BrokerID, java.lang.String InvestorID, java.lang.String InstrumentID, java.lang.String OrderRef, java.lang.String UserID, java.lang.Integer OrderPriceType, java.lang.Integer Direction, java.lang.String CombOffsetFlag, java.lang.String CombHedgeFlag, java.lang.Double LimitPrice, java.lang.Integer VolumeTotalOriginal, java.lang.Integer TimeCondition, java.lang.String GTDDate, java.lang.Integer VolumeCondition, java.lang.Integer MinVolume, java.lang.Integer ContingentCondition, java.lang.Double StopPrice, java.lang.Integer ForceCloseReason, java.lang.Integer IsAutoSuspend, java.lang.String BusinessUnit, java.lang.Integer RequestID, java.lang.Integer UserForceClose, java.lang.Integer IsSwapOrder, java.lang.String ExchangeID, java.lang.String InvestUnitID, java.lang.String AccountID, java.lang.String CurrencyID, java.lang.String ClientID, java.lang.String IPAddress, java.lang.String MacAddress) {
    this.ErrorID = ErrorID;
    this.ErrorMsg = ErrorMsg;
    this.IsLast = IsLast;
    this.BrokerID = BrokerID;
    this.InvestorID = InvestorID;
    this.InstrumentID = InstrumentID;
    this.OrderRef = OrderRef;
    this.UserID = UserID;
    this.OrderPriceType = OrderPriceType;
    this.Direction = Direction;
    this.CombOffsetFlag = CombOffsetFlag;
    this.CombHedgeFlag = CombHedgeFlag;
    this.LimitPrice = LimitPrice;
    this.VolumeTotalOriginal = VolumeTotalOriginal;
    this.TimeCondition = TimeCondition;
    this.GTDDate = GTDDate;
    this.VolumeCondition = VolumeCondition;
    this.MinVolume = MinVolume;
    this.ContingentCondition = ContingentCondition;
    this.StopPrice = StopPrice;
    this.ForceCloseReason = ForceCloseReason;
    this.IsAutoSuspend = IsAutoSuspend;
    this.BusinessUnit = BusinessUnit;
    this.RequestID = RequestID;
    this.UserForceClose = UserForceClose;
    this.IsSwapOrder = IsSwapOrder;
    this.ExchangeID = ExchangeID;
    this.InvestUnitID = InvestUnitID;
    this.AccountID = AccountID;
    this.CurrencyID = CurrencyID;
    this.ClientID = ClientID;
    this.IPAddress = IPAddress;
    this.MacAddress = MacAddress;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ErrorID;
    case 1: return ErrorMsg;
    case 2: return IsLast;
    case 3: return BrokerID;
    case 4: return InvestorID;
    case 5: return InstrumentID;
    case 6: return OrderRef;
    case 7: return UserID;
    case 8: return OrderPriceType;
    case 9: return Direction;
    case 10: return CombOffsetFlag;
    case 11: return CombHedgeFlag;
    case 12: return LimitPrice;
    case 13: return VolumeTotalOriginal;
    case 14: return TimeCondition;
    case 15: return GTDDate;
    case 16: return VolumeCondition;
    case 17: return MinVolume;
    case 18: return ContingentCondition;
    case 19: return StopPrice;
    case 20: return ForceCloseReason;
    case 21: return IsAutoSuspend;
    case 22: return BusinessUnit;
    case 23: return RequestID;
    case 24: return UserForceClose;
    case 25: return IsSwapOrder;
    case 26: return ExchangeID;
    case 27: return InvestUnitID;
    case 28: return AccountID;
    case 29: return CurrencyID;
    case 30: return ClientID;
    case 31: return IPAddress;
    case 32: return MacAddress;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ErrorID = (java.lang.Integer)value$; break;
    case 1: ErrorMsg = value$ != null ? value$.toString() : null; break;
    case 2: IsLast = (java.lang.Boolean)value$; break;
    case 3: BrokerID = value$ != null ? value$.toString() : null; break;
    case 4: InvestorID = value$ != null ? value$.toString() : null; break;
    case 5: InstrumentID = value$ != null ? value$.toString() : null; break;
    case 6: OrderRef = value$ != null ? value$.toString() : null; break;
    case 7: UserID = value$ != null ? value$.toString() : null; break;
    case 8: OrderPriceType = (java.lang.Integer)value$; break;
    case 9: Direction = (java.lang.Integer)value$; break;
    case 10: CombOffsetFlag = value$ != null ? value$.toString() : null; break;
    case 11: CombHedgeFlag = value$ != null ? value$.toString() : null; break;
    case 12: LimitPrice = (java.lang.Double)value$; break;
    case 13: VolumeTotalOriginal = (java.lang.Integer)value$; break;
    case 14: TimeCondition = (java.lang.Integer)value$; break;
    case 15: GTDDate = value$ != null ? value$.toString() : null; break;
    case 16: VolumeCondition = (java.lang.Integer)value$; break;
    case 17: MinVolume = (java.lang.Integer)value$; break;
    case 18: ContingentCondition = (java.lang.Integer)value$; break;
    case 19: StopPrice = (java.lang.Double)value$; break;
    case 20: ForceCloseReason = (java.lang.Integer)value$; break;
    case 21: IsAutoSuspend = (java.lang.Integer)value$; break;
    case 22: BusinessUnit = value$ != null ? value$.toString() : null; break;
    case 23: RequestID = (java.lang.Integer)value$; break;
    case 24: UserForceClose = (java.lang.Integer)value$; break;
    case 25: IsSwapOrder = (java.lang.Integer)value$; break;
    case 26: ExchangeID = value$ != null ? value$.toString() : null; break;
    case 27: InvestUnitID = value$ != null ? value$.toString() : null; break;
    case 28: AccountID = value$ != null ? value$.toString() : null; break;
    case 29: CurrencyID = value$ != null ? value$.toString() : null; break;
    case 30: ClientID = value$ != null ? value$.toString() : null; break;
    case 31: IPAddress = value$ != null ? value$.toString() : null; break;
    case 32: MacAddress = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ErrorID' field.
   * @return FTDC响应信息 - 错误代码
   */
  public int getErrorID() {
    return ErrorID;
  }


  /**
   * Sets the value of the 'ErrorID' field.
   * FTDC响应信息 - 错误代码
   * @param value the value to set.
   */
  public FtdcInputOrder setErrorID(int value) {
    this.ErrorID = value;
    return this;
  }

  /**
   * Gets the value of the 'ErrorMsg' field.
   * @return FTDC响应信息 - 错误信息
   */
  public java.lang.String getErrorMsg() {
    return ErrorMsg;
  }


  /**
   * Sets the value of the 'ErrorMsg' field.
   * FTDC响应信息 - 错误信息
   * @param value the value to set.
   */
  public FtdcInputOrder setErrorMsg(java.lang.String value) {
    this.ErrorMsg = value;
    return this;
  }

  /**
   * Gets the value of the 'IsLast' field.
   * @return 是否最后一条信息
   */
  public boolean getIsLast() {
    return IsLast;
  }


  /**
   * Sets the value of the 'IsLast' field.
   * 是否最后一条信息
   * @param value the value to set.
   */
  public FtdcInputOrder setIsLast(boolean value) {
    this.IsLast = value;
    return this;
  }

  /**
   * Gets the value of the 'BrokerID' field.
   * @return 经纪公司代码
   */
  public java.lang.String getBrokerID() {
    return BrokerID;
  }


  /**
   * Sets the value of the 'BrokerID' field.
   * 经纪公司代码
   * @param value the value to set.
   */
  public FtdcInputOrder setBrokerID(java.lang.String value) {
    this.BrokerID = value;
    return this;
  }

  /**
   * Gets the value of the 'InvestorID' field.
   * @return 投资者代码
   */
  public java.lang.String getInvestorID() {
    return InvestorID;
  }


  /**
   * Sets the value of the 'InvestorID' field.
   * 投资者代码
   * @param value the value to set.
   */
  public FtdcInputOrder setInvestorID(java.lang.String value) {
    this.InvestorID = value;
    return this;
  }

  /**
   * Gets the value of the 'InstrumentID' field.
   * @return 合约代码
   */
  public java.lang.String getInstrumentID() {
    return InstrumentID;
  }


  /**
   * Sets the value of the 'InstrumentID' field.
   * 合约代码
   * @param value the value to set.
   */
  public FtdcInputOrder setInstrumentID(java.lang.String value) {
    this.InstrumentID = value;
    return this;
  }

  /**
   * Gets the value of the 'OrderRef' field.
   * @return 报单引用
   */
  public java.lang.String getOrderRef() {
    return OrderRef;
  }


  /**
   * Sets the value of the 'OrderRef' field.
   * 报单引用
   * @param value the value to set.
   */
  public FtdcInputOrder setOrderRef(java.lang.String value) {
    this.OrderRef = value;
    return this;
  }

  /**
   * Gets the value of the 'UserID' field.
   * @return 用户代码
   */
  public java.lang.String getUserID() {
    return UserID;
  }


  /**
   * Sets the value of the 'UserID' field.
   * 用户代码
   * @param value the value to set.
   */
  public FtdcInputOrder setUserID(java.lang.String value) {
    this.UserID = value;
    return this;
  }

  /**
   * Gets the value of the 'OrderPriceType' field.
   * @return 报单价格条件
   */
  public int getOrderPriceType() {
    return OrderPriceType;
  }


  /**
   * Sets the value of the 'OrderPriceType' field.
   * 报单价格条件
   * @param value the value to set.
   */
  public FtdcInputOrder setOrderPriceType(int value) {
    this.OrderPriceType = value;
    return this;
  }

  /**
   * Gets the value of the 'Direction' field.
   * @return 买卖方向
   */
  public int getDirection() {
    return Direction;
  }


  /**
   * Sets the value of the 'Direction' field.
   * 买卖方向
   * @param value the value to set.
   */
  public FtdcInputOrder setDirection(int value) {
    this.Direction = value;
    return this;
  }

  /**
   * Gets the value of the 'CombOffsetFlag' field.
   * @return 组合开平标志
   */
  public java.lang.String getCombOffsetFlag() {
    return CombOffsetFlag;
  }


  /**
   * Sets the value of the 'CombOffsetFlag' field.
   * 组合开平标志
   * @param value the value to set.
   */
  public FtdcInputOrder setCombOffsetFlag(java.lang.String value) {
    this.CombOffsetFlag = value;
    return this;
  }

  /**
   * Gets the value of the 'CombHedgeFlag' field.
   * @return 组合投机套保标志
   */
  public java.lang.String getCombHedgeFlag() {
    return CombHedgeFlag;
  }


  /**
   * Sets the value of the 'CombHedgeFlag' field.
   * 组合投机套保标志
   * @param value the value to set.
   */
  public FtdcInputOrder setCombHedgeFlag(java.lang.String value) {
    this.CombHedgeFlag = value;
    return this;
  }

  /**
   * Gets the value of the 'LimitPrice' field.
   * @return 价格
   */
  public double getLimitPrice() {
    return LimitPrice;
  }


  /**
   * Sets the value of the 'LimitPrice' field.
   * 价格
   * @param value the value to set.
   */
  public FtdcInputOrder setLimitPrice(double value) {
    this.LimitPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'VolumeTotalOriginal' field.
   * @return 数量
   */
  public int getVolumeTotalOriginal() {
    return VolumeTotalOriginal;
  }


  /**
   * Sets the value of the 'VolumeTotalOriginal' field.
   * 数量
   * @param value the value to set.
   */
  public FtdcInputOrder setVolumeTotalOriginal(int value) {
    this.VolumeTotalOriginal = value;
    return this;
  }

  /**
   * Gets the value of the 'TimeCondition' field.
   * @return 有效期类型
   */
  public int getTimeCondition() {
    return TimeCondition;
  }


  /**
   * Sets the value of the 'TimeCondition' field.
   * 有效期类型
   * @param value the value to set.
   */
  public FtdcInputOrder setTimeCondition(int value) {
    this.TimeCondition = value;
    return this;
  }

  /**
   * Gets the value of the 'GTDDate' field.
   * @return GTD日期
   */
  public java.lang.String getGTDDate() {
    return GTDDate;
  }


  /**
   * Sets the value of the 'GTDDate' field.
   * GTD日期
   * @param value the value to set.
   */
  public FtdcInputOrder setGTDDate(java.lang.String value) {
    this.GTDDate = value;
    return this;
  }

  /**
   * Gets the value of the 'VolumeCondition' field.
   * @return 成交量类型
   */
  public int getVolumeCondition() {
    return VolumeCondition;
  }


  /**
   * Sets the value of the 'VolumeCondition' field.
   * 成交量类型
   * @param value the value to set.
   */
  public FtdcInputOrder setVolumeCondition(int value) {
    this.VolumeCondition = value;
    return this;
  }

  /**
   * Gets the value of the 'MinVolume' field.
   * @return 最小成交量
   */
  public int getMinVolume() {
    return MinVolume;
  }


  /**
   * Sets the value of the 'MinVolume' field.
   * 最小成交量
   * @param value the value to set.
   */
  public FtdcInputOrder setMinVolume(int value) {
    this.MinVolume = value;
    return this;
  }

  /**
   * Gets the value of the 'ContingentCondition' field.
   * @return 触发条件
   */
  public int getContingentCondition() {
    return ContingentCondition;
  }


  /**
   * Sets the value of the 'ContingentCondition' field.
   * 触发条件
   * @param value the value to set.
   */
  public FtdcInputOrder setContingentCondition(int value) {
    this.ContingentCondition = value;
    return this;
  }

  /**
   * Gets the value of the 'StopPrice' field.
   * @return 止损价
   */
  public double getStopPrice() {
    return StopPrice;
  }


  /**
   * Sets the value of the 'StopPrice' field.
   * 止损价
   * @param value the value to set.
   */
  public FtdcInputOrder setStopPrice(double value) {
    this.StopPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'ForceCloseReason' field.
   * @return 强平原因
   */
  public int getForceCloseReason() {
    return ForceCloseReason;
  }


  /**
   * Sets the value of the 'ForceCloseReason' field.
   * 强平原因
   * @param value the value to set.
   */
  public FtdcInputOrder setForceCloseReason(int value) {
    this.ForceCloseReason = value;
    return this;
  }

  /**
   * Gets the value of the 'IsAutoSuspend' field.
   * @return 自动挂起标志
   */
  public int getIsAutoSuspend() {
    return IsAutoSuspend;
  }


  /**
   * Sets the value of the 'IsAutoSuspend' field.
   * 自动挂起标志
   * @param value the value to set.
   */
  public FtdcInputOrder setIsAutoSuspend(int value) {
    this.IsAutoSuspend = value;
    return this;
  }

  /**
   * Gets the value of the 'BusinessUnit' field.
   * @return 业务单元
   */
  public java.lang.String getBusinessUnit() {
    return BusinessUnit;
  }


  /**
   * Sets the value of the 'BusinessUnit' field.
   * 业务单元
   * @param value the value to set.
   */
  public FtdcInputOrder setBusinessUnit(java.lang.String value) {
    this.BusinessUnit = value;
    return this;
  }

  /**
   * Gets the value of the 'RequestID' field.
   * @return 请求编号
   */
  public int getRequestID() {
    return RequestID;
  }


  /**
   * Sets the value of the 'RequestID' field.
   * 请求编号
   * @param value the value to set.
   */
  public FtdcInputOrder setRequestID(int value) {
    this.RequestID = value;
    return this;
  }

  /**
   * Gets the value of the 'UserForceClose' field.
   * @return 用户强评标志
   */
  public int getUserForceClose() {
    return UserForceClose;
  }


  /**
   * Sets the value of the 'UserForceClose' field.
   * 用户强评标志
   * @param value the value to set.
   */
  public FtdcInputOrder setUserForceClose(int value) {
    this.UserForceClose = value;
    return this;
  }

  /**
   * Gets the value of the 'IsSwapOrder' field.
   * @return 互换单标志
   */
  public int getIsSwapOrder() {
    return IsSwapOrder;
  }


  /**
   * Sets the value of the 'IsSwapOrder' field.
   * 互换单标志
   * @param value the value to set.
   */
  public FtdcInputOrder setIsSwapOrder(int value) {
    this.IsSwapOrder = value;
    return this;
  }

  /**
   * Gets the value of the 'ExchangeID' field.
   * @return 交易所代码
   */
  public java.lang.String getExchangeID() {
    return ExchangeID;
  }


  /**
   * Sets the value of the 'ExchangeID' field.
   * 交易所代码
   * @param value the value to set.
   */
  public FtdcInputOrder setExchangeID(java.lang.String value) {
    this.ExchangeID = value;
    return this;
  }

  /**
   * Gets the value of the 'InvestUnitID' field.
   * @return 投资单元代码
   */
  public java.lang.String getInvestUnitID() {
    return InvestUnitID;
  }


  /**
   * Sets the value of the 'InvestUnitID' field.
   * 投资单元代码
   * @param value the value to set.
   */
  public FtdcInputOrder setInvestUnitID(java.lang.String value) {
    this.InvestUnitID = value;
    return this;
  }

  /**
   * Gets the value of the 'AccountID' field.
   * @return 资金账号
   */
  public java.lang.String getAccountID() {
    return AccountID;
  }


  /**
   * Sets the value of the 'AccountID' field.
   * 资金账号
   * @param value the value to set.
   */
  public FtdcInputOrder setAccountID(java.lang.String value) {
    this.AccountID = value;
    return this;
  }

  /**
   * Gets the value of the 'CurrencyID' field.
   * @return 币种代码
   */
  public java.lang.String getCurrencyID() {
    return CurrencyID;
  }


  /**
   * Sets the value of the 'CurrencyID' field.
   * 币种代码
   * @param value the value to set.
   */
  public FtdcInputOrder setCurrencyID(java.lang.String value) {
    this.CurrencyID = value;
    return this;
  }

  /**
   * Gets the value of the 'ClientID' field.
   * @return 交易编码
   */
  public java.lang.String getClientID() {
    return ClientID;
  }


  /**
   * Sets the value of the 'ClientID' field.
   * 交易编码
   * @param value the value to set.
   */
  public FtdcInputOrder setClientID(java.lang.String value) {
    this.ClientID = value;
    return this;
  }

  /**
   * Gets the value of the 'IPAddress' field.
   * @return IP地址
   */
  public java.lang.String getIPAddress() {
    return IPAddress;
  }


  /**
   * Sets the value of the 'IPAddress' field.
   * IP地址
   * @param value the value to set.
   */
  public FtdcInputOrder setIPAddress(java.lang.String value) {
    this.IPAddress = value;
    return this;
  }

  /**
   * Gets the value of the 'MacAddress' field.
   * @return MAC地址
   */
  public java.lang.String getMacAddress() {
    return MacAddress;
  }


  /**
   * Sets the value of the 'MacAddress' field.
   * MAC地址
   * @param value the value to set.
   */
  public FtdcInputOrder setMacAddress(java.lang.String value) {
    this.MacAddress = value;
    return this;
  }

  /**
   * Creates a new FtdcInputOrder RecordBuilder.
   * @return A new FtdcInputOrder RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder newBuilder() {
    return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder();
  }

  /**
   * Creates a new FtdcInputOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FtdcInputOrder RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder newBuilder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder other) {
    if (other == null) {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder();
    } else {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder(other);
    }
  }

  /**
   * Creates a new FtdcInputOrder RecordBuilder by copying an existing FtdcInputOrder instance.
   * @param other The existing instance to copy.
   * @return A new FtdcInputOrder RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder newBuilder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder other) {
    if (other == null) {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder();
    } else {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for FtdcInputOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FtdcInputOrder>
    implements org.apache.avro.data.RecordBuilder<FtdcInputOrder> {

    /** FTDC响应信息 - 错误代码 */
    private int ErrorID;
    /** FTDC响应信息 - 错误信息 */
    private java.lang.String ErrorMsg;
    /** 是否最后一条信息 */
    private boolean IsLast;
    /** 经纪公司代码 */
    private java.lang.String BrokerID;
    /** 投资者代码 */
    private java.lang.String InvestorID;
    /** 合约代码 */
    private java.lang.String InstrumentID;
    /** 报单引用 */
    private java.lang.String OrderRef;
    /** 用户代码 */
    private java.lang.String UserID;
    /** 报单价格条件 */
    private int OrderPriceType;
    /** 买卖方向 */
    private int Direction;
    /** 组合开平标志 */
    private java.lang.String CombOffsetFlag;
    /** 组合投机套保标志 */
    private java.lang.String CombHedgeFlag;
    /** 价格 */
    private double LimitPrice;
    /** 数量 */
    private int VolumeTotalOriginal;
    /** 有效期类型 */
    private int TimeCondition;
    /** GTD日期 */
    private java.lang.String GTDDate;
    /** 成交量类型 */
    private int VolumeCondition;
    /** 最小成交量 */
    private int MinVolume;
    /** 触发条件 */
    private int ContingentCondition;
    /** 止损价 */
    private double StopPrice;
    /** 强平原因 */
    private int ForceCloseReason;
    /** 自动挂起标志 */
    private int IsAutoSuspend;
    /** 业务单元 */
    private java.lang.String BusinessUnit;
    /** 请求编号 */
    private int RequestID;
    /** 用户强评标志 */
    private int UserForceClose;
    /** 互换单标志 */
    private int IsSwapOrder;
    /** 交易所代码 */
    private java.lang.String ExchangeID;
    /** 投资单元代码 */
    private java.lang.String InvestUnitID;
    /** 资金账号 */
    private java.lang.String AccountID;
    /** 币种代码 */
    private java.lang.String CurrencyID;
    /** 交易编码 */
    private java.lang.String ClientID;
    /** IP地址 */
    private java.lang.String IPAddress;
    /** MAC地址 */
    private java.lang.String MacAddress;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ErrorID)) {
        this.ErrorID = data().deepCopy(fields()[0].schema(), other.ErrorID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ErrorMsg)) {
        this.ErrorMsg = data().deepCopy(fields()[1].schema(), other.ErrorMsg);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.IsLast)) {
        this.IsLast = data().deepCopy(fields()[2].schema(), other.IsLast);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.BrokerID)) {
        this.BrokerID = data().deepCopy(fields()[3].schema(), other.BrokerID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.InvestorID)) {
        this.InvestorID = data().deepCopy(fields()[4].schema(), other.InvestorID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.InstrumentID)) {
        this.InstrumentID = data().deepCopy(fields()[5].schema(), other.InstrumentID);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.OrderRef)) {
        this.OrderRef = data().deepCopy(fields()[6].schema(), other.OrderRef);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.UserID)) {
        this.UserID = data().deepCopy(fields()[7].schema(), other.UserID);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.OrderPriceType)) {
        this.OrderPriceType = data().deepCopy(fields()[8].schema(), other.OrderPriceType);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.Direction)) {
        this.Direction = data().deepCopy(fields()[9].schema(), other.Direction);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.CombOffsetFlag)) {
        this.CombOffsetFlag = data().deepCopy(fields()[10].schema(), other.CombOffsetFlag);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.CombHedgeFlag)) {
        this.CombHedgeFlag = data().deepCopy(fields()[11].schema(), other.CombHedgeFlag);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.LimitPrice)) {
        this.LimitPrice = data().deepCopy(fields()[12].schema(), other.LimitPrice);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.VolumeTotalOriginal)) {
        this.VolumeTotalOriginal = data().deepCopy(fields()[13].schema(), other.VolumeTotalOriginal);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.TimeCondition)) {
        this.TimeCondition = data().deepCopy(fields()[14].schema(), other.TimeCondition);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.GTDDate)) {
        this.GTDDate = data().deepCopy(fields()[15].schema(), other.GTDDate);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.VolumeCondition)) {
        this.VolumeCondition = data().deepCopy(fields()[16].schema(), other.VolumeCondition);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.MinVolume)) {
        this.MinVolume = data().deepCopy(fields()[17].schema(), other.MinVolume);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.ContingentCondition)) {
        this.ContingentCondition = data().deepCopy(fields()[18].schema(), other.ContingentCondition);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.StopPrice)) {
        this.StopPrice = data().deepCopy(fields()[19].schema(), other.StopPrice);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.ForceCloseReason)) {
        this.ForceCloseReason = data().deepCopy(fields()[20].schema(), other.ForceCloseReason);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.IsAutoSuspend)) {
        this.IsAutoSuspend = data().deepCopy(fields()[21].schema(), other.IsAutoSuspend);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.BusinessUnit)) {
        this.BusinessUnit = data().deepCopy(fields()[22].schema(), other.BusinessUnit);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[23].schema(), other.RequestID);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.UserForceClose)) {
        this.UserForceClose = data().deepCopy(fields()[24].schema(), other.UserForceClose);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.IsSwapOrder)) {
        this.IsSwapOrder = data().deepCopy(fields()[25].schema(), other.IsSwapOrder);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.ExchangeID)) {
        this.ExchangeID = data().deepCopy(fields()[26].schema(), other.ExchangeID);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.InvestUnitID)) {
        this.InvestUnitID = data().deepCopy(fields()[27].schema(), other.InvestUnitID);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.AccountID)) {
        this.AccountID = data().deepCopy(fields()[28].schema(), other.AccountID);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.CurrencyID)) {
        this.CurrencyID = data().deepCopy(fields()[29].schema(), other.CurrencyID);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.ClientID)) {
        this.ClientID = data().deepCopy(fields()[30].schema(), other.ClientID);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.IPAddress)) {
        this.IPAddress = data().deepCopy(fields()[31].schema(), other.IPAddress);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.MacAddress)) {
        this.MacAddress = data().deepCopy(fields()[32].schema(), other.MacAddress);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
    }

    /**
     * Creates a Builder by copying an existing FtdcInputOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ErrorID)) {
        this.ErrorID = data().deepCopy(fields()[0].schema(), other.ErrorID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ErrorMsg)) {
        this.ErrorMsg = data().deepCopy(fields()[1].schema(), other.ErrorMsg);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IsLast)) {
        this.IsLast = data().deepCopy(fields()[2].schema(), other.IsLast);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.BrokerID)) {
        this.BrokerID = data().deepCopy(fields()[3].schema(), other.BrokerID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.InvestorID)) {
        this.InvestorID = data().deepCopy(fields()[4].schema(), other.InvestorID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.InstrumentID)) {
        this.InstrumentID = data().deepCopy(fields()[5].schema(), other.InstrumentID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.OrderRef)) {
        this.OrderRef = data().deepCopy(fields()[6].schema(), other.OrderRef);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.UserID)) {
        this.UserID = data().deepCopy(fields()[7].schema(), other.UserID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.OrderPriceType)) {
        this.OrderPriceType = data().deepCopy(fields()[8].schema(), other.OrderPriceType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.Direction)) {
        this.Direction = data().deepCopy(fields()[9].schema(), other.Direction);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.CombOffsetFlag)) {
        this.CombOffsetFlag = data().deepCopy(fields()[10].schema(), other.CombOffsetFlag);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.CombHedgeFlag)) {
        this.CombHedgeFlag = data().deepCopy(fields()[11].schema(), other.CombHedgeFlag);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.LimitPrice)) {
        this.LimitPrice = data().deepCopy(fields()[12].schema(), other.LimitPrice);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.VolumeTotalOriginal)) {
        this.VolumeTotalOriginal = data().deepCopy(fields()[13].schema(), other.VolumeTotalOriginal);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.TimeCondition)) {
        this.TimeCondition = data().deepCopy(fields()[14].schema(), other.TimeCondition);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.GTDDate)) {
        this.GTDDate = data().deepCopy(fields()[15].schema(), other.GTDDate);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.VolumeCondition)) {
        this.VolumeCondition = data().deepCopy(fields()[16].schema(), other.VolumeCondition);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.MinVolume)) {
        this.MinVolume = data().deepCopy(fields()[17].schema(), other.MinVolume);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.ContingentCondition)) {
        this.ContingentCondition = data().deepCopy(fields()[18].schema(), other.ContingentCondition);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.StopPrice)) {
        this.StopPrice = data().deepCopy(fields()[19].schema(), other.StopPrice);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.ForceCloseReason)) {
        this.ForceCloseReason = data().deepCopy(fields()[20].schema(), other.ForceCloseReason);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.IsAutoSuspend)) {
        this.IsAutoSuspend = data().deepCopy(fields()[21].schema(), other.IsAutoSuspend);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.BusinessUnit)) {
        this.BusinessUnit = data().deepCopy(fields()[22].schema(), other.BusinessUnit);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[23].schema(), other.RequestID);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.UserForceClose)) {
        this.UserForceClose = data().deepCopy(fields()[24].schema(), other.UserForceClose);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.IsSwapOrder)) {
        this.IsSwapOrder = data().deepCopy(fields()[25].schema(), other.IsSwapOrder);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.ExchangeID)) {
        this.ExchangeID = data().deepCopy(fields()[26].schema(), other.ExchangeID);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.InvestUnitID)) {
        this.InvestUnitID = data().deepCopy(fields()[27].schema(), other.InvestUnitID);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.AccountID)) {
        this.AccountID = data().deepCopy(fields()[28].schema(), other.AccountID);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.CurrencyID)) {
        this.CurrencyID = data().deepCopy(fields()[29].schema(), other.CurrencyID);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.ClientID)) {
        this.ClientID = data().deepCopy(fields()[30].schema(), other.ClientID);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.IPAddress)) {
        this.IPAddress = data().deepCopy(fields()[31].schema(), other.IPAddress);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.MacAddress)) {
        this.MacAddress = data().deepCopy(fields()[32].schema(), other.MacAddress);
        fieldSetFlags()[32] = true;
      }
    }

    /**
      * Gets the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @return The value.
      */
    public int getErrorID() {
      return ErrorID;
    }


    /**
      * Sets the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @param value The value of 'ErrorID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setErrorID(int value) {
      validate(fields()[0], value);
      this.ErrorID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ErrorID' field has been set.
      * FTDC响应信息 - 错误代码
      * @return True if the 'ErrorID' field has been set, false otherwise.
      */
    public boolean hasErrorID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearErrorID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @return The value.
      */
    public java.lang.String getErrorMsg() {
      return ErrorMsg;
    }


    /**
      * Sets the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @param value The value of 'ErrorMsg'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setErrorMsg(java.lang.String value) {
      validate(fields()[1], value);
      this.ErrorMsg = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ErrorMsg' field has been set.
      * FTDC响应信息 - 错误信息
      * @return True if the 'ErrorMsg' field has been set, false otherwise.
      */
    public boolean hasErrorMsg() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearErrorMsg() {
      ErrorMsg = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'IsLast' field.
      * 是否最后一条信息
      * @return The value.
      */
    public boolean getIsLast() {
      return IsLast;
    }


    /**
      * Sets the value of the 'IsLast' field.
      * 是否最后一条信息
      * @param value The value of 'IsLast'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setIsLast(boolean value) {
      validate(fields()[2], value);
      this.IsLast = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'IsLast' field has been set.
      * 是否最后一条信息
      * @return True if the 'IsLast' field has been set, false otherwise.
      */
    public boolean hasIsLast() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'IsLast' field.
      * 是否最后一条信息
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearIsLast() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'BrokerID' field.
      * 经纪公司代码
      * @return The value.
      */
    public java.lang.String getBrokerID() {
      return BrokerID;
    }


    /**
      * Sets the value of the 'BrokerID' field.
      * 经纪公司代码
      * @param value The value of 'BrokerID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setBrokerID(java.lang.String value) {
      validate(fields()[3], value);
      this.BrokerID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'BrokerID' field has been set.
      * 经纪公司代码
      * @return True if the 'BrokerID' field has been set, false otherwise.
      */
    public boolean hasBrokerID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'BrokerID' field.
      * 经纪公司代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearBrokerID() {
      BrokerID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'InvestorID' field.
      * 投资者代码
      * @return The value.
      */
    public java.lang.String getInvestorID() {
      return InvestorID;
    }


    /**
      * Sets the value of the 'InvestorID' field.
      * 投资者代码
      * @param value The value of 'InvestorID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setInvestorID(java.lang.String value) {
      validate(fields()[4], value);
      this.InvestorID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'InvestorID' field has been set.
      * 投资者代码
      * @return True if the 'InvestorID' field has been set, false otherwise.
      */
    public boolean hasInvestorID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'InvestorID' field.
      * 投资者代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearInvestorID() {
      InvestorID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstrumentID' field.
      * 合约代码
      * @return The value.
      */
    public java.lang.String getInstrumentID() {
      return InstrumentID;
    }


    /**
      * Sets the value of the 'InstrumentID' field.
      * 合约代码
      * @param value The value of 'InstrumentID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setInstrumentID(java.lang.String value) {
      validate(fields()[5], value);
      this.InstrumentID = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'InstrumentID' field has been set.
      * 合约代码
      * @return True if the 'InstrumentID' field has been set, false otherwise.
      */
    public boolean hasInstrumentID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'InstrumentID' field.
      * 合约代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearInstrumentID() {
      InstrumentID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderRef' field.
      * 报单引用
      * @return The value.
      */
    public java.lang.String getOrderRef() {
      return OrderRef;
    }


    /**
      * Sets the value of the 'OrderRef' field.
      * 报单引用
      * @param value The value of 'OrderRef'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setOrderRef(java.lang.String value) {
      validate(fields()[6], value);
      this.OrderRef = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderRef' field has been set.
      * 报单引用
      * @return True if the 'OrderRef' field has been set, false otherwise.
      */
    public boolean hasOrderRef() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'OrderRef' field.
      * 报单引用
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearOrderRef() {
      OrderRef = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'UserID' field.
      * 用户代码
      * @return The value.
      */
    public java.lang.String getUserID() {
      return UserID;
    }


    /**
      * Sets the value of the 'UserID' field.
      * 用户代码
      * @param value The value of 'UserID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setUserID(java.lang.String value) {
      validate(fields()[7], value);
      this.UserID = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'UserID' field has been set.
      * 用户代码
      * @return True if the 'UserID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'UserID' field.
      * 用户代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearUserID() {
      UserID = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderPriceType' field.
      * 报单价格条件
      * @return The value.
      */
    public int getOrderPriceType() {
      return OrderPriceType;
    }


    /**
      * Sets the value of the 'OrderPriceType' field.
      * 报单价格条件
      * @param value The value of 'OrderPriceType'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setOrderPriceType(int value) {
      validate(fields()[8], value);
      this.OrderPriceType = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderPriceType' field has been set.
      * 报单价格条件
      * @return True if the 'OrderPriceType' field has been set, false otherwise.
      */
    public boolean hasOrderPriceType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'OrderPriceType' field.
      * 报单价格条件
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearOrderPriceType() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'Direction' field.
      * 买卖方向
      * @return The value.
      */
    public int getDirection() {
      return Direction;
    }


    /**
      * Sets the value of the 'Direction' field.
      * 买卖方向
      * @param value The value of 'Direction'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setDirection(int value) {
      validate(fields()[9], value);
      this.Direction = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'Direction' field has been set.
      * 买卖方向
      * @return True if the 'Direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'Direction' field.
      * 买卖方向
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearDirection() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'CombOffsetFlag' field.
      * 组合开平标志
      * @return The value.
      */
    public java.lang.String getCombOffsetFlag() {
      return CombOffsetFlag;
    }


    /**
      * Sets the value of the 'CombOffsetFlag' field.
      * 组合开平标志
      * @param value The value of 'CombOffsetFlag'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setCombOffsetFlag(java.lang.String value) {
      validate(fields()[10], value);
      this.CombOffsetFlag = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'CombOffsetFlag' field has been set.
      * 组合开平标志
      * @return True if the 'CombOffsetFlag' field has been set, false otherwise.
      */
    public boolean hasCombOffsetFlag() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'CombOffsetFlag' field.
      * 组合开平标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearCombOffsetFlag() {
      CombOffsetFlag = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'CombHedgeFlag' field.
      * 组合投机套保标志
      * @return The value.
      */
    public java.lang.String getCombHedgeFlag() {
      return CombHedgeFlag;
    }


    /**
      * Sets the value of the 'CombHedgeFlag' field.
      * 组合投机套保标志
      * @param value The value of 'CombHedgeFlag'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setCombHedgeFlag(java.lang.String value) {
      validate(fields()[11], value);
      this.CombHedgeFlag = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'CombHedgeFlag' field has been set.
      * 组合投机套保标志
      * @return True if the 'CombHedgeFlag' field has been set, false otherwise.
      */
    public boolean hasCombHedgeFlag() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'CombHedgeFlag' field.
      * 组合投机套保标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearCombHedgeFlag() {
      CombHedgeFlag = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'LimitPrice' field.
      * 价格
      * @return The value.
      */
    public double getLimitPrice() {
      return LimitPrice;
    }


    /**
      * Sets the value of the 'LimitPrice' field.
      * 价格
      * @param value The value of 'LimitPrice'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setLimitPrice(double value) {
      validate(fields()[12], value);
      this.LimitPrice = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'LimitPrice' field has been set.
      * 价格
      * @return True if the 'LimitPrice' field has been set, false otherwise.
      */
    public boolean hasLimitPrice() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'LimitPrice' field.
      * 价格
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearLimitPrice() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'VolumeTotalOriginal' field.
      * 数量
      * @return The value.
      */
    public int getVolumeTotalOriginal() {
      return VolumeTotalOriginal;
    }


    /**
      * Sets the value of the 'VolumeTotalOriginal' field.
      * 数量
      * @param value The value of 'VolumeTotalOriginal'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setVolumeTotalOriginal(int value) {
      validate(fields()[13], value);
      this.VolumeTotalOriginal = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'VolumeTotalOriginal' field has been set.
      * 数量
      * @return True if the 'VolumeTotalOriginal' field has been set, false otherwise.
      */
    public boolean hasVolumeTotalOriginal() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'VolumeTotalOriginal' field.
      * 数量
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearVolumeTotalOriginal() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimeCondition' field.
      * 有效期类型
      * @return The value.
      */
    public int getTimeCondition() {
      return TimeCondition;
    }


    /**
      * Sets the value of the 'TimeCondition' field.
      * 有效期类型
      * @param value The value of 'TimeCondition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setTimeCondition(int value) {
      validate(fields()[14], value);
      this.TimeCondition = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'TimeCondition' field has been set.
      * 有效期类型
      * @return True if the 'TimeCondition' field has been set, false otherwise.
      */
    public boolean hasTimeCondition() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'TimeCondition' field.
      * 有效期类型
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearTimeCondition() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'GTDDate' field.
      * GTD日期
      * @return The value.
      */
    public java.lang.String getGTDDate() {
      return GTDDate;
    }


    /**
      * Sets the value of the 'GTDDate' field.
      * GTD日期
      * @param value The value of 'GTDDate'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setGTDDate(java.lang.String value) {
      validate(fields()[15], value);
      this.GTDDate = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'GTDDate' field has been set.
      * GTD日期
      * @return True if the 'GTDDate' field has been set, false otherwise.
      */
    public boolean hasGTDDate() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'GTDDate' field.
      * GTD日期
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearGTDDate() {
      GTDDate = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'VolumeCondition' field.
      * 成交量类型
      * @return The value.
      */
    public int getVolumeCondition() {
      return VolumeCondition;
    }


    /**
      * Sets the value of the 'VolumeCondition' field.
      * 成交量类型
      * @param value The value of 'VolumeCondition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setVolumeCondition(int value) {
      validate(fields()[16], value);
      this.VolumeCondition = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'VolumeCondition' field has been set.
      * 成交量类型
      * @return True if the 'VolumeCondition' field has been set, false otherwise.
      */
    public boolean hasVolumeCondition() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'VolumeCondition' field.
      * 成交量类型
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearVolumeCondition() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'MinVolume' field.
      * 最小成交量
      * @return The value.
      */
    public int getMinVolume() {
      return MinVolume;
    }


    /**
      * Sets the value of the 'MinVolume' field.
      * 最小成交量
      * @param value The value of 'MinVolume'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setMinVolume(int value) {
      validate(fields()[17], value);
      this.MinVolume = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'MinVolume' field has been set.
      * 最小成交量
      * @return True if the 'MinVolume' field has been set, false otherwise.
      */
    public boolean hasMinVolume() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'MinVolume' field.
      * 最小成交量
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearMinVolume() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'ContingentCondition' field.
      * 触发条件
      * @return The value.
      */
    public int getContingentCondition() {
      return ContingentCondition;
    }


    /**
      * Sets the value of the 'ContingentCondition' field.
      * 触发条件
      * @param value The value of 'ContingentCondition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setContingentCondition(int value) {
      validate(fields()[18], value);
      this.ContingentCondition = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'ContingentCondition' field has been set.
      * 触发条件
      * @return True if the 'ContingentCondition' field has been set, false otherwise.
      */
    public boolean hasContingentCondition() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'ContingentCondition' field.
      * 触发条件
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearContingentCondition() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'StopPrice' field.
      * 止损价
      * @return The value.
      */
    public double getStopPrice() {
      return StopPrice;
    }


    /**
      * Sets the value of the 'StopPrice' field.
      * 止损价
      * @param value The value of 'StopPrice'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setStopPrice(double value) {
      validate(fields()[19], value);
      this.StopPrice = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'StopPrice' field has been set.
      * 止损价
      * @return True if the 'StopPrice' field has been set, false otherwise.
      */
    public boolean hasStopPrice() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'StopPrice' field.
      * 止损价
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearStopPrice() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'ForceCloseReason' field.
      * 强平原因
      * @return The value.
      */
    public int getForceCloseReason() {
      return ForceCloseReason;
    }


    /**
      * Sets the value of the 'ForceCloseReason' field.
      * 强平原因
      * @param value The value of 'ForceCloseReason'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setForceCloseReason(int value) {
      validate(fields()[20], value);
      this.ForceCloseReason = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'ForceCloseReason' field has been set.
      * 强平原因
      * @return True if the 'ForceCloseReason' field has been set, false otherwise.
      */
    public boolean hasForceCloseReason() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'ForceCloseReason' field.
      * 强平原因
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearForceCloseReason() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'IsAutoSuspend' field.
      * 自动挂起标志
      * @return The value.
      */
    public int getIsAutoSuspend() {
      return IsAutoSuspend;
    }


    /**
      * Sets the value of the 'IsAutoSuspend' field.
      * 自动挂起标志
      * @param value The value of 'IsAutoSuspend'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setIsAutoSuspend(int value) {
      validate(fields()[21], value);
      this.IsAutoSuspend = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'IsAutoSuspend' field has been set.
      * 自动挂起标志
      * @return True if the 'IsAutoSuspend' field has been set, false otherwise.
      */
    public boolean hasIsAutoSuspend() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'IsAutoSuspend' field.
      * 自动挂起标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearIsAutoSuspend() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'BusinessUnit' field.
      * 业务单元
      * @return The value.
      */
    public java.lang.String getBusinessUnit() {
      return BusinessUnit;
    }


    /**
      * Sets the value of the 'BusinessUnit' field.
      * 业务单元
      * @param value The value of 'BusinessUnit'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setBusinessUnit(java.lang.String value) {
      validate(fields()[22], value);
      this.BusinessUnit = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'BusinessUnit' field has been set.
      * 业务单元
      * @return True if the 'BusinessUnit' field has been set, false otherwise.
      */
    public boolean hasBusinessUnit() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'BusinessUnit' field.
      * 业务单元
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearBusinessUnit() {
      BusinessUnit = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'RequestID' field.
      * 请求编号
      * @return The value.
      */
    public int getRequestID() {
      return RequestID;
    }


    /**
      * Sets the value of the 'RequestID' field.
      * 请求编号
      * @param value The value of 'RequestID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setRequestID(int value) {
      validate(fields()[23], value);
      this.RequestID = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'RequestID' field has been set.
      * 请求编号
      * @return True if the 'RequestID' field has been set, false otherwise.
      */
    public boolean hasRequestID() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'RequestID' field.
      * 请求编号
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearRequestID() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'UserForceClose' field.
      * 用户强评标志
      * @return The value.
      */
    public int getUserForceClose() {
      return UserForceClose;
    }


    /**
      * Sets the value of the 'UserForceClose' field.
      * 用户强评标志
      * @param value The value of 'UserForceClose'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setUserForceClose(int value) {
      validate(fields()[24], value);
      this.UserForceClose = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'UserForceClose' field has been set.
      * 用户强评标志
      * @return True if the 'UserForceClose' field has been set, false otherwise.
      */
    public boolean hasUserForceClose() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'UserForceClose' field.
      * 用户强评标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearUserForceClose() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'IsSwapOrder' field.
      * 互换单标志
      * @return The value.
      */
    public int getIsSwapOrder() {
      return IsSwapOrder;
    }


    /**
      * Sets the value of the 'IsSwapOrder' field.
      * 互换单标志
      * @param value The value of 'IsSwapOrder'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setIsSwapOrder(int value) {
      validate(fields()[25], value);
      this.IsSwapOrder = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'IsSwapOrder' field has been set.
      * 互换单标志
      * @return True if the 'IsSwapOrder' field has been set, false otherwise.
      */
    public boolean hasIsSwapOrder() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'IsSwapOrder' field.
      * 互换单标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearIsSwapOrder() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'ExchangeID' field.
      * 交易所代码
      * @return The value.
      */
    public java.lang.String getExchangeID() {
      return ExchangeID;
    }


    /**
      * Sets the value of the 'ExchangeID' field.
      * 交易所代码
      * @param value The value of 'ExchangeID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setExchangeID(java.lang.String value) {
      validate(fields()[26], value);
      this.ExchangeID = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'ExchangeID' field has been set.
      * 交易所代码
      * @return True if the 'ExchangeID' field has been set, false otherwise.
      */
    public boolean hasExchangeID() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'ExchangeID' field.
      * 交易所代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearExchangeID() {
      ExchangeID = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @return The value.
      */
    public java.lang.String getInvestUnitID() {
      return InvestUnitID;
    }


    /**
      * Sets the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @param value The value of 'InvestUnitID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setInvestUnitID(java.lang.String value) {
      validate(fields()[27], value);
      this.InvestUnitID = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'InvestUnitID' field has been set.
      * 投资单元代码
      * @return True if the 'InvestUnitID' field has been set, false otherwise.
      */
    public boolean hasInvestUnitID() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearInvestUnitID() {
      InvestUnitID = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'AccountID' field.
      * 资金账号
      * @return The value.
      */
    public java.lang.String getAccountID() {
      return AccountID;
    }


    /**
      * Sets the value of the 'AccountID' field.
      * 资金账号
      * @param value The value of 'AccountID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setAccountID(java.lang.String value) {
      validate(fields()[28], value);
      this.AccountID = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'AccountID' field has been set.
      * 资金账号
      * @return True if the 'AccountID' field has been set, false otherwise.
      */
    public boolean hasAccountID() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'AccountID' field.
      * 资金账号
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearAccountID() {
      AccountID = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'CurrencyID' field.
      * 币种代码
      * @return The value.
      */
    public java.lang.String getCurrencyID() {
      return CurrencyID;
    }


    /**
      * Sets the value of the 'CurrencyID' field.
      * 币种代码
      * @param value The value of 'CurrencyID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setCurrencyID(java.lang.String value) {
      validate(fields()[29], value);
      this.CurrencyID = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'CurrencyID' field has been set.
      * 币种代码
      * @return True if the 'CurrencyID' field has been set, false otherwise.
      */
    public boolean hasCurrencyID() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'CurrencyID' field.
      * 币种代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearCurrencyID() {
      CurrencyID = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'ClientID' field.
      * 交易编码
      * @return The value.
      */
    public java.lang.String getClientID() {
      return ClientID;
    }


    /**
      * Sets the value of the 'ClientID' field.
      * 交易编码
      * @param value The value of 'ClientID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setClientID(java.lang.String value) {
      validate(fields()[30], value);
      this.ClientID = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'ClientID' field has been set.
      * 交易编码
      * @return True if the 'ClientID' field has been set, false otherwise.
      */
    public boolean hasClientID() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'ClientID' field.
      * 交易编码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearClientID() {
      ClientID = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'IPAddress' field.
      * IP地址
      * @return The value.
      */
    public java.lang.String getIPAddress() {
      return IPAddress;
    }


    /**
      * Sets the value of the 'IPAddress' field.
      * IP地址
      * @param value The value of 'IPAddress'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setIPAddress(java.lang.String value) {
      validate(fields()[31], value);
      this.IPAddress = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'IPAddress' field has been set.
      * IP地址
      * @return True if the 'IPAddress' field has been set, false otherwise.
      */
    public boolean hasIPAddress() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'IPAddress' field.
      * IP地址
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearIPAddress() {
      IPAddress = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'MacAddress' field.
      * MAC地址
      * @return The value.
      */
    public java.lang.String getMacAddress() {
      return MacAddress;
    }


    /**
      * Sets the value of the 'MacAddress' field.
      * MAC地址
      * @param value The value of 'MacAddress'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder setMacAddress(java.lang.String value) {
      validate(fields()[32], value);
      this.MacAddress = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'MacAddress' field has been set.
      * MAC地址
      * @return True if the 'MacAddress' field has been set, false otherwise.
      */
    public boolean hasMacAddress() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'MacAddress' field.
      * MAC地址
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInputOrder.Builder clearMacAddress() {
      MacAddress = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    @Override
    public FtdcInputOrder build() {
      try {
        FtdcInputOrder record = new FtdcInputOrder();
        record.ErrorID = fieldSetFlags()[0] ? this.ErrorID : (java.lang.Integer) defaultValue(fields()[0]);
        record.ErrorMsg = fieldSetFlags()[1] ? this.ErrorMsg : (java.lang.String) defaultValue(fields()[1]);
        record.IsLast = fieldSetFlags()[2] ? this.IsLast : (java.lang.Boolean) defaultValue(fields()[2]);
        record.BrokerID = fieldSetFlags()[3] ? this.BrokerID : (java.lang.String) defaultValue(fields()[3]);
        record.InvestorID = fieldSetFlags()[4] ? this.InvestorID : (java.lang.String) defaultValue(fields()[4]);
        record.InstrumentID = fieldSetFlags()[5] ? this.InstrumentID : (java.lang.String) defaultValue(fields()[5]);
        record.OrderRef = fieldSetFlags()[6] ? this.OrderRef : (java.lang.String) defaultValue(fields()[6]);
        record.UserID = fieldSetFlags()[7] ? this.UserID : (java.lang.String) defaultValue(fields()[7]);
        record.OrderPriceType = fieldSetFlags()[8] ? this.OrderPriceType : (java.lang.Integer) defaultValue(fields()[8]);
        record.Direction = fieldSetFlags()[9] ? this.Direction : (java.lang.Integer) defaultValue(fields()[9]);
        record.CombOffsetFlag = fieldSetFlags()[10] ? this.CombOffsetFlag : (java.lang.String) defaultValue(fields()[10]);
        record.CombHedgeFlag = fieldSetFlags()[11] ? this.CombHedgeFlag : (java.lang.String) defaultValue(fields()[11]);
        record.LimitPrice = fieldSetFlags()[12] ? this.LimitPrice : (java.lang.Double) defaultValue(fields()[12]);
        record.VolumeTotalOriginal = fieldSetFlags()[13] ? this.VolumeTotalOriginal : (java.lang.Integer) defaultValue(fields()[13]);
        record.TimeCondition = fieldSetFlags()[14] ? this.TimeCondition : (java.lang.Integer) defaultValue(fields()[14]);
        record.GTDDate = fieldSetFlags()[15] ? this.GTDDate : (java.lang.String) defaultValue(fields()[15]);
        record.VolumeCondition = fieldSetFlags()[16] ? this.VolumeCondition : (java.lang.Integer) defaultValue(fields()[16]);
        record.MinVolume = fieldSetFlags()[17] ? this.MinVolume : (java.lang.Integer) defaultValue(fields()[17]);
        record.ContingentCondition = fieldSetFlags()[18] ? this.ContingentCondition : (java.lang.Integer) defaultValue(fields()[18]);
        record.StopPrice = fieldSetFlags()[19] ? this.StopPrice : (java.lang.Double) defaultValue(fields()[19]);
        record.ForceCloseReason = fieldSetFlags()[20] ? this.ForceCloseReason : (java.lang.Integer) defaultValue(fields()[20]);
        record.IsAutoSuspend = fieldSetFlags()[21] ? this.IsAutoSuspend : (java.lang.Integer) defaultValue(fields()[21]);
        record.BusinessUnit = fieldSetFlags()[22] ? this.BusinessUnit : (java.lang.String) defaultValue(fields()[22]);
        record.RequestID = fieldSetFlags()[23] ? this.RequestID : (java.lang.Integer) defaultValue(fields()[23]);
        record.UserForceClose = fieldSetFlags()[24] ? this.UserForceClose : (java.lang.Integer) defaultValue(fields()[24]);
        record.IsSwapOrder = fieldSetFlags()[25] ? this.IsSwapOrder : (java.lang.Integer) defaultValue(fields()[25]);
        record.ExchangeID = fieldSetFlags()[26] ? this.ExchangeID : (java.lang.String) defaultValue(fields()[26]);
        record.InvestUnitID = fieldSetFlags()[27] ? this.InvestUnitID : (java.lang.String) defaultValue(fields()[27]);
        record.AccountID = fieldSetFlags()[28] ? this.AccountID : (java.lang.String) defaultValue(fields()[28]);
        record.CurrencyID = fieldSetFlags()[29] ? this.CurrencyID : (java.lang.String) defaultValue(fields()[29]);
        record.ClientID = fieldSetFlags()[30] ? this.ClientID : (java.lang.String) defaultValue(fields()[30]);
        record.IPAddress = fieldSetFlags()[31] ? this.IPAddress : (java.lang.String) defaultValue(fields()[31]);
        record.MacAddress = fieldSetFlags()[32] ? this.MacAddress : (java.lang.String) defaultValue(fields()[32]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FtdcInputOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<FtdcInputOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FtdcInputOrder>
    READER$ = (org.apache.avro.io.DatumReader<FtdcInputOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.ErrorID);

    out.writeString(this.ErrorMsg);

    out.writeBoolean(this.IsLast);

    out.writeString(this.BrokerID);

    out.writeString(this.InvestorID);

    out.writeString(this.InstrumentID);

    out.writeString(this.OrderRef);

    out.writeString(this.UserID);

    out.writeInt(this.OrderPriceType);

    out.writeInt(this.Direction);

    out.writeString(this.CombOffsetFlag);

    out.writeString(this.CombHedgeFlag);

    out.writeDouble(this.LimitPrice);

    out.writeInt(this.VolumeTotalOriginal);

    out.writeInt(this.TimeCondition);

    out.writeString(this.GTDDate);

    out.writeInt(this.VolumeCondition);

    out.writeInt(this.MinVolume);

    out.writeInt(this.ContingentCondition);

    out.writeDouble(this.StopPrice);

    out.writeInt(this.ForceCloseReason);

    out.writeInt(this.IsAutoSuspend);

    out.writeString(this.BusinessUnit);

    out.writeInt(this.RequestID);

    out.writeInt(this.UserForceClose);

    out.writeInt(this.IsSwapOrder);

    out.writeString(this.ExchangeID);

    out.writeString(this.InvestUnitID);

    out.writeString(this.AccountID);

    out.writeString(this.CurrencyID);

    out.writeString(this.ClientID);

    out.writeString(this.IPAddress);

    out.writeString(this.MacAddress);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ErrorID = in.readInt();

      this.ErrorMsg = in.readString();

      this.IsLast = in.readBoolean();

      this.BrokerID = in.readString();

      this.InvestorID = in.readString();

      this.InstrumentID = in.readString();

      this.OrderRef = in.readString();

      this.UserID = in.readString();

      this.OrderPriceType = in.readInt();

      this.Direction = in.readInt();

      this.CombOffsetFlag = in.readString();

      this.CombHedgeFlag = in.readString();

      this.LimitPrice = in.readDouble();

      this.VolumeTotalOriginal = in.readInt();

      this.TimeCondition = in.readInt();

      this.GTDDate = in.readString();

      this.VolumeCondition = in.readInt();

      this.MinVolume = in.readInt();

      this.ContingentCondition = in.readInt();

      this.StopPrice = in.readDouble();

      this.ForceCloseReason = in.readInt();

      this.IsAutoSuspend = in.readInt();

      this.BusinessUnit = in.readString();

      this.RequestID = in.readInt();

      this.UserForceClose = in.readInt();

      this.IsSwapOrder = in.readInt();

      this.ExchangeID = in.readString();

      this.InvestUnitID = in.readString();

      this.AccountID = in.readString();

      this.CurrencyID = in.readString();

      this.ClientID = in.readString();

      this.IPAddress = in.readString();

      this.MacAddress = in.readString();

    } else {
      for (int i = 0; i < 33; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ErrorID = in.readInt();
          break;

        case 1:
          this.ErrorMsg = in.readString();
          break;

        case 2:
          this.IsLast = in.readBoolean();
          break;

        case 3:
          this.BrokerID = in.readString();
          break;

        case 4:
          this.InvestorID = in.readString();
          break;

        case 5:
          this.InstrumentID = in.readString();
          break;

        case 6:
          this.OrderRef = in.readString();
          break;

        case 7:
          this.UserID = in.readString();
          break;

        case 8:
          this.OrderPriceType = in.readInt();
          break;

        case 9:
          this.Direction = in.readInt();
          break;

        case 10:
          this.CombOffsetFlag = in.readString();
          break;

        case 11:
          this.CombHedgeFlag = in.readString();
          break;

        case 12:
          this.LimitPrice = in.readDouble();
          break;

        case 13:
          this.VolumeTotalOriginal = in.readInt();
          break;

        case 14:
          this.TimeCondition = in.readInt();
          break;

        case 15:
          this.GTDDate = in.readString();
          break;

        case 16:
          this.VolumeCondition = in.readInt();
          break;

        case 17:
          this.MinVolume = in.readInt();
          break;

        case 18:
          this.ContingentCondition = in.readInt();
          break;

        case 19:
          this.StopPrice = in.readDouble();
          break;

        case 20:
          this.ForceCloseReason = in.readInt();
          break;

        case 21:
          this.IsAutoSuspend = in.readInt();
          break;

        case 22:
          this.BusinessUnit = in.readString();
          break;

        case 23:
          this.RequestID = in.readInt();
          break;

        case 24:
          this.UserForceClose = in.readInt();
          break;

        case 25:
          this.IsSwapOrder = in.readInt();
          break;

        case 26:
          this.ExchangeID = in.readString();
          break;

        case 27:
          this.InvestUnitID = in.readString();
          break;

        case 28:
          this.AccountID = in.readString();
          break;

        case 29:
          this.CurrencyID = in.readString();
          break;

        case 30:
          this.ClientID = in.readString();
          break;

        case 31:
          this.IPAddress = in.readString();
          break;

        case 32:
          this.MacAddress = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










