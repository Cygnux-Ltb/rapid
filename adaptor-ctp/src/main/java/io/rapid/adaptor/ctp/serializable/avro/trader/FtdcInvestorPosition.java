/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.rapid.adaptor.ctp.serializable.avro.trader;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** FtdcInvestorPosition */
@org.apache.avro.specific.AvroGenerated
public class FtdcInvestorPosition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1269624363481786858L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FtdcInvestorPosition\",\"namespace\":\"io.rapid.adaptor.ctp.serializable.avro.trader\",\"doc\":\"FtdcInvestorPosition\",\"fields\":[{\"name\":\"ErrorID\",\"type\":\"int\",\"doc\":\"FTDC响应信息 - 错误代码\"},{\"name\":\"ErrorMsg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"FTDC响应信息 - 错误信息\"},{\"name\":\"RequestID\",\"type\":\"int\",\"doc\":\"请求ID\"},{\"name\":\"IsLast\",\"type\":\"boolean\",\"doc\":\"是否最后一条信息\"},{\"name\":\"InstrumentID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"合约代码\"},{\"name\":\"BrokerID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"经纪公司代码\"},{\"name\":\"InvestorID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"投资者代码\"},{\"name\":\"PosiDirection\",\"type\":\"int\",\"doc\":\"持仓多空方向\"},{\"name\":\"HedgeFlag\",\"type\":\"int\",\"doc\":\"投机套保标志\"},{\"name\":\"PositionDate\",\"type\":\"int\",\"doc\":\"持仓日期\"},{\"name\":\"YdPosition\",\"type\":\"int\",\"doc\":\"上日持仓\"},{\"name\":\"Position\",\"type\":\"int\",\"doc\":\"今日持仓\"},{\"name\":\"LongFrozen\",\"type\":\"int\",\"doc\":\"多头冻结\"},{\"name\":\"ShortFrozen\",\"type\":\"int\",\"doc\":\"空头冻结\"},{\"name\":\"LongFrozenAmount\",\"type\":\"double\",\"doc\":\"开仓冻结金额\"},{\"name\":\"ShortFrozenAmount\",\"type\":\"double\",\"doc\":\"开仓冻结金额\"},{\"name\":\"OpenVolume\",\"type\":\"int\",\"doc\":\"开仓量\"},{\"name\":\"CloseVolume\",\"type\":\"int\",\"doc\":\"平仓量\"},{\"name\":\"OpenAmount\",\"type\":\"double\",\"doc\":\"开仓金额\"},{\"name\":\"CloseAmount\",\"type\":\"double\",\"doc\":\"平仓金额\"},{\"name\":\"PositionCost\",\"type\":\"double\",\"doc\":\"持仓成本\"},{\"name\":\"PreMargin\",\"type\":\"double\",\"doc\":\"上次占用的保证金\"},{\"name\":\"UseMargin\",\"type\":\"double\",\"doc\":\"占用的保证金\"},{\"name\":\"FrozenMargin\",\"type\":\"double\",\"doc\":\"冻结的保证金\"},{\"name\":\"FrozenCash\",\"type\":\"double\",\"doc\":\"冻结的资金\"},{\"name\":\"FrozenCommission\",\"type\":\"double\",\"doc\":\"冻结的手续费\"},{\"name\":\"CashIn\",\"type\":\"double\",\"doc\":\"资金差额\"},{\"name\":\"Commission\",\"type\":\"double\",\"doc\":\"手续费\"},{\"name\":\"CloseProfit\",\"type\":\"double\",\"doc\":\"平仓盈亏\"},{\"name\":\"PositionProfit\",\"type\":\"double\",\"doc\":\"持仓盈亏\"},{\"name\":\"PreSettlementPrice\",\"type\":\"double\",\"doc\":\"上次结算价\"},{\"name\":\"SettlementPrice\",\"type\":\"double\",\"doc\":\"本次结算价\"},{\"name\":\"TradingDay\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易日\"},{\"name\":\"SettlementID\",\"type\":\"int\",\"doc\":\"结算编号\"},{\"name\":\"OpenCost\",\"type\":\"double\",\"doc\":\"开仓成本\"},{\"name\":\"ExchangeMargin\",\"type\":\"double\",\"doc\":\"交易所保证金\"},{\"name\":\"CombPosition\",\"type\":\"int\",\"doc\":\"组合成交形成的持仓\"},{\"name\":\"CombLongFrozen\",\"type\":\"int\",\"doc\":\"组合多头冻结\"},{\"name\":\"CombShortFrozen\",\"type\":\"int\",\"doc\":\"组合空头冻结\"},{\"name\":\"CloseProfitByDate\",\"type\":\"double\",\"doc\":\"逐日盯市平仓盈亏\"},{\"name\":\"CloseProfitByTrade\",\"type\":\"double\",\"doc\":\"逐笔对冲平仓盈亏\"},{\"name\":\"TodayPosition\",\"type\":\"int\",\"doc\":\"今日持仓\"},{\"name\":\"MarginRateByMoney\",\"type\":\"double\",\"doc\":\"保证金率\"},{\"name\":\"MarginRateByVolume\",\"type\":\"double\",\"doc\":\"保证金率(按手数)\"},{\"name\":\"StrikeFrozen\",\"type\":\"int\",\"doc\":\"执行冻结\"},{\"name\":\"StrikeFrozenAmount\",\"type\":\"double\",\"doc\":\"执行冻结金额\"},{\"name\":\"AbandonFrozen\",\"type\":\"int\",\"doc\":\"放弃执行冻结\"},{\"name\":\"ExchangeID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易所代码\"},{\"name\":\"YdStrikeFrozen\",\"type\":\"int\",\"doc\":\"执行冻结的昨仓\"},{\"name\":\"InvestUnitID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"投资单元代码\"},{\"name\":\"PositionCostOffset\",\"type\":\"double\",\"doc\":\"大商所持仓成本差值, 只有大商所使用\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FtdcInvestorPosition> ENCODER =
      new BinaryMessageEncoder<FtdcInvestorPosition>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FtdcInvestorPosition> DECODER =
      new BinaryMessageDecoder<FtdcInvestorPosition>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FtdcInvestorPosition> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FtdcInvestorPosition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FtdcInvestorPosition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FtdcInvestorPosition>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FtdcInvestorPosition to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FtdcInvestorPosition from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FtdcInvestorPosition instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FtdcInvestorPosition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** FTDC响应信息 - 错误代码 */
  public int ErrorID;
  /** FTDC响应信息 - 错误信息 */
  public java.lang.String ErrorMsg;
  /** 请求ID */
  public int RequestID;
  /** 是否最后一条信息 */
  public boolean IsLast;
  /** 合约代码 */
  public java.lang.String InstrumentID;
  /** 经纪公司代码 */
  public java.lang.String BrokerID;
  /** 投资者代码 */
  public java.lang.String InvestorID;
  /** 持仓多空方向 */
  public int PosiDirection;
  /** 投机套保标志 */
  public int HedgeFlag;
  /** 持仓日期 */
  public int PositionDate;
  /** 上日持仓 */
  public int YdPosition;
  /** 今日持仓 */
  public int Position;
  /** 多头冻结 */
  public int LongFrozen;
  /** 空头冻结 */
  public int ShortFrozen;
  /** 开仓冻结金额 */
  public double LongFrozenAmount;
  /** 开仓冻结金额 */
  public double ShortFrozenAmount;
  /** 开仓量 */
  public int OpenVolume;
  /** 平仓量 */
  public int CloseVolume;
  /** 开仓金额 */
  public double OpenAmount;
  /** 平仓金额 */
  public double CloseAmount;
  /** 持仓成本 */
  public double PositionCost;
  /** 上次占用的保证金 */
  public double PreMargin;
  /** 占用的保证金 */
  public double UseMargin;
  /** 冻结的保证金 */
  public double FrozenMargin;
  /** 冻结的资金 */
  public double FrozenCash;
  /** 冻结的手续费 */
  public double FrozenCommission;
  /** 资金差额 */
  public double CashIn;
  /** 手续费 */
  public double Commission;
  /** 平仓盈亏 */
  public double CloseProfit;
  /** 持仓盈亏 */
  public double PositionProfit;
  /** 上次结算价 */
  public double PreSettlementPrice;
  /** 本次结算价 */
  public double SettlementPrice;
  /** 交易日 */
  public java.lang.String TradingDay;
  /** 结算编号 */
  public int SettlementID;
  /** 开仓成本 */
  public double OpenCost;
  /** 交易所保证金 */
  public double ExchangeMargin;
  /** 组合成交形成的持仓 */
  public int CombPosition;
  /** 组合多头冻结 */
  public int CombLongFrozen;
  /** 组合空头冻结 */
  public int CombShortFrozen;
  /** 逐日盯市平仓盈亏 */
  public double CloseProfitByDate;
  /** 逐笔对冲平仓盈亏 */
  public double CloseProfitByTrade;
  /** 今日持仓 */
  public int TodayPosition;
  /** 保证金率 */
  public double MarginRateByMoney;
  /** 保证金率(按手数) */
  public double MarginRateByVolume;
  /** 执行冻结 */
  public int StrikeFrozen;
  /** 执行冻结金额 */
  public double StrikeFrozenAmount;
  /** 放弃执行冻结 */
  public int AbandonFrozen;
  /** 交易所代码 */
  public java.lang.String ExchangeID;
  /** 执行冻结的昨仓 */
  public int YdStrikeFrozen;
  /** 投资单元代码 */
  public java.lang.String InvestUnitID;
  /** 大商所持仓成本差值, 只有大商所使用 */
  public double PositionCostOffset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FtdcInvestorPosition() {}

  /**
   * All-args constructor.
   * @param ErrorID FTDC响应信息 - 错误代码
   * @param ErrorMsg FTDC响应信息 - 错误信息
   * @param RequestID 请求ID
   * @param IsLast 是否最后一条信息
   * @param InstrumentID 合约代码
   * @param BrokerID 经纪公司代码
   * @param InvestorID 投资者代码
   * @param PosiDirection 持仓多空方向
   * @param HedgeFlag 投机套保标志
   * @param PositionDate 持仓日期
   * @param YdPosition 上日持仓
   * @param Position 今日持仓
   * @param LongFrozen 多头冻结
   * @param ShortFrozen 空头冻结
   * @param LongFrozenAmount 开仓冻结金额
   * @param ShortFrozenAmount 开仓冻结金额
   * @param OpenVolume 开仓量
   * @param CloseVolume 平仓量
   * @param OpenAmount 开仓金额
   * @param CloseAmount 平仓金额
   * @param PositionCost 持仓成本
   * @param PreMargin 上次占用的保证金
   * @param UseMargin 占用的保证金
   * @param FrozenMargin 冻结的保证金
   * @param FrozenCash 冻结的资金
   * @param FrozenCommission 冻结的手续费
   * @param CashIn 资金差额
   * @param Commission 手续费
   * @param CloseProfit 平仓盈亏
   * @param PositionProfit 持仓盈亏
   * @param PreSettlementPrice 上次结算价
   * @param SettlementPrice 本次结算价
   * @param TradingDay 交易日
   * @param SettlementID 结算编号
   * @param OpenCost 开仓成本
   * @param ExchangeMargin 交易所保证金
   * @param CombPosition 组合成交形成的持仓
   * @param CombLongFrozen 组合多头冻结
   * @param CombShortFrozen 组合空头冻结
   * @param CloseProfitByDate 逐日盯市平仓盈亏
   * @param CloseProfitByTrade 逐笔对冲平仓盈亏
   * @param TodayPosition 今日持仓
   * @param MarginRateByMoney 保证金率
   * @param MarginRateByVolume 保证金率(按手数)
   * @param StrikeFrozen 执行冻结
   * @param StrikeFrozenAmount 执行冻结金额
   * @param AbandonFrozen 放弃执行冻结
   * @param ExchangeID 交易所代码
   * @param YdStrikeFrozen 执行冻结的昨仓
   * @param InvestUnitID 投资单元代码
   * @param PositionCostOffset 大商所持仓成本差值, 只有大商所使用
   */
  public FtdcInvestorPosition(java.lang.Integer ErrorID, java.lang.String ErrorMsg, java.lang.Integer RequestID, java.lang.Boolean IsLast, java.lang.String InstrumentID, java.lang.String BrokerID, java.lang.String InvestorID, java.lang.Integer PosiDirection, java.lang.Integer HedgeFlag, java.lang.Integer PositionDate, java.lang.Integer YdPosition, java.lang.Integer Position, java.lang.Integer LongFrozen, java.lang.Integer ShortFrozen, java.lang.Double LongFrozenAmount, java.lang.Double ShortFrozenAmount, java.lang.Integer OpenVolume, java.lang.Integer CloseVolume, java.lang.Double OpenAmount, java.lang.Double CloseAmount, java.lang.Double PositionCost, java.lang.Double PreMargin, java.lang.Double UseMargin, java.lang.Double FrozenMargin, java.lang.Double FrozenCash, java.lang.Double FrozenCommission, java.lang.Double CashIn, java.lang.Double Commission, java.lang.Double CloseProfit, java.lang.Double PositionProfit, java.lang.Double PreSettlementPrice, java.lang.Double SettlementPrice, java.lang.String TradingDay, java.lang.Integer SettlementID, java.lang.Double OpenCost, java.lang.Double ExchangeMargin, java.lang.Integer CombPosition, java.lang.Integer CombLongFrozen, java.lang.Integer CombShortFrozen, java.lang.Double CloseProfitByDate, java.lang.Double CloseProfitByTrade, java.lang.Integer TodayPosition, java.lang.Double MarginRateByMoney, java.lang.Double MarginRateByVolume, java.lang.Integer StrikeFrozen, java.lang.Double StrikeFrozenAmount, java.lang.Integer AbandonFrozen, java.lang.String ExchangeID, java.lang.Integer YdStrikeFrozen, java.lang.String InvestUnitID, java.lang.Double PositionCostOffset) {
    this.ErrorID = ErrorID;
    this.ErrorMsg = ErrorMsg;
    this.RequestID = RequestID;
    this.IsLast = IsLast;
    this.InstrumentID = InstrumentID;
    this.BrokerID = BrokerID;
    this.InvestorID = InvestorID;
    this.PosiDirection = PosiDirection;
    this.HedgeFlag = HedgeFlag;
    this.PositionDate = PositionDate;
    this.YdPosition = YdPosition;
    this.Position = Position;
    this.LongFrozen = LongFrozen;
    this.ShortFrozen = ShortFrozen;
    this.LongFrozenAmount = LongFrozenAmount;
    this.ShortFrozenAmount = ShortFrozenAmount;
    this.OpenVolume = OpenVolume;
    this.CloseVolume = CloseVolume;
    this.OpenAmount = OpenAmount;
    this.CloseAmount = CloseAmount;
    this.PositionCost = PositionCost;
    this.PreMargin = PreMargin;
    this.UseMargin = UseMargin;
    this.FrozenMargin = FrozenMargin;
    this.FrozenCash = FrozenCash;
    this.FrozenCommission = FrozenCommission;
    this.CashIn = CashIn;
    this.Commission = Commission;
    this.CloseProfit = CloseProfit;
    this.PositionProfit = PositionProfit;
    this.PreSettlementPrice = PreSettlementPrice;
    this.SettlementPrice = SettlementPrice;
    this.TradingDay = TradingDay;
    this.SettlementID = SettlementID;
    this.OpenCost = OpenCost;
    this.ExchangeMargin = ExchangeMargin;
    this.CombPosition = CombPosition;
    this.CombLongFrozen = CombLongFrozen;
    this.CombShortFrozen = CombShortFrozen;
    this.CloseProfitByDate = CloseProfitByDate;
    this.CloseProfitByTrade = CloseProfitByTrade;
    this.TodayPosition = TodayPosition;
    this.MarginRateByMoney = MarginRateByMoney;
    this.MarginRateByVolume = MarginRateByVolume;
    this.StrikeFrozen = StrikeFrozen;
    this.StrikeFrozenAmount = StrikeFrozenAmount;
    this.AbandonFrozen = AbandonFrozen;
    this.ExchangeID = ExchangeID;
    this.YdStrikeFrozen = YdStrikeFrozen;
    this.InvestUnitID = InvestUnitID;
    this.PositionCostOffset = PositionCostOffset;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ErrorID;
    case 1: return ErrorMsg;
    case 2: return RequestID;
    case 3: return IsLast;
    case 4: return InstrumentID;
    case 5: return BrokerID;
    case 6: return InvestorID;
    case 7: return PosiDirection;
    case 8: return HedgeFlag;
    case 9: return PositionDate;
    case 10: return YdPosition;
    case 11: return Position;
    case 12: return LongFrozen;
    case 13: return ShortFrozen;
    case 14: return LongFrozenAmount;
    case 15: return ShortFrozenAmount;
    case 16: return OpenVolume;
    case 17: return CloseVolume;
    case 18: return OpenAmount;
    case 19: return CloseAmount;
    case 20: return PositionCost;
    case 21: return PreMargin;
    case 22: return UseMargin;
    case 23: return FrozenMargin;
    case 24: return FrozenCash;
    case 25: return FrozenCommission;
    case 26: return CashIn;
    case 27: return Commission;
    case 28: return CloseProfit;
    case 29: return PositionProfit;
    case 30: return PreSettlementPrice;
    case 31: return SettlementPrice;
    case 32: return TradingDay;
    case 33: return SettlementID;
    case 34: return OpenCost;
    case 35: return ExchangeMargin;
    case 36: return CombPosition;
    case 37: return CombLongFrozen;
    case 38: return CombShortFrozen;
    case 39: return CloseProfitByDate;
    case 40: return CloseProfitByTrade;
    case 41: return TodayPosition;
    case 42: return MarginRateByMoney;
    case 43: return MarginRateByVolume;
    case 44: return StrikeFrozen;
    case 45: return StrikeFrozenAmount;
    case 46: return AbandonFrozen;
    case 47: return ExchangeID;
    case 48: return YdStrikeFrozen;
    case 49: return InvestUnitID;
    case 50: return PositionCostOffset;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ErrorID = (java.lang.Integer)value$; break;
    case 1: ErrorMsg = value$ != null ? value$.toString() : null; break;
    case 2: RequestID = (java.lang.Integer)value$; break;
    case 3: IsLast = (java.lang.Boolean)value$; break;
    case 4: InstrumentID = value$ != null ? value$.toString() : null; break;
    case 5: BrokerID = value$ != null ? value$.toString() : null; break;
    case 6: InvestorID = value$ != null ? value$.toString() : null; break;
    case 7: PosiDirection = (java.lang.Integer)value$; break;
    case 8: HedgeFlag = (java.lang.Integer)value$; break;
    case 9: PositionDate = (java.lang.Integer)value$; break;
    case 10: YdPosition = (java.lang.Integer)value$; break;
    case 11: Position = (java.lang.Integer)value$; break;
    case 12: LongFrozen = (java.lang.Integer)value$; break;
    case 13: ShortFrozen = (java.lang.Integer)value$; break;
    case 14: LongFrozenAmount = (java.lang.Double)value$; break;
    case 15: ShortFrozenAmount = (java.lang.Double)value$; break;
    case 16: OpenVolume = (java.lang.Integer)value$; break;
    case 17: CloseVolume = (java.lang.Integer)value$; break;
    case 18: OpenAmount = (java.lang.Double)value$; break;
    case 19: CloseAmount = (java.lang.Double)value$; break;
    case 20: PositionCost = (java.lang.Double)value$; break;
    case 21: PreMargin = (java.lang.Double)value$; break;
    case 22: UseMargin = (java.lang.Double)value$; break;
    case 23: FrozenMargin = (java.lang.Double)value$; break;
    case 24: FrozenCash = (java.lang.Double)value$; break;
    case 25: FrozenCommission = (java.lang.Double)value$; break;
    case 26: CashIn = (java.lang.Double)value$; break;
    case 27: Commission = (java.lang.Double)value$; break;
    case 28: CloseProfit = (java.lang.Double)value$; break;
    case 29: PositionProfit = (java.lang.Double)value$; break;
    case 30: PreSettlementPrice = (java.lang.Double)value$; break;
    case 31: SettlementPrice = (java.lang.Double)value$; break;
    case 32: TradingDay = value$ != null ? value$.toString() : null; break;
    case 33: SettlementID = (java.lang.Integer)value$; break;
    case 34: OpenCost = (java.lang.Double)value$; break;
    case 35: ExchangeMargin = (java.lang.Double)value$; break;
    case 36: CombPosition = (java.lang.Integer)value$; break;
    case 37: CombLongFrozen = (java.lang.Integer)value$; break;
    case 38: CombShortFrozen = (java.lang.Integer)value$; break;
    case 39: CloseProfitByDate = (java.lang.Double)value$; break;
    case 40: CloseProfitByTrade = (java.lang.Double)value$; break;
    case 41: TodayPosition = (java.lang.Integer)value$; break;
    case 42: MarginRateByMoney = (java.lang.Double)value$; break;
    case 43: MarginRateByVolume = (java.lang.Double)value$; break;
    case 44: StrikeFrozen = (java.lang.Integer)value$; break;
    case 45: StrikeFrozenAmount = (java.lang.Double)value$; break;
    case 46: AbandonFrozen = (java.lang.Integer)value$; break;
    case 47: ExchangeID = value$ != null ? value$.toString() : null; break;
    case 48: YdStrikeFrozen = (java.lang.Integer)value$; break;
    case 49: InvestUnitID = value$ != null ? value$.toString() : null; break;
    case 50: PositionCostOffset = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ErrorID' field.
   * @return FTDC响应信息 - 错误代码
   */
  public int getErrorID() {
    return ErrorID;
  }


  /**
   * Sets the value of the 'ErrorID' field.
   * FTDC响应信息 - 错误代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setErrorID(int value) {
    this.ErrorID = value;
    return this;
  }

  /**
   * Gets the value of the 'ErrorMsg' field.
   * @return FTDC响应信息 - 错误信息
   */
  public java.lang.String getErrorMsg() {
    return ErrorMsg;
  }


  /**
   * Sets the value of the 'ErrorMsg' field.
   * FTDC响应信息 - 错误信息
   * @param value the value to set.
   */
  public FtdcInvestorPosition setErrorMsg(java.lang.String value) {
    this.ErrorMsg = value;
    return this;
  }

  /**
   * Gets the value of the 'RequestID' field.
   * @return 请求ID
   */
  public int getRequestID() {
    return RequestID;
  }


  /**
   * Sets the value of the 'RequestID' field.
   * 请求ID
   * @param value the value to set.
   */
  public FtdcInvestorPosition setRequestID(int value) {
    this.RequestID = value;
    return this;
  }

  /**
   * Gets the value of the 'IsLast' field.
   * @return 是否最后一条信息
   */
  public boolean getIsLast() {
    return IsLast;
  }


  /**
   * Sets the value of the 'IsLast' field.
   * 是否最后一条信息
   * @param value the value to set.
   */
  public FtdcInvestorPosition setIsLast(boolean value) {
    this.IsLast = value;
    return this;
  }

  /**
   * Gets the value of the 'InstrumentID' field.
   * @return 合约代码
   */
  public java.lang.String getInstrumentID() {
    return InstrumentID;
  }


  /**
   * Sets the value of the 'InstrumentID' field.
   * 合约代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setInstrumentID(java.lang.String value) {
    this.InstrumentID = value;
    return this;
  }

  /**
   * Gets the value of the 'BrokerID' field.
   * @return 经纪公司代码
   */
  public java.lang.String getBrokerID() {
    return BrokerID;
  }


  /**
   * Sets the value of the 'BrokerID' field.
   * 经纪公司代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setBrokerID(java.lang.String value) {
    this.BrokerID = value;
    return this;
  }

  /**
   * Gets the value of the 'InvestorID' field.
   * @return 投资者代码
   */
  public java.lang.String getInvestorID() {
    return InvestorID;
  }


  /**
   * Sets the value of the 'InvestorID' field.
   * 投资者代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setInvestorID(java.lang.String value) {
    this.InvestorID = value;
    return this;
  }

  /**
   * Gets the value of the 'PosiDirection' field.
   * @return 持仓多空方向
   */
  public int getPosiDirection() {
    return PosiDirection;
  }


  /**
   * Sets the value of the 'PosiDirection' field.
   * 持仓多空方向
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPosiDirection(int value) {
    this.PosiDirection = value;
    return this;
  }

  /**
   * Gets the value of the 'HedgeFlag' field.
   * @return 投机套保标志
   */
  public int getHedgeFlag() {
    return HedgeFlag;
  }


  /**
   * Sets the value of the 'HedgeFlag' field.
   * 投机套保标志
   * @param value the value to set.
   */
  public FtdcInvestorPosition setHedgeFlag(int value) {
    this.HedgeFlag = value;
    return this;
  }

  /**
   * Gets the value of the 'PositionDate' field.
   * @return 持仓日期
   */
  public int getPositionDate() {
    return PositionDate;
  }


  /**
   * Sets the value of the 'PositionDate' field.
   * 持仓日期
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPositionDate(int value) {
    this.PositionDate = value;
    return this;
  }

  /**
   * Gets the value of the 'YdPosition' field.
   * @return 上日持仓
   */
  public int getYdPosition() {
    return YdPosition;
  }


  /**
   * Sets the value of the 'YdPosition' field.
   * 上日持仓
   * @param value the value to set.
   */
  public FtdcInvestorPosition setYdPosition(int value) {
    this.YdPosition = value;
    return this;
  }

  /**
   * Gets the value of the 'Position' field.
   * @return 今日持仓
   */
  public int getPosition() {
    return Position;
  }


  /**
   * Sets the value of the 'Position' field.
   * 今日持仓
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPosition(int value) {
    this.Position = value;
    return this;
  }

  /**
   * Gets the value of the 'LongFrozen' field.
   * @return 多头冻结
   */
  public int getLongFrozen() {
    return LongFrozen;
  }


  /**
   * Sets the value of the 'LongFrozen' field.
   * 多头冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setLongFrozen(int value) {
    this.LongFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'ShortFrozen' field.
   * @return 空头冻结
   */
  public int getShortFrozen() {
    return ShortFrozen;
  }


  /**
   * Sets the value of the 'ShortFrozen' field.
   * 空头冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setShortFrozen(int value) {
    this.ShortFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'LongFrozenAmount' field.
   * @return 开仓冻结金额
   */
  public double getLongFrozenAmount() {
    return LongFrozenAmount;
  }


  /**
   * Sets the value of the 'LongFrozenAmount' field.
   * 开仓冻结金额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setLongFrozenAmount(double value) {
    this.LongFrozenAmount = value;
    return this;
  }

  /**
   * Gets the value of the 'ShortFrozenAmount' field.
   * @return 开仓冻结金额
   */
  public double getShortFrozenAmount() {
    return ShortFrozenAmount;
  }


  /**
   * Sets the value of the 'ShortFrozenAmount' field.
   * 开仓冻结金额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setShortFrozenAmount(double value) {
    this.ShortFrozenAmount = value;
    return this;
  }

  /**
   * Gets the value of the 'OpenVolume' field.
   * @return 开仓量
   */
  public int getOpenVolume() {
    return OpenVolume;
  }


  /**
   * Sets the value of the 'OpenVolume' field.
   * 开仓量
   * @param value the value to set.
   */
  public FtdcInvestorPosition setOpenVolume(int value) {
    this.OpenVolume = value;
    return this;
  }

  /**
   * Gets the value of the 'CloseVolume' field.
   * @return 平仓量
   */
  public int getCloseVolume() {
    return CloseVolume;
  }


  /**
   * Sets the value of the 'CloseVolume' field.
   * 平仓量
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCloseVolume(int value) {
    this.CloseVolume = value;
    return this;
  }

  /**
   * Gets the value of the 'OpenAmount' field.
   * @return 开仓金额
   */
  public double getOpenAmount() {
    return OpenAmount;
  }


  /**
   * Sets the value of the 'OpenAmount' field.
   * 开仓金额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setOpenAmount(double value) {
    this.OpenAmount = value;
    return this;
  }

  /**
   * Gets the value of the 'CloseAmount' field.
   * @return 平仓金额
   */
  public double getCloseAmount() {
    return CloseAmount;
  }


  /**
   * Sets the value of the 'CloseAmount' field.
   * 平仓金额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCloseAmount(double value) {
    this.CloseAmount = value;
    return this;
  }

  /**
   * Gets the value of the 'PositionCost' field.
   * @return 持仓成本
   */
  public double getPositionCost() {
    return PositionCost;
  }


  /**
   * Sets the value of the 'PositionCost' field.
   * 持仓成本
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPositionCost(double value) {
    this.PositionCost = value;
    return this;
  }

  /**
   * Gets the value of the 'PreMargin' field.
   * @return 上次占用的保证金
   */
  public double getPreMargin() {
    return PreMargin;
  }


  /**
   * Sets the value of the 'PreMargin' field.
   * 上次占用的保证金
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPreMargin(double value) {
    this.PreMargin = value;
    return this;
  }

  /**
   * Gets the value of the 'UseMargin' field.
   * @return 占用的保证金
   */
  public double getUseMargin() {
    return UseMargin;
  }


  /**
   * Sets the value of the 'UseMargin' field.
   * 占用的保证金
   * @param value the value to set.
   */
  public FtdcInvestorPosition setUseMargin(double value) {
    this.UseMargin = value;
    return this;
  }

  /**
   * Gets the value of the 'FrozenMargin' field.
   * @return 冻结的保证金
   */
  public double getFrozenMargin() {
    return FrozenMargin;
  }


  /**
   * Sets the value of the 'FrozenMargin' field.
   * 冻结的保证金
   * @param value the value to set.
   */
  public FtdcInvestorPosition setFrozenMargin(double value) {
    this.FrozenMargin = value;
    return this;
  }

  /**
   * Gets the value of the 'FrozenCash' field.
   * @return 冻结的资金
   */
  public double getFrozenCash() {
    return FrozenCash;
  }


  /**
   * Sets the value of the 'FrozenCash' field.
   * 冻结的资金
   * @param value the value to set.
   */
  public FtdcInvestorPosition setFrozenCash(double value) {
    this.FrozenCash = value;
    return this;
  }

  /**
   * Gets the value of the 'FrozenCommission' field.
   * @return 冻结的手续费
   */
  public double getFrozenCommission() {
    return FrozenCommission;
  }


  /**
   * Sets the value of the 'FrozenCommission' field.
   * 冻结的手续费
   * @param value the value to set.
   */
  public FtdcInvestorPosition setFrozenCommission(double value) {
    this.FrozenCommission = value;
    return this;
  }

  /**
   * Gets the value of the 'CashIn' field.
   * @return 资金差额
   */
  public double getCashIn() {
    return CashIn;
  }


  /**
   * Sets the value of the 'CashIn' field.
   * 资金差额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCashIn(double value) {
    this.CashIn = value;
    return this;
  }

  /**
   * Gets the value of the 'Commission' field.
   * @return 手续费
   */
  public double getCommission() {
    return Commission;
  }


  /**
   * Sets the value of the 'Commission' field.
   * 手续费
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCommission(double value) {
    this.Commission = value;
    return this;
  }

  /**
   * Gets the value of the 'CloseProfit' field.
   * @return 平仓盈亏
   */
  public double getCloseProfit() {
    return CloseProfit;
  }


  /**
   * Sets the value of the 'CloseProfit' field.
   * 平仓盈亏
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCloseProfit(double value) {
    this.CloseProfit = value;
    return this;
  }

  /**
   * Gets the value of the 'PositionProfit' field.
   * @return 持仓盈亏
   */
  public double getPositionProfit() {
    return PositionProfit;
  }


  /**
   * Sets the value of the 'PositionProfit' field.
   * 持仓盈亏
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPositionProfit(double value) {
    this.PositionProfit = value;
    return this;
  }

  /**
   * Gets the value of the 'PreSettlementPrice' field.
   * @return 上次结算价
   */
  public double getPreSettlementPrice() {
    return PreSettlementPrice;
  }


  /**
   * Sets the value of the 'PreSettlementPrice' field.
   * 上次结算价
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPreSettlementPrice(double value) {
    this.PreSettlementPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'SettlementPrice' field.
   * @return 本次结算价
   */
  public double getSettlementPrice() {
    return SettlementPrice;
  }


  /**
   * Sets the value of the 'SettlementPrice' field.
   * 本次结算价
   * @param value the value to set.
   */
  public FtdcInvestorPosition setSettlementPrice(double value) {
    this.SettlementPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'TradingDay' field.
   * @return 交易日
   */
  public java.lang.String getTradingDay() {
    return TradingDay;
  }


  /**
   * Sets the value of the 'TradingDay' field.
   * 交易日
   * @param value the value to set.
   */
  public FtdcInvestorPosition setTradingDay(java.lang.String value) {
    this.TradingDay = value;
    return this;
  }

  /**
   * Gets the value of the 'SettlementID' field.
   * @return 结算编号
   */
  public int getSettlementID() {
    return SettlementID;
  }


  /**
   * Sets the value of the 'SettlementID' field.
   * 结算编号
   * @param value the value to set.
   */
  public FtdcInvestorPosition setSettlementID(int value) {
    this.SettlementID = value;
    return this;
  }

  /**
   * Gets the value of the 'OpenCost' field.
   * @return 开仓成本
   */
  public double getOpenCost() {
    return OpenCost;
  }


  /**
   * Sets the value of the 'OpenCost' field.
   * 开仓成本
   * @param value the value to set.
   */
  public FtdcInvestorPosition setOpenCost(double value) {
    this.OpenCost = value;
    return this;
  }

  /**
   * Gets the value of the 'ExchangeMargin' field.
   * @return 交易所保证金
   */
  public double getExchangeMargin() {
    return ExchangeMargin;
  }


  /**
   * Sets the value of the 'ExchangeMargin' field.
   * 交易所保证金
   * @param value the value to set.
   */
  public FtdcInvestorPosition setExchangeMargin(double value) {
    this.ExchangeMargin = value;
    return this;
  }

  /**
   * Gets the value of the 'CombPosition' field.
   * @return 组合成交形成的持仓
   */
  public int getCombPosition() {
    return CombPosition;
  }


  /**
   * Sets the value of the 'CombPosition' field.
   * 组合成交形成的持仓
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCombPosition(int value) {
    this.CombPosition = value;
    return this;
  }

  /**
   * Gets the value of the 'CombLongFrozen' field.
   * @return 组合多头冻结
   */
  public int getCombLongFrozen() {
    return CombLongFrozen;
  }


  /**
   * Sets the value of the 'CombLongFrozen' field.
   * 组合多头冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCombLongFrozen(int value) {
    this.CombLongFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'CombShortFrozen' field.
   * @return 组合空头冻结
   */
  public int getCombShortFrozen() {
    return CombShortFrozen;
  }


  /**
   * Sets the value of the 'CombShortFrozen' field.
   * 组合空头冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCombShortFrozen(int value) {
    this.CombShortFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'CloseProfitByDate' field.
   * @return 逐日盯市平仓盈亏
   */
  public double getCloseProfitByDate() {
    return CloseProfitByDate;
  }


  /**
   * Sets the value of the 'CloseProfitByDate' field.
   * 逐日盯市平仓盈亏
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCloseProfitByDate(double value) {
    this.CloseProfitByDate = value;
    return this;
  }

  /**
   * Gets the value of the 'CloseProfitByTrade' field.
   * @return 逐笔对冲平仓盈亏
   */
  public double getCloseProfitByTrade() {
    return CloseProfitByTrade;
  }


  /**
   * Sets the value of the 'CloseProfitByTrade' field.
   * 逐笔对冲平仓盈亏
   * @param value the value to set.
   */
  public FtdcInvestorPosition setCloseProfitByTrade(double value) {
    this.CloseProfitByTrade = value;
    return this;
  }

  /**
   * Gets the value of the 'TodayPosition' field.
   * @return 今日持仓
   */
  public int getTodayPosition() {
    return TodayPosition;
  }


  /**
   * Sets the value of the 'TodayPosition' field.
   * 今日持仓
   * @param value the value to set.
   */
  public FtdcInvestorPosition setTodayPosition(int value) {
    this.TodayPosition = value;
    return this;
  }

  /**
   * Gets the value of the 'MarginRateByMoney' field.
   * @return 保证金率
   */
  public double getMarginRateByMoney() {
    return MarginRateByMoney;
  }


  /**
   * Sets the value of the 'MarginRateByMoney' field.
   * 保证金率
   * @param value the value to set.
   */
  public FtdcInvestorPosition setMarginRateByMoney(double value) {
    this.MarginRateByMoney = value;
    return this;
  }

  /**
   * Gets the value of the 'MarginRateByVolume' field.
   * @return 保证金率(按手数)
   */
  public double getMarginRateByVolume() {
    return MarginRateByVolume;
  }


  /**
   * Sets the value of the 'MarginRateByVolume' field.
   * 保证金率(按手数)
   * @param value the value to set.
   */
  public FtdcInvestorPosition setMarginRateByVolume(double value) {
    this.MarginRateByVolume = value;
    return this;
  }

  /**
   * Gets the value of the 'StrikeFrozen' field.
   * @return 执行冻结
   */
  public int getStrikeFrozen() {
    return StrikeFrozen;
  }


  /**
   * Sets the value of the 'StrikeFrozen' field.
   * 执行冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setStrikeFrozen(int value) {
    this.StrikeFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'StrikeFrozenAmount' field.
   * @return 执行冻结金额
   */
  public double getStrikeFrozenAmount() {
    return StrikeFrozenAmount;
  }


  /**
   * Sets the value of the 'StrikeFrozenAmount' field.
   * 执行冻结金额
   * @param value the value to set.
   */
  public FtdcInvestorPosition setStrikeFrozenAmount(double value) {
    this.StrikeFrozenAmount = value;
    return this;
  }

  /**
   * Gets the value of the 'AbandonFrozen' field.
   * @return 放弃执行冻结
   */
  public int getAbandonFrozen() {
    return AbandonFrozen;
  }


  /**
   * Sets the value of the 'AbandonFrozen' field.
   * 放弃执行冻结
   * @param value the value to set.
   */
  public FtdcInvestorPosition setAbandonFrozen(int value) {
    this.AbandonFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'ExchangeID' field.
   * @return 交易所代码
   */
  public java.lang.String getExchangeID() {
    return ExchangeID;
  }


  /**
   * Sets the value of the 'ExchangeID' field.
   * 交易所代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setExchangeID(java.lang.String value) {
    this.ExchangeID = value;
    return this;
  }

  /**
   * Gets the value of the 'YdStrikeFrozen' field.
   * @return 执行冻结的昨仓
   */
  public int getYdStrikeFrozen() {
    return YdStrikeFrozen;
  }


  /**
   * Sets the value of the 'YdStrikeFrozen' field.
   * 执行冻结的昨仓
   * @param value the value to set.
   */
  public FtdcInvestorPosition setYdStrikeFrozen(int value) {
    this.YdStrikeFrozen = value;
    return this;
  }

  /**
   * Gets the value of the 'InvestUnitID' field.
   * @return 投资单元代码
   */
  public java.lang.String getInvestUnitID() {
    return InvestUnitID;
  }


  /**
   * Sets the value of the 'InvestUnitID' field.
   * 投资单元代码
   * @param value the value to set.
   */
  public FtdcInvestorPosition setInvestUnitID(java.lang.String value) {
    this.InvestUnitID = value;
    return this;
  }

  /**
   * Gets the value of the 'PositionCostOffset' field.
   * @return 大商所持仓成本差值, 只有大商所使用
   */
  public double getPositionCostOffset() {
    return PositionCostOffset;
  }


  /**
   * Sets the value of the 'PositionCostOffset' field.
   * 大商所持仓成本差值, 只有大商所使用
   * @param value the value to set.
   */
  public FtdcInvestorPosition setPositionCostOffset(double value) {
    this.PositionCostOffset = value;
    return this;
  }

  /**
   * Creates a new FtdcInvestorPosition RecordBuilder.
   * @return A new FtdcInvestorPosition RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder newBuilder() {
    return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder();
  }

  /**
   * Creates a new FtdcInvestorPosition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FtdcInvestorPosition RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder newBuilder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder other) {
    if (other == null) {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder();
    } else {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder(other);
    }
  }

  /**
   * Creates a new FtdcInvestorPosition RecordBuilder by copying an existing FtdcInvestorPosition instance.
   * @param other The existing instance to copy.
   * @return A new FtdcInvestorPosition RecordBuilder
   */
  public static io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder newBuilder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition other) {
    if (other == null) {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder();
    } else {
      return new io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder(other);
    }
  }

  /**
   * RecordBuilder for FtdcInvestorPosition instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FtdcInvestorPosition>
    implements org.apache.avro.data.RecordBuilder<FtdcInvestorPosition> {

    /** FTDC响应信息 - 错误代码 */
    private int ErrorID;
    /** FTDC响应信息 - 错误信息 */
    private java.lang.String ErrorMsg;
    /** 请求ID */
    private int RequestID;
    /** 是否最后一条信息 */
    private boolean IsLast;
    /** 合约代码 */
    private java.lang.String InstrumentID;
    /** 经纪公司代码 */
    private java.lang.String BrokerID;
    /** 投资者代码 */
    private java.lang.String InvestorID;
    /** 持仓多空方向 */
    private int PosiDirection;
    /** 投机套保标志 */
    private int HedgeFlag;
    /** 持仓日期 */
    private int PositionDate;
    /** 上日持仓 */
    private int YdPosition;
    /** 今日持仓 */
    private int Position;
    /** 多头冻结 */
    private int LongFrozen;
    /** 空头冻结 */
    private int ShortFrozen;
    /** 开仓冻结金额 */
    private double LongFrozenAmount;
    /** 开仓冻结金额 */
    private double ShortFrozenAmount;
    /** 开仓量 */
    private int OpenVolume;
    /** 平仓量 */
    private int CloseVolume;
    /** 开仓金额 */
    private double OpenAmount;
    /** 平仓金额 */
    private double CloseAmount;
    /** 持仓成本 */
    private double PositionCost;
    /** 上次占用的保证金 */
    private double PreMargin;
    /** 占用的保证金 */
    private double UseMargin;
    /** 冻结的保证金 */
    private double FrozenMargin;
    /** 冻结的资金 */
    private double FrozenCash;
    /** 冻结的手续费 */
    private double FrozenCommission;
    /** 资金差额 */
    private double CashIn;
    /** 手续费 */
    private double Commission;
    /** 平仓盈亏 */
    private double CloseProfit;
    /** 持仓盈亏 */
    private double PositionProfit;
    /** 上次结算价 */
    private double PreSettlementPrice;
    /** 本次结算价 */
    private double SettlementPrice;
    /** 交易日 */
    private java.lang.String TradingDay;
    /** 结算编号 */
    private int SettlementID;
    /** 开仓成本 */
    private double OpenCost;
    /** 交易所保证金 */
    private double ExchangeMargin;
    /** 组合成交形成的持仓 */
    private int CombPosition;
    /** 组合多头冻结 */
    private int CombLongFrozen;
    /** 组合空头冻结 */
    private int CombShortFrozen;
    /** 逐日盯市平仓盈亏 */
    private double CloseProfitByDate;
    /** 逐笔对冲平仓盈亏 */
    private double CloseProfitByTrade;
    /** 今日持仓 */
    private int TodayPosition;
    /** 保证金率 */
    private double MarginRateByMoney;
    /** 保证金率(按手数) */
    private double MarginRateByVolume;
    /** 执行冻结 */
    private int StrikeFrozen;
    /** 执行冻结金额 */
    private double StrikeFrozenAmount;
    /** 放弃执行冻结 */
    private int AbandonFrozen;
    /** 交易所代码 */
    private java.lang.String ExchangeID;
    /** 执行冻结的昨仓 */
    private int YdStrikeFrozen;
    /** 投资单元代码 */
    private java.lang.String InvestUnitID;
    /** 大商所持仓成本差值, 只有大商所使用 */
    private double PositionCostOffset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ErrorID)) {
        this.ErrorID = data().deepCopy(fields()[0].schema(), other.ErrorID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ErrorMsg)) {
        this.ErrorMsg = data().deepCopy(fields()[1].schema(), other.ErrorMsg);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[2].schema(), other.RequestID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.IsLast)) {
        this.IsLast = data().deepCopy(fields()[3].schema(), other.IsLast);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.InstrumentID)) {
        this.InstrumentID = data().deepCopy(fields()[4].schema(), other.InstrumentID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.BrokerID)) {
        this.BrokerID = data().deepCopy(fields()[5].schema(), other.BrokerID);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.InvestorID)) {
        this.InvestorID = data().deepCopy(fields()[6].schema(), other.InvestorID);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.PosiDirection)) {
        this.PosiDirection = data().deepCopy(fields()[7].schema(), other.PosiDirection);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.HedgeFlag)) {
        this.HedgeFlag = data().deepCopy(fields()[8].schema(), other.HedgeFlag);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.PositionDate)) {
        this.PositionDate = data().deepCopy(fields()[9].schema(), other.PositionDate);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.YdPosition)) {
        this.YdPosition = data().deepCopy(fields()[10].schema(), other.YdPosition);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.Position)) {
        this.Position = data().deepCopy(fields()[11].schema(), other.Position);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.LongFrozen)) {
        this.LongFrozen = data().deepCopy(fields()[12].schema(), other.LongFrozen);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.ShortFrozen)) {
        this.ShortFrozen = data().deepCopy(fields()[13].schema(), other.ShortFrozen);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.LongFrozenAmount)) {
        this.LongFrozenAmount = data().deepCopy(fields()[14].schema(), other.LongFrozenAmount);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.ShortFrozenAmount)) {
        this.ShortFrozenAmount = data().deepCopy(fields()[15].schema(), other.ShortFrozenAmount);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.OpenVolume)) {
        this.OpenVolume = data().deepCopy(fields()[16].schema(), other.OpenVolume);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.CloseVolume)) {
        this.CloseVolume = data().deepCopy(fields()[17].schema(), other.CloseVolume);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.OpenAmount)) {
        this.OpenAmount = data().deepCopy(fields()[18].schema(), other.OpenAmount);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.CloseAmount)) {
        this.CloseAmount = data().deepCopy(fields()[19].schema(), other.CloseAmount);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.PositionCost)) {
        this.PositionCost = data().deepCopy(fields()[20].schema(), other.PositionCost);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.PreMargin)) {
        this.PreMargin = data().deepCopy(fields()[21].schema(), other.PreMargin);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.UseMargin)) {
        this.UseMargin = data().deepCopy(fields()[22].schema(), other.UseMargin);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.FrozenMargin)) {
        this.FrozenMargin = data().deepCopy(fields()[23].schema(), other.FrozenMargin);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.FrozenCash)) {
        this.FrozenCash = data().deepCopy(fields()[24].schema(), other.FrozenCash);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.FrozenCommission)) {
        this.FrozenCommission = data().deepCopy(fields()[25].schema(), other.FrozenCommission);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.CashIn)) {
        this.CashIn = data().deepCopy(fields()[26].schema(), other.CashIn);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.Commission)) {
        this.Commission = data().deepCopy(fields()[27].schema(), other.Commission);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.CloseProfit)) {
        this.CloseProfit = data().deepCopy(fields()[28].schema(), other.CloseProfit);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.PositionProfit)) {
        this.PositionProfit = data().deepCopy(fields()[29].schema(), other.PositionProfit);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.PreSettlementPrice)) {
        this.PreSettlementPrice = data().deepCopy(fields()[30].schema(), other.PreSettlementPrice);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.SettlementPrice)) {
        this.SettlementPrice = data().deepCopy(fields()[31].schema(), other.SettlementPrice);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.TradingDay)) {
        this.TradingDay = data().deepCopy(fields()[32].schema(), other.TradingDay);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.SettlementID)) {
        this.SettlementID = data().deepCopy(fields()[33].schema(), other.SettlementID);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.OpenCost)) {
        this.OpenCost = data().deepCopy(fields()[34].schema(), other.OpenCost);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.ExchangeMargin)) {
        this.ExchangeMargin = data().deepCopy(fields()[35].schema(), other.ExchangeMargin);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.CombPosition)) {
        this.CombPosition = data().deepCopy(fields()[36].schema(), other.CombPosition);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (isValidValue(fields()[37], other.CombLongFrozen)) {
        this.CombLongFrozen = data().deepCopy(fields()[37].schema(), other.CombLongFrozen);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (isValidValue(fields()[38], other.CombShortFrozen)) {
        this.CombShortFrozen = data().deepCopy(fields()[38].schema(), other.CombShortFrozen);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (isValidValue(fields()[39], other.CloseProfitByDate)) {
        this.CloseProfitByDate = data().deepCopy(fields()[39].schema(), other.CloseProfitByDate);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.CloseProfitByTrade)) {
        this.CloseProfitByTrade = data().deepCopy(fields()[40].schema(), other.CloseProfitByTrade);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.TodayPosition)) {
        this.TodayPosition = data().deepCopy(fields()[41].schema(), other.TodayPosition);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.MarginRateByMoney)) {
        this.MarginRateByMoney = data().deepCopy(fields()[42].schema(), other.MarginRateByMoney);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.MarginRateByVolume)) {
        this.MarginRateByVolume = data().deepCopy(fields()[43].schema(), other.MarginRateByVolume);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (isValidValue(fields()[44], other.StrikeFrozen)) {
        this.StrikeFrozen = data().deepCopy(fields()[44].schema(), other.StrikeFrozen);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.StrikeFrozenAmount)) {
        this.StrikeFrozenAmount = data().deepCopy(fields()[45].schema(), other.StrikeFrozenAmount);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.AbandonFrozen)) {
        this.AbandonFrozen = data().deepCopy(fields()[46].schema(), other.AbandonFrozen);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.ExchangeID)) {
        this.ExchangeID = data().deepCopy(fields()[47].schema(), other.ExchangeID);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.YdStrikeFrozen)) {
        this.YdStrikeFrozen = data().deepCopy(fields()[48].schema(), other.YdStrikeFrozen);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
      if (isValidValue(fields()[49], other.InvestUnitID)) {
        this.InvestUnitID = data().deepCopy(fields()[49].schema(), other.InvestUnitID);
        fieldSetFlags()[49] = other.fieldSetFlags()[49];
      }
      if (isValidValue(fields()[50], other.PositionCostOffset)) {
        this.PositionCostOffset = data().deepCopy(fields()[50].schema(), other.PositionCostOffset);
        fieldSetFlags()[50] = other.fieldSetFlags()[50];
      }
    }

    /**
     * Creates a Builder by copying an existing FtdcInvestorPosition instance
     * @param other The existing instance to copy.
     */
    private Builder(io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ErrorID)) {
        this.ErrorID = data().deepCopy(fields()[0].schema(), other.ErrorID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ErrorMsg)) {
        this.ErrorMsg = data().deepCopy(fields()[1].schema(), other.ErrorMsg);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[2].schema(), other.RequestID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.IsLast)) {
        this.IsLast = data().deepCopy(fields()[3].schema(), other.IsLast);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.InstrumentID)) {
        this.InstrumentID = data().deepCopy(fields()[4].schema(), other.InstrumentID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.BrokerID)) {
        this.BrokerID = data().deepCopy(fields()[5].schema(), other.BrokerID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.InvestorID)) {
        this.InvestorID = data().deepCopy(fields()[6].schema(), other.InvestorID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.PosiDirection)) {
        this.PosiDirection = data().deepCopy(fields()[7].schema(), other.PosiDirection);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.HedgeFlag)) {
        this.HedgeFlag = data().deepCopy(fields()[8].schema(), other.HedgeFlag);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.PositionDate)) {
        this.PositionDate = data().deepCopy(fields()[9].schema(), other.PositionDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.YdPosition)) {
        this.YdPosition = data().deepCopy(fields()[10].schema(), other.YdPosition);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.Position)) {
        this.Position = data().deepCopy(fields()[11].schema(), other.Position);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.LongFrozen)) {
        this.LongFrozen = data().deepCopy(fields()[12].schema(), other.LongFrozen);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ShortFrozen)) {
        this.ShortFrozen = data().deepCopy(fields()[13].schema(), other.ShortFrozen);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.LongFrozenAmount)) {
        this.LongFrozenAmount = data().deepCopy(fields()[14].schema(), other.LongFrozenAmount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ShortFrozenAmount)) {
        this.ShortFrozenAmount = data().deepCopy(fields()[15].schema(), other.ShortFrozenAmount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.OpenVolume)) {
        this.OpenVolume = data().deepCopy(fields()[16].schema(), other.OpenVolume);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.CloseVolume)) {
        this.CloseVolume = data().deepCopy(fields()[17].schema(), other.CloseVolume);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.OpenAmount)) {
        this.OpenAmount = data().deepCopy(fields()[18].schema(), other.OpenAmount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.CloseAmount)) {
        this.CloseAmount = data().deepCopy(fields()[19].schema(), other.CloseAmount);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.PositionCost)) {
        this.PositionCost = data().deepCopy(fields()[20].schema(), other.PositionCost);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.PreMargin)) {
        this.PreMargin = data().deepCopy(fields()[21].schema(), other.PreMargin);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.UseMargin)) {
        this.UseMargin = data().deepCopy(fields()[22].schema(), other.UseMargin);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.FrozenMargin)) {
        this.FrozenMargin = data().deepCopy(fields()[23].schema(), other.FrozenMargin);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.FrozenCash)) {
        this.FrozenCash = data().deepCopy(fields()[24].schema(), other.FrozenCash);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.FrozenCommission)) {
        this.FrozenCommission = data().deepCopy(fields()[25].schema(), other.FrozenCommission);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.CashIn)) {
        this.CashIn = data().deepCopy(fields()[26].schema(), other.CashIn);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.Commission)) {
        this.Commission = data().deepCopy(fields()[27].schema(), other.Commission);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.CloseProfit)) {
        this.CloseProfit = data().deepCopy(fields()[28].schema(), other.CloseProfit);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.PositionProfit)) {
        this.PositionProfit = data().deepCopy(fields()[29].schema(), other.PositionProfit);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.PreSettlementPrice)) {
        this.PreSettlementPrice = data().deepCopy(fields()[30].schema(), other.PreSettlementPrice);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.SettlementPrice)) {
        this.SettlementPrice = data().deepCopy(fields()[31].schema(), other.SettlementPrice);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.TradingDay)) {
        this.TradingDay = data().deepCopy(fields()[32].schema(), other.TradingDay);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.SettlementID)) {
        this.SettlementID = data().deepCopy(fields()[33].schema(), other.SettlementID);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.OpenCost)) {
        this.OpenCost = data().deepCopy(fields()[34].schema(), other.OpenCost);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.ExchangeMargin)) {
        this.ExchangeMargin = data().deepCopy(fields()[35].schema(), other.ExchangeMargin);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.CombPosition)) {
        this.CombPosition = data().deepCopy(fields()[36].schema(), other.CombPosition);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.CombLongFrozen)) {
        this.CombLongFrozen = data().deepCopy(fields()[37].schema(), other.CombLongFrozen);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.CombShortFrozen)) {
        this.CombShortFrozen = data().deepCopy(fields()[38].schema(), other.CombShortFrozen);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.CloseProfitByDate)) {
        this.CloseProfitByDate = data().deepCopy(fields()[39].schema(), other.CloseProfitByDate);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.CloseProfitByTrade)) {
        this.CloseProfitByTrade = data().deepCopy(fields()[40].schema(), other.CloseProfitByTrade);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.TodayPosition)) {
        this.TodayPosition = data().deepCopy(fields()[41].schema(), other.TodayPosition);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.MarginRateByMoney)) {
        this.MarginRateByMoney = data().deepCopy(fields()[42].schema(), other.MarginRateByMoney);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.MarginRateByVolume)) {
        this.MarginRateByVolume = data().deepCopy(fields()[43].schema(), other.MarginRateByVolume);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.StrikeFrozen)) {
        this.StrikeFrozen = data().deepCopy(fields()[44].schema(), other.StrikeFrozen);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.StrikeFrozenAmount)) {
        this.StrikeFrozenAmount = data().deepCopy(fields()[45].schema(), other.StrikeFrozenAmount);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.AbandonFrozen)) {
        this.AbandonFrozen = data().deepCopy(fields()[46].schema(), other.AbandonFrozen);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.ExchangeID)) {
        this.ExchangeID = data().deepCopy(fields()[47].schema(), other.ExchangeID);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.YdStrikeFrozen)) {
        this.YdStrikeFrozen = data().deepCopy(fields()[48].schema(), other.YdStrikeFrozen);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.InvestUnitID)) {
        this.InvestUnitID = data().deepCopy(fields()[49].schema(), other.InvestUnitID);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.PositionCostOffset)) {
        this.PositionCostOffset = data().deepCopy(fields()[50].schema(), other.PositionCostOffset);
        fieldSetFlags()[50] = true;
      }
    }

    /**
      * Gets the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @return The value.
      */
    public int getErrorID() {
      return ErrorID;
    }


    /**
      * Sets the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @param value The value of 'ErrorID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setErrorID(int value) {
      validate(fields()[0], value);
      this.ErrorID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ErrorID' field has been set.
      * FTDC响应信息 - 错误代码
      * @return True if the 'ErrorID' field has been set, false otherwise.
      */
    public boolean hasErrorID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ErrorID' field.
      * FTDC响应信息 - 错误代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearErrorID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @return The value.
      */
    public java.lang.String getErrorMsg() {
      return ErrorMsg;
    }


    /**
      * Sets the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @param value The value of 'ErrorMsg'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setErrorMsg(java.lang.String value) {
      validate(fields()[1], value);
      this.ErrorMsg = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ErrorMsg' field has been set.
      * FTDC响应信息 - 错误信息
      * @return True if the 'ErrorMsg' field has been set, false otherwise.
      */
    public boolean hasErrorMsg() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ErrorMsg' field.
      * FTDC响应信息 - 错误信息
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearErrorMsg() {
      ErrorMsg = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'RequestID' field.
      * 请求ID
      * @return The value.
      */
    public int getRequestID() {
      return RequestID;
    }


    /**
      * Sets the value of the 'RequestID' field.
      * 请求ID
      * @param value The value of 'RequestID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setRequestID(int value) {
      validate(fields()[2], value);
      this.RequestID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'RequestID' field has been set.
      * 请求ID
      * @return True if the 'RequestID' field has been set, false otherwise.
      */
    public boolean hasRequestID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'RequestID' field.
      * 请求ID
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearRequestID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'IsLast' field.
      * 是否最后一条信息
      * @return The value.
      */
    public boolean getIsLast() {
      return IsLast;
    }


    /**
      * Sets the value of the 'IsLast' field.
      * 是否最后一条信息
      * @param value The value of 'IsLast'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setIsLast(boolean value) {
      validate(fields()[3], value);
      this.IsLast = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'IsLast' field has been set.
      * 是否最后一条信息
      * @return True if the 'IsLast' field has been set, false otherwise.
      */
    public boolean hasIsLast() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'IsLast' field.
      * 是否最后一条信息
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearIsLast() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'InstrumentID' field.
      * 合约代码
      * @return The value.
      */
    public java.lang.String getInstrumentID() {
      return InstrumentID;
    }


    /**
      * Sets the value of the 'InstrumentID' field.
      * 合约代码
      * @param value The value of 'InstrumentID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setInstrumentID(java.lang.String value) {
      validate(fields()[4], value);
      this.InstrumentID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'InstrumentID' field has been set.
      * 合约代码
      * @return True if the 'InstrumentID' field has been set, false otherwise.
      */
    public boolean hasInstrumentID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'InstrumentID' field.
      * 合约代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearInstrumentID() {
      InstrumentID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'BrokerID' field.
      * 经纪公司代码
      * @return The value.
      */
    public java.lang.String getBrokerID() {
      return BrokerID;
    }


    /**
      * Sets the value of the 'BrokerID' field.
      * 经纪公司代码
      * @param value The value of 'BrokerID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setBrokerID(java.lang.String value) {
      validate(fields()[5], value);
      this.BrokerID = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'BrokerID' field has been set.
      * 经纪公司代码
      * @return True if the 'BrokerID' field has been set, false otherwise.
      */
    public boolean hasBrokerID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'BrokerID' field.
      * 经纪公司代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearBrokerID() {
      BrokerID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'InvestorID' field.
      * 投资者代码
      * @return The value.
      */
    public java.lang.String getInvestorID() {
      return InvestorID;
    }


    /**
      * Sets the value of the 'InvestorID' field.
      * 投资者代码
      * @param value The value of 'InvestorID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setInvestorID(java.lang.String value) {
      validate(fields()[6], value);
      this.InvestorID = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'InvestorID' field has been set.
      * 投资者代码
      * @return True if the 'InvestorID' field has been set, false otherwise.
      */
    public boolean hasInvestorID() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'InvestorID' field.
      * 投资者代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearInvestorID() {
      InvestorID = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'PosiDirection' field.
      * 持仓多空方向
      * @return The value.
      */
    public int getPosiDirection() {
      return PosiDirection;
    }


    /**
      * Sets the value of the 'PosiDirection' field.
      * 持仓多空方向
      * @param value The value of 'PosiDirection'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPosiDirection(int value) {
      validate(fields()[7], value);
      this.PosiDirection = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'PosiDirection' field has been set.
      * 持仓多空方向
      * @return True if the 'PosiDirection' field has been set, false otherwise.
      */
    public boolean hasPosiDirection() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'PosiDirection' field.
      * 持仓多空方向
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPosiDirection() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'HedgeFlag' field.
      * 投机套保标志
      * @return The value.
      */
    public int getHedgeFlag() {
      return HedgeFlag;
    }


    /**
      * Sets the value of the 'HedgeFlag' field.
      * 投机套保标志
      * @param value The value of 'HedgeFlag'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setHedgeFlag(int value) {
      validate(fields()[8], value);
      this.HedgeFlag = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'HedgeFlag' field has been set.
      * 投机套保标志
      * @return True if the 'HedgeFlag' field has been set, false otherwise.
      */
    public boolean hasHedgeFlag() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'HedgeFlag' field.
      * 投机套保标志
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearHedgeFlag() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'PositionDate' field.
      * 持仓日期
      * @return The value.
      */
    public int getPositionDate() {
      return PositionDate;
    }


    /**
      * Sets the value of the 'PositionDate' field.
      * 持仓日期
      * @param value The value of 'PositionDate'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPositionDate(int value) {
      validate(fields()[9], value);
      this.PositionDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'PositionDate' field has been set.
      * 持仓日期
      * @return True if the 'PositionDate' field has been set, false otherwise.
      */
    public boolean hasPositionDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'PositionDate' field.
      * 持仓日期
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPositionDate() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'YdPosition' field.
      * 上日持仓
      * @return The value.
      */
    public int getYdPosition() {
      return YdPosition;
    }


    /**
      * Sets the value of the 'YdPosition' field.
      * 上日持仓
      * @param value The value of 'YdPosition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setYdPosition(int value) {
      validate(fields()[10], value);
      this.YdPosition = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'YdPosition' field has been set.
      * 上日持仓
      * @return True if the 'YdPosition' field has been set, false otherwise.
      */
    public boolean hasYdPosition() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'YdPosition' field.
      * 上日持仓
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearYdPosition() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'Position' field.
      * 今日持仓
      * @return The value.
      */
    public int getPosition() {
      return Position;
    }


    /**
      * Sets the value of the 'Position' field.
      * 今日持仓
      * @param value The value of 'Position'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPosition(int value) {
      validate(fields()[11], value);
      this.Position = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'Position' field has been set.
      * 今日持仓
      * @return True if the 'Position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'Position' field.
      * 今日持仓
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPosition() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'LongFrozen' field.
      * 多头冻结
      * @return The value.
      */
    public int getLongFrozen() {
      return LongFrozen;
    }


    /**
      * Sets the value of the 'LongFrozen' field.
      * 多头冻结
      * @param value The value of 'LongFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setLongFrozen(int value) {
      validate(fields()[12], value);
      this.LongFrozen = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'LongFrozen' field has been set.
      * 多头冻结
      * @return True if the 'LongFrozen' field has been set, false otherwise.
      */
    public boolean hasLongFrozen() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'LongFrozen' field.
      * 多头冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearLongFrozen() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'ShortFrozen' field.
      * 空头冻结
      * @return The value.
      */
    public int getShortFrozen() {
      return ShortFrozen;
    }


    /**
      * Sets the value of the 'ShortFrozen' field.
      * 空头冻结
      * @param value The value of 'ShortFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setShortFrozen(int value) {
      validate(fields()[13], value);
      this.ShortFrozen = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'ShortFrozen' field has been set.
      * 空头冻结
      * @return True if the 'ShortFrozen' field has been set, false otherwise.
      */
    public boolean hasShortFrozen() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'ShortFrozen' field.
      * 空头冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearShortFrozen() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'LongFrozenAmount' field.
      * 开仓冻结金额
      * @return The value.
      */
    public double getLongFrozenAmount() {
      return LongFrozenAmount;
    }


    /**
      * Sets the value of the 'LongFrozenAmount' field.
      * 开仓冻结金额
      * @param value The value of 'LongFrozenAmount'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setLongFrozenAmount(double value) {
      validate(fields()[14], value);
      this.LongFrozenAmount = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'LongFrozenAmount' field has been set.
      * 开仓冻结金额
      * @return True if the 'LongFrozenAmount' field has been set, false otherwise.
      */
    public boolean hasLongFrozenAmount() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'LongFrozenAmount' field.
      * 开仓冻结金额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearLongFrozenAmount() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'ShortFrozenAmount' field.
      * 开仓冻结金额
      * @return The value.
      */
    public double getShortFrozenAmount() {
      return ShortFrozenAmount;
    }


    /**
      * Sets the value of the 'ShortFrozenAmount' field.
      * 开仓冻结金额
      * @param value The value of 'ShortFrozenAmount'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setShortFrozenAmount(double value) {
      validate(fields()[15], value);
      this.ShortFrozenAmount = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'ShortFrozenAmount' field has been set.
      * 开仓冻结金额
      * @return True if the 'ShortFrozenAmount' field has been set, false otherwise.
      */
    public boolean hasShortFrozenAmount() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'ShortFrozenAmount' field.
      * 开仓冻结金额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearShortFrozenAmount() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'OpenVolume' field.
      * 开仓量
      * @return The value.
      */
    public int getOpenVolume() {
      return OpenVolume;
    }


    /**
      * Sets the value of the 'OpenVolume' field.
      * 开仓量
      * @param value The value of 'OpenVolume'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setOpenVolume(int value) {
      validate(fields()[16], value);
      this.OpenVolume = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'OpenVolume' field has been set.
      * 开仓量
      * @return True if the 'OpenVolume' field has been set, false otherwise.
      */
    public boolean hasOpenVolume() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'OpenVolume' field.
      * 开仓量
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearOpenVolume() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'CloseVolume' field.
      * 平仓量
      * @return The value.
      */
    public int getCloseVolume() {
      return CloseVolume;
    }


    /**
      * Sets the value of the 'CloseVolume' field.
      * 平仓量
      * @param value The value of 'CloseVolume'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCloseVolume(int value) {
      validate(fields()[17], value);
      this.CloseVolume = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'CloseVolume' field has been set.
      * 平仓量
      * @return True if the 'CloseVolume' field has been set, false otherwise.
      */
    public boolean hasCloseVolume() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'CloseVolume' field.
      * 平仓量
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCloseVolume() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'OpenAmount' field.
      * 开仓金额
      * @return The value.
      */
    public double getOpenAmount() {
      return OpenAmount;
    }


    /**
      * Sets the value of the 'OpenAmount' field.
      * 开仓金额
      * @param value The value of 'OpenAmount'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setOpenAmount(double value) {
      validate(fields()[18], value);
      this.OpenAmount = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'OpenAmount' field has been set.
      * 开仓金额
      * @return True if the 'OpenAmount' field has been set, false otherwise.
      */
    public boolean hasOpenAmount() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'OpenAmount' field.
      * 开仓金额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearOpenAmount() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'CloseAmount' field.
      * 平仓金额
      * @return The value.
      */
    public double getCloseAmount() {
      return CloseAmount;
    }


    /**
      * Sets the value of the 'CloseAmount' field.
      * 平仓金额
      * @param value The value of 'CloseAmount'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCloseAmount(double value) {
      validate(fields()[19], value);
      this.CloseAmount = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'CloseAmount' field has been set.
      * 平仓金额
      * @return True if the 'CloseAmount' field has been set, false otherwise.
      */
    public boolean hasCloseAmount() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'CloseAmount' field.
      * 平仓金额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCloseAmount() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'PositionCost' field.
      * 持仓成本
      * @return The value.
      */
    public double getPositionCost() {
      return PositionCost;
    }


    /**
      * Sets the value of the 'PositionCost' field.
      * 持仓成本
      * @param value The value of 'PositionCost'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPositionCost(double value) {
      validate(fields()[20], value);
      this.PositionCost = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'PositionCost' field has been set.
      * 持仓成本
      * @return True if the 'PositionCost' field has been set, false otherwise.
      */
    public boolean hasPositionCost() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'PositionCost' field.
      * 持仓成本
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPositionCost() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'PreMargin' field.
      * 上次占用的保证金
      * @return The value.
      */
    public double getPreMargin() {
      return PreMargin;
    }


    /**
      * Sets the value of the 'PreMargin' field.
      * 上次占用的保证金
      * @param value The value of 'PreMargin'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPreMargin(double value) {
      validate(fields()[21], value);
      this.PreMargin = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'PreMargin' field has been set.
      * 上次占用的保证金
      * @return True if the 'PreMargin' field has been set, false otherwise.
      */
    public boolean hasPreMargin() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'PreMargin' field.
      * 上次占用的保证金
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPreMargin() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'UseMargin' field.
      * 占用的保证金
      * @return The value.
      */
    public double getUseMargin() {
      return UseMargin;
    }


    /**
      * Sets the value of the 'UseMargin' field.
      * 占用的保证金
      * @param value The value of 'UseMargin'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setUseMargin(double value) {
      validate(fields()[22], value);
      this.UseMargin = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'UseMargin' field has been set.
      * 占用的保证金
      * @return True if the 'UseMargin' field has been set, false otherwise.
      */
    public boolean hasUseMargin() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'UseMargin' field.
      * 占用的保证金
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearUseMargin() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'FrozenMargin' field.
      * 冻结的保证金
      * @return The value.
      */
    public double getFrozenMargin() {
      return FrozenMargin;
    }


    /**
      * Sets the value of the 'FrozenMargin' field.
      * 冻结的保证金
      * @param value The value of 'FrozenMargin'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setFrozenMargin(double value) {
      validate(fields()[23], value);
      this.FrozenMargin = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'FrozenMargin' field has been set.
      * 冻结的保证金
      * @return True if the 'FrozenMargin' field has been set, false otherwise.
      */
    public boolean hasFrozenMargin() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'FrozenMargin' field.
      * 冻结的保证金
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearFrozenMargin() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'FrozenCash' field.
      * 冻结的资金
      * @return The value.
      */
    public double getFrozenCash() {
      return FrozenCash;
    }


    /**
      * Sets the value of the 'FrozenCash' field.
      * 冻结的资金
      * @param value The value of 'FrozenCash'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setFrozenCash(double value) {
      validate(fields()[24], value);
      this.FrozenCash = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'FrozenCash' field has been set.
      * 冻结的资金
      * @return True if the 'FrozenCash' field has been set, false otherwise.
      */
    public boolean hasFrozenCash() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'FrozenCash' field.
      * 冻结的资金
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearFrozenCash() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'FrozenCommission' field.
      * 冻结的手续费
      * @return The value.
      */
    public double getFrozenCommission() {
      return FrozenCommission;
    }


    /**
      * Sets the value of the 'FrozenCommission' field.
      * 冻结的手续费
      * @param value The value of 'FrozenCommission'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setFrozenCommission(double value) {
      validate(fields()[25], value);
      this.FrozenCommission = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'FrozenCommission' field has been set.
      * 冻结的手续费
      * @return True if the 'FrozenCommission' field has been set, false otherwise.
      */
    public boolean hasFrozenCommission() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'FrozenCommission' field.
      * 冻结的手续费
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearFrozenCommission() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'CashIn' field.
      * 资金差额
      * @return The value.
      */
    public double getCashIn() {
      return CashIn;
    }


    /**
      * Sets the value of the 'CashIn' field.
      * 资金差额
      * @param value The value of 'CashIn'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCashIn(double value) {
      validate(fields()[26], value);
      this.CashIn = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'CashIn' field has been set.
      * 资金差额
      * @return True if the 'CashIn' field has been set, false otherwise.
      */
    public boolean hasCashIn() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'CashIn' field.
      * 资金差额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCashIn() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'Commission' field.
      * 手续费
      * @return The value.
      */
    public double getCommission() {
      return Commission;
    }


    /**
      * Sets the value of the 'Commission' field.
      * 手续费
      * @param value The value of 'Commission'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCommission(double value) {
      validate(fields()[27], value);
      this.Commission = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'Commission' field has been set.
      * 手续费
      * @return True if the 'Commission' field has been set, false otherwise.
      */
    public boolean hasCommission() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'Commission' field.
      * 手续费
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCommission() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'CloseProfit' field.
      * 平仓盈亏
      * @return The value.
      */
    public double getCloseProfit() {
      return CloseProfit;
    }


    /**
      * Sets the value of the 'CloseProfit' field.
      * 平仓盈亏
      * @param value The value of 'CloseProfit'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCloseProfit(double value) {
      validate(fields()[28], value);
      this.CloseProfit = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'CloseProfit' field has been set.
      * 平仓盈亏
      * @return True if the 'CloseProfit' field has been set, false otherwise.
      */
    public boolean hasCloseProfit() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'CloseProfit' field.
      * 平仓盈亏
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCloseProfit() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'PositionProfit' field.
      * 持仓盈亏
      * @return The value.
      */
    public double getPositionProfit() {
      return PositionProfit;
    }


    /**
      * Sets the value of the 'PositionProfit' field.
      * 持仓盈亏
      * @param value The value of 'PositionProfit'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPositionProfit(double value) {
      validate(fields()[29], value);
      this.PositionProfit = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'PositionProfit' field has been set.
      * 持仓盈亏
      * @return True if the 'PositionProfit' field has been set, false otherwise.
      */
    public boolean hasPositionProfit() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'PositionProfit' field.
      * 持仓盈亏
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPositionProfit() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'PreSettlementPrice' field.
      * 上次结算价
      * @return The value.
      */
    public double getPreSettlementPrice() {
      return PreSettlementPrice;
    }


    /**
      * Sets the value of the 'PreSettlementPrice' field.
      * 上次结算价
      * @param value The value of 'PreSettlementPrice'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPreSettlementPrice(double value) {
      validate(fields()[30], value);
      this.PreSettlementPrice = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'PreSettlementPrice' field has been set.
      * 上次结算价
      * @return True if the 'PreSettlementPrice' field has been set, false otherwise.
      */
    public boolean hasPreSettlementPrice() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'PreSettlementPrice' field.
      * 上次结算价
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPreSettlementPrice() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'SettlementPrice' field.
      * 本次结算价
      * @return The value.
      */
    public double getSettlementPrice() {
      return SettlementPrice;
    }


    /**
      * Sets the value of the 'SettlementPrice' field.
      * 本次结算价
      * @param value The value of 'SettlementPrice'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setSettlementPrice(double value) {
      validate(fields()[31], value);
      this.SettlementPrice = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'SettlementPrice' field has been set.
      * 本次结算价
      * @return True if the 'SettlementPrice' field has been set, false otherwise.
      */
    public boolean hasSettlementPrice() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'SettlementPrice' field.
      * 本次结算价
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearSettlementPrice() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'TradingDay' field.
      * 交易日
      * @return The value.
      */
    public java.lang.String getTradingDay() {
      return TradingDay;
    }


    /**
      * Sets the value of the 'TradingDay' field.
      * 交易日
      * @param value The value of 'TradingDay'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setTradingDay(java.lang.String value) {
      validate(fields()[32], value);
      this.TradingDay = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'TradingDay' field has been set.
      * 交易日
      * @return True if the 'TradingDay' field has been set, false otherwise.
      */
    public boolean hasTradingDay() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'TradingDay' field.
      * 交易日
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearTradingDay() {
      TradingDay = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'SettlementID' field.
      * 结算编号
      * @return The value.
      */
    public int getSettlementID() {
      return SettlementID;
    }


    /**
      * Sets the value of the 'SettlementID' field.
      * 结算编号
      * @param value The value of 'SettlementID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setSettlementID(int value) {
      validate(fields()[33], value);
      this.SettlementID = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'SettlementID' field has been set.
      * 结算编号
      * @return True if the 'SettlementID' field has been set, false otherwise.
      */
    public boolean hasSettlementID() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'SettlementID' field.
      * 结算编号
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearSettlementID() {
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'OpenCost' field.
      * 开仓成本
      * @return The value.
      */
    public double getOpenCost() {
      return OpenCost;
    }


    /**
      * Sets the value of the 'OpenCost' field.
      * 开仓成本
      * @param value The value of 'OpenCost'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setOpenCost(double value) {
      validate(fields()[34], value);
      this.OpenCost = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'OpenCost' field has been set.
      * 开仓成本
      * @return True if the 'OpenCost' field has been set, false otherwise.
      */
    public boolean hasOpenCost() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'OpenCost' field.
      * 开仓成本
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearOpenCost() {
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'ExchangeMargin' field.
      * 交易所保证金
      * @return The value.
      */
    public double getExchangeMargin() {
      return ExchangeMargin;
    }


    /**
      * Sets the value of the 'ExchangeMargin' field.
      * 交易所保证金
      * @param value The value of 'ExchangeMargin'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setExchangeMargin(double value) {
      validate(fields()[35], value);
      this.ExchangeMargin = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'ExchangeMargin' field has been set.
      * 交易所保证金
      * @return True if the 'ExchangeMargin' field has been set, false otherwise.
      */
    public boolean hasExchangeMargin() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'ExchangeMargin' field.
      * 交易所保证金
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearExchangeMargin() {
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'CombPosition' field.
      * 组合成交形成的持仓
      * @return The value.
      */
    public int getCombPosition() {
      return CombPosition;
    }


    /**
      * Sets the value of the 'CombPosition' field.
      * 组合成交形成的持仓
      * @param value The value of 'CombPosition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCombPosition(int value) {
      validate(fields()[36], value);
      this.CombPosition = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'CombPosition' field has been set.
      * 组合成交形成的持仓
      * @return True if the 'CombPosition' field has been set, false otherwise.
      */
    public boolean hasCombPosition() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'CombPosition' field.
      * 组合成交形成的持仓
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCombPosition() {
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'CombLongFrozen' field.
      * 组合多头冻结
      * @return The value.
      */
    public int getCombLongFrozen() {
      return CombLongFrozen;
    }


    /**
      * Sets the value of the 'CombLongFrozen' field.
      * 组合多头冻结
      * @param value The value of 'CombLongFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCombLongFrozen(int value) {
      validate(fields()[37], value);
      this.CombLongFrozen = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'CombLongFrozen' field has been set.
      * 组合多头冻结
      * @return True if the 'CombLongFrozen' field has been set, false otherwise.
      */
    public boolean hasCombLongFrozen() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'CombLongFrozen' field.
      * 组合多头冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCombLongFrozen() {
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'CombShortFrozen' field.
      * 组合空头冻结
      * @return The value.
      */
    public int getCombShortFrozen() {
      return CombShortFrozen;
    }


    /**
      * Sets the value of the 'CombShortFrozen' field.
      * 组合空头冻结
      * @param value The value of 'CombShortFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCombShortFrozen(int value) {
      validate(fields()[38], value);
      this.CombShortFrozen = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'CombShortFrozen' field has been set.
      * 组合空头冻结
      * @return True if the 'CombShortFrozen' field has been set, false otherwise.
      */
    public boolean hasCombShortFrozen() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'CombShortFrozen' field.
      * 组合空头冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCombShortFrozen() {
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'CloseProfitByDate' field.
      * 逐日盯市平仓盈亏
      * @return The value.
      */
    public double getCloseProfitByDate() {
      return CloseProfitByDate;
    }


    /**
      * Sets the value of the 'CloseProfitByDate' field.
      * 逐日盯市平仓盈亏
      * @param value The value of 'CloseProfitByDate'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCloseProfitByDate(double value) {
      validate(fields()[39], value);
      this.CloseProfitByDate = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'CloseProfitByDate' field has been set.
      * 逐日盯市平仓盈亏
      * @return True if the 'CloseProfitByDate' field has been set, false otherwise.
      */
    public boolean hasCloseProfitByDate() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'CloseProfitByDate' field.
      * 逐日盯市平仓盈亏
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCloseProfitByDate() {
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'CloseProfitByTrade' field.
      * 逐笔对冲平仓盈亏
      * @return The value.
      */
    public double getCloseProfitByTrade() {
      return CloseProfitByTrade;
    }


    /**
      * Sets the value of the 'CloseProfitByTrade' field.
      * 逐笔对冲平仓盈亏
      * @param value The value of 'CloseProfitByTrade'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setCloseProfitByTrade(double value) {
      validate(fields()[40], value);
      this.CloseProfitByTrade = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'CloseProfitByTrade' field has been set.
      * 逐笔对冲平仓盈亏
      * @return True if the 'CloseProfitByTrade' field has been set, false otherwise.
      */
    public boolean hasCloseProfitByTrade() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'CloseProfitByTrade' field.
      * 逐笔对冲平仓盈亏
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearCloseProfitByTrade() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'TodayPosition' field.
      * 今日持仓
      * @return The value.
      */
    public int getTodayPosition() {
      return TodayPosition;
    }


    /**
      * Sets the value of the 'TodayPosition' field.
      * 今日持仓
      * @param value The value of 'TodayPosition'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setTodayPosition(int value) {
      validate(fields()[41], value);
      this.TodayPosition = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'TodayPosition' field has been set.
      * 今日持仓
      * @return True if the 'TodayPosition' field has been set, false otherwise.
      */
    public boolean hasTodayPosition() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'TodayPosition' field.
      * 今日持仓
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearTodayPosition() {
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'MarginRateByMoney' field.
      * 保证金率
      * @return The value.
      */
    public double getMarginRateByMoney() {
      return MarginRateByMoney;
    }


    /**
      * Sets the value of the 'MarginRateByMoney' field.
      * 保证金率
      * @param value The value of 'MarginRateByMoney'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setMarginRateByMoney(double value) {
      validate(fields()[42], value);
      this.MarginRateByMoney = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'MarginRateByMoney' field has been set.
      * 保证金率
      * @return True if the 'MarginRateByMoney' field has been set, false otherwise.
      */
    public boolean hasMarginRateByMoney() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'MarginRateByMoney' field.
      * 保证金率
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearMarginRateByMoney() {
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'MarginRateByVolume' field.
      * 保证金率(按手数)
      * @return The value.
      */
    public double getMarginRateByVolume() {
      return MarginRateByVolume;
    }


    /**
      * Sets the value of the 'MarginRateByVolume' field.
      * 保证金率(按手数)
      * @param value The value of 'MarginRateByVolume'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setMarginRateByVolume(double value) {
      validate(fields()[43], value);
      this.MarginRateByVolume = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'MarginRateByVolume' field has been set.
      * 保证金率(按手数)
      * @return True if the 'MarginRateByVolume' field has been set, false otherwise.
      */
    public boolean hasMarginRateByVolume() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'MarginRateByVolume' field.
      * 保证金率(按手数)
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearMarginRateByVolume() {
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'StrikeFrozen' field.
      * 执行冻结
      * @return The value.
      */
    public int getStrikeFrozen() {
      return StrikeFrozen;
    }


    /**
      * Sets the value of the 'StrikeFrozen' field.
      * 执行冻结
      * @param value The value of 'StrikeFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setStrikeFrozen(int value) {
      validate(fields()[44], value);
      this.StrikeFrozen = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'StrikeFrozen' field has been set.
      * 执行冻结
      * @return True if the 'StrikeFrozen' field has been set, false otherwise.
      */
    public boolean hasStrikeFrozen() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'StrikeFrozen' field.
      * 执行冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearStrikeFrozen() {
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'StrikeFrozenAmount' field.
      * 执行冻结金额
      * @return The value.
      */
    public double getStrikeFrozenAmount() {
      return StrikeFrozenAmount;
    }


    /**
      * Sets the value of the 'StrikeFrozenAmount' field.
      * 执行冻结金额
      * @param value The value of 'StrikeFrozenAmount'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setStrikeFrozenAmount(double value) {
      validate(fields()[45], value);
      this.StrikeFrozenAmount = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'StrikeFrozenAmount' field has been set.
      * 执行冻结金额
      * @return True if the 'StrikeFrozenAmount' field has been set, false otherwise.
      */
    public boolean hasStrikeFrozenAmount() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'StrikeFrozenAmount' field.
      * 执行冻结金额
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearStrikeFrozenAmount() {
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'AbandonFrozen' field.
      * 放弃执行冻结
      * @return The value.
      */
    public int getAbandonFrozen() {
      return AbandonFrozen;
    }


    /**
      * Sets the value of the 'AbandonFrozen' field.
      * 放弃执行冻结
      * @param value The value of 'AbandonFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setAbandonFrozen(int value) {
      validate(fields()[46], value);
      this.AbandonFrozen = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'AbandonFrozen' field has been set.
      * 放弃执行冻结
      * @return True if the 'AbandonFrozen' field has been set, false otherwise.
      */
    public boolean hasAbandonFrozen() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'AbandonFrozen' field.
      * 放弃执行冻结
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearAbandonFrozen() {
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'ExchangeID' field.
      * 交易所代码
      * @return The value.
      */
    public java.lang.String getExchangeID() {
      return ExchangeID;
    }


    /**
      * Sets the value of the 'ExchangeID' field.
      * 交易所代码
      * @param value The value of 'ExchangeID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setExchangeID(java.lang.String value) {
      validate(fields()[47], value);
      this.ExchangeID = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'ExchangeID' field has been set.
      * 交易所代码
      * @return True if the 'ExchangeID' field has been set, false otherwise.
      */
    public boolean hasExchangeID() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'ExchangeID' field.
      * 交易所代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearExchangeID() {
      ExchangeID = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'YdStrikeFrozen' field.
      * 执行冻结的昨仓
      * @return The value.
      */
    public int getYdStrikeFrozen() {
      return YdStrikeFrozen;
    }


    /**
      * Sets the value of the 'YdStrikeFrozen' field.
      * 执行冻结的昨仓
      * @param value The value of 'YdStrikeFrozen'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setYdStrikeFrozen(int value) {
      validate(fields()[48], value);
      this.YdStrikeFrozen = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'YdStrikeFrozen' field has been set.
      * 执行冻结的昨仓
      * @return True if the 'YdStrikeFrozen' field has been set, false otherwise.
      */
    public boolean hasYdStrikeFrozen() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'YdStrikeFrozen' field.
      * 执行冻结的昨仓
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearYdStrikeFrozen() {
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @return The value.
      */
    public java.lang.String getInvestUnitID() {
      return InvestUnitID;
    }


    /**
      * Sets the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @param value The value of 'InvestUnitID'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setInvestUnitID(java.lang.String value) {
      validate(fields()[49], value);
      this.InvestUnitID = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'InvestUnitID' field has been set.
      * 投资单元代码
      * @return True if the 'InvestUnitID' field has been set, false otherwise.
      */
    public boolean hasInvestUnitID() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'InvestUnitID' field.
      * 投资单元代码
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearInvestUnitID() {
      InvestUnitID = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'PositionCostOffset' field.
      * 大商所持仓成本差值, 只有大商所使用
      * @return The value.
      */
    public double getPositionCostOffset() {
      return PositionCostOffset;
    }


    /**
      * Sets the value of the 'PositionCostOffset' field.
      * 大商所持仓成本差值, 只有大商所使用
      * @param value The value of 'PositionCostOffset'.
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder setPositionCostOffset(double value) {
      validate(fields()[50], value);
      this.PositionCostOffset = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'PositionCostOffset' field has been set.
      * 大商所持仓成本差值, 只有大商所使用
      * @return True if the 'PositionCostOffset' field has been set, false otherwise.
      */
    public boolean hasPositionCostOffset() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'PositionCostOffset' field.
      * 大商所持仓成本差值, 只有大商所使用
      * @return This builder.
      */
    public io.rapid.adaptor.ctp.serializable.avro.trader.FtdcInvestorPosition.Builder clearPositionCostOffset() {
      fieldSetFlags()[50] = false;
      return this;
    }

    @Override
    public FtdcInvestorPosition build() {
      try {
        FtdcInvestorPosition record = new FtdcInvestorPosition();
        record.ErrorID = fieldSetFlags()[0] ? this.ErrorID : (java.lang.Integer) defaultValue(fields()[0]);
        record.ErrorMsg = fieldSetFlags()[1] ? this.ErrorMsg : (java.lang.String) defaultValue(fields()[1]);
        record.RequestID = fieldSetFlags()[2] ? this.RequestID : (java.lang.Integer) defaultValue(fields()[2]);
        record.IsLast = fieldSetFlags()[3] ? this.IsLast : (java.lang.Boolean) defaultValue(fields()[3]);
        record.InstrumentID = fieldSetFlags()[4] ? this.InstrumentID : (java.lang.String) defaultValue(fields()[4]);
        record.BrokerID = fieldSetFlags()[5] ? this.BrokerID : (java.lang.String) defaultValue(fields()[5]);
        record.InvestorID = fieldSetFlags()[6] ? this.InvestorID : (java.lang.String) defaultValue(fields()[6]);
        record.PosiDirection = fieldSetFlags()[7] ? this.PosiDirection : (java.lang.Integer) defaultValue(fields()[7]);
        record.HedgeFlag = fieldSetFlags()[8] ? this.HedgeFlag : (java.lang.Integer) defaultValue(fields()[8]);
        record.PositionDate = fieldSetFlags()[9] ? this.PositionDate : (java.lang.Integer) defaultValue(fields()[9]);
        record.YdPosition = fieldSetFlags()[10] ? this.YdPosition : (java.lang.Integer) defaultValue(fields()[10]);
        record.Position = fieldSetFlags()[11] ? this.Position : (java.lang.Integer) defaultValue(fields()[11]);
        record.LongFrozen = fieldSetFlags()[12] ? this.LongFrozen : (java.lang.Integer) defaultValue(fields()[12]);
        record.ShortFrozen = fieldSetFlags()[13] ? this.ShortFrozen : (java.lang.Integer) defaultValue(fields()[13]);
        record.LongFrozenAmount = fieldSetFlags()[14] ? this.LongFrozenAmount : (java.lang.Double) defaultValue(fields()[14]);
        record.ShortFrozenAmount = fieldSetFlags()[15] ? this.ShortFrozenAmount : (java.lang.Double) defaultValue(fields()[15]);
        record.OpenVolume = fieldSetFlags()[16] ? this.OpenVolume : (java.lang.Integer) defaultValue(fields()[16]);
        record.CloseVolume = fieldSetFlags()[17] ? this.CloseVolume : (java.lang.Integer) defaultValue(fields()[17]);
        record.OpenAmount = fieldSetFlags()[18] ? this.OpenAmount : (java.lang.Double) defaultValue(fields()[18]);
        record.CloseAmount = fieldSetFlags()[19] ? this.CloseAmount : (java.lang.Double) defaultValue(fields()[19]);
        record.PositionCost = fieldSetFlags()[20] ? this.PositionCost : (java.lang.Double) defaultValue(fields()[20]);
        record.PreMargin = fieldSetFlags()[21] ? this.PreMargin : (java.lang.Double) defaultValue(fields()[21]);
        record.UseMargin = fieldSetFlags()[22] ? this.UseMargin : (java.lang.Double) defaultValue(fields()[22]);
        record.FrozenMargin = fieldSetFlags()[23] ? this.FrozenMargin : (java.lang.Double) defaultValue(fields()[23]);
        record.FrozenCash = fieldSetFlags()[24] ? this.FrozenCash : (java.lang.Double) defaultValue(fields()[24]);
        record.FrozenCommission = fieldSetFlags()[25] ? this.FrozenCommission : (java.lang.Double) defaultValue(fields()[25]);
        record.CashIn = fieldSetFlags()[26] ? this.CashIn : (java.lang.Double) defaultValue(fields()[26]);
        record.Commission = fieldSetFlags()[27] ? this.Commission : (java.lang.Double) defaultValue(fields()[27]);
        record.CloseProfit = fieldSetFlags()[28] ? this.CloseProfit : (java.lang.Double) defaultValue(fields()[28]);
        record.PositionProfit = fieldSetFlags()[29] ? this.PositionProfit : (java.lang.Double) defaultValue(fields()[29]);
        record.PreSettlementPrice = fieldSetFlags()[30] ? this.PreSettlementPrice : (java.lang.Double) defaultValue(fields()[30]);
        record.SettlementPrice = fieldSetFlags()[31] ? this.SettlementPrice : (java.lang.Double) defaultValue(fields()[31]);
        record.TradingDay = fieldSetFlags()[32] ? this.TradingDay : (java.lang.String) defaultValue(fields()[32]);
        record.SettlementID = fieldSetFlags()[33] ? this.SettlementID : (java.lang.Integer) defaultValue(fields()[33]);
        record.OpenCost = fieldSetFlags()[34] ? this.OpenCost : (java.lang.Double) defaultValue(fields()[34]);
        record.ExchangeMargin = fieldSetFlags()[35] ? this.ExchangeMargin : (java.lang.Double) defaultValue(fields()[35]);
        record.CombPosition = fieldSetFlags()[36] ? this.CombPosition : (java.lang.Integer) defaultValue(fields()[36]);
        record.CombLongFrozen = fieldSetFlags()[37] ? this.CombLongFrozen : (java.lang.Integer) defaultValue(fields()[37]);
        record.CombShortFrozen = fieldSetFlags()[38] ? this.CombShortFrozen : (java.lang.Integer) defaultValue(fields()[38]);
        record.CloseProfitByDate = fieldSetFlags()[39] ? this.CloseProfitByDate : (java.lang.Double) defaultValue(fields()[39]);
        record.CloseProfitByTrade = fieldSetFlags()[40] ? this.CloseProfitByTrade : (java.lang.Double) defaultValue(fields()[40]);
        record.TodayPosition = fieldSetFlags()[41] ? this.TodayPosition : (java.lang.Integer) defaultValue(fields()[41]);
        record.MarginRateByMoney = fieldSetFlags()[42] ? this.MarginRateByMoney : (java.lang.Double) defaultValue(fields()[42]);
        record.MarginRateByVolume = fieldSetFlags()[43] ? this.MarginRateByVolume : (java.lang.Double) defaultValue(fields()[43]);
        record.StrikeFrozen = fieldSetFlags()[44] ? this.StrikeFrozen : (java.lang.Integer) defaultValue(fields()[44]);
        record.StrikeFrozenAmount = fieldSetFlags()[45] ? this.StrikeFrozenAmount : (java.lang.Double) defaultValue(fields()[45]);
        record.AbandonFrozen = fieldSetFlags()[46] ? this.AbandonFrozen : (java.lang.Integer) defaultValue(fields()[46]);
        record.ExchangeID = fieldSetFlags()[47] ? this.ExchangeID : (java.lang.String) defaultValue(fields()[47]);
        record.YdStrikeFrozen = fieldSetFlags()[48] ? this.YdStrikeFrozen : (java.lang.Integer) defaultValue(fields()[48]);
        record.InvestUnitID = fieldSetFlags()[49] ? this.InvestUnitID : (java.lang.String) defaultValue(fields()[49]);
        record.PositionCostOffset = fieldSetFlags()[50] ? this.PositionCostOffset : (java.lang.Double) defaultValue(fields()[50]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FtdcInvestorPosition>
    WRITER$ = (org.apache.avro.io.DatumWriter<FtdcInvestorPosition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FtdcInvestorPosition>
    READER$ = (org.apache.avro.io.DatumReader<FtdcInvestorPosition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.ErrorID);

    out.writeString(this.ErrorMsg);

    out.writeInt(this.RequestID);

    out.writeBoolean(this.IsLast);

    out.writeString(this.InstrumentID);

    out.writeString(this.BrokerID);

    out.writeString(this.InvestorID);

    out.writeInt(this.PosiDirection);

    out.writeInt(this.HedgeFlag);

    out.writeInt(this.PositionDate);

    out.writeInt(this.YdPosition);

    out.writeInt(this.Position);

    out.writeInt(this.LongFrozen);

    out.writeInt(this.ShortFrozen);

    out.writeDouble(this.LongFrozenAmount);

    out.writeDouble(this.ShortFrozenAmount);

    out.writeInt(this.OpenVolume);

    out.writeInt(this.CloseVolume);

    out.writeDouble(this.OpenAmount);

    out.writeDouble(this.CloseAmount);

    out.writeDouble(this.PositionCost);

    out.writeDouble(this.PreMargin);

    out.writeDouble(this.UseMargin);

    out.writeDouble(this.FrozenMargin);

    out.writeDouble(this.FrozenCash);

    out.writeDouble(this.FrozenCommission);

    out.writeDouble(this.CashIn);

    out.writeDouble(this.Commission);

    out.writeDouble(this.CloseProfit);

    out.writeDouble(this.PositionProfit);

    out.writeDouble(this.PreSettlementPrice);

    out.writeDouble(this.SettlementPrice);

    out.writeString(this.TradingDay);

    out.writeInt(this.SettlementID);

    out.writeDouble(this.OpenCost);

    out.writeDouble(this.ExchangeMargin);

    out.writeInt(this.CombPosition);

    out.writeInt(this.CombLongFrozen);

    out.writeInt(this.CombShortFrozen);

    out.writeDouble(this.CloseProfitByDate);

    out.writeDouble(this.CloseProfitByTrade);

    out.writeInt(this.TodayPosition);

    out.writeDouble(this.MarginRateByMoney);

    out.writeDouble(this.MarginRateByVolume);

    out.writeInt(this.StrikeFrozen);

    out.writeDouble(this.StrikeFrozenAmount);

    out.writeInt(this.AbandonFrozen);

    out.writeString(this.ExchangeID);

    out.writeInt(this.YdStrikeFrozen);

    out.writeString(this.InvestUnitID);

    out.writeDouble(this.PositionCostOffset);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ErrorID = in.readInt();

      this.ErrorMsg = in.readString();

      this.RequestID = in.readInt();

      this.IsLast = in.readBoolean();

      this.InstrumentID = in.readString();

      this.BrokerID = in.readString();

      this.InvestorID = in.readString();

      this.PosiDirection = in.readInt();

      this.HedgeFlag = in.readInt();

      this.PositionDate = in.readInt();

      this.YdPosition = in.readInt();

      this.Position = in.readInt();

      this.LongFrozen = in.readInt();

      this.ShortFrozen = in.readInt();

      this.LongFrozenAmount = in.readDouble();

      this.ShortFrozenAmount = in.readDouble();

      this.OpenVolume = in.readInt();

      this.CloseVolume = in.readInt();

      this.OpenAmount = in.readDouble();

      this.CloseAmount = in.readDouble();

      this.PositionCost = in.readDouble();

      this.PreMargin = in.readDouble();

      this.UseMargin = in.readDouble();

      this.FrozenMargin = in.readDouble();

      this.FrozenCash = in.readDouble();

      this.FrozenCommission = in.readDouble();

      this.CashIn = in.readDouble();

      this.Commission = in.readDouble();

      this.CloseProfit = in.readDouble();

      this.PositionProfit = in.readDouble();

      this.PreSettlementPrice = in.readDouble();

      this.SettlementPrice = in.readDouble();

      this.TradingDay = in.readString();

      this.SettlementID = in.readInt();

      this.OpenCost = in.readDouble();

      this.ExchangeMargin = in.readDouble();

      this.CombPosition = in.readInt();

      this.CombLongFrozen = in.readInt();

      this.CombShortFrozen = in.readInt();

      this.CloseProfitByDate = in.readDouble();

      this.CloseProfitByTrade = in.readDouble();

      this.TodayPosition = in.readInt();

      this.MarginRateByMoney = in.readDouble();

      this.MarginRateByVolume = in.readDouble();

      this.StrikeFrozen = in.readInt();

      this.StrikeFrozenAmount = in.readDouble();

      this.AbandonFrozen = in.readInt();

      this.ExchangeID = in.readString();

      this.YdStrikeFrozen = in.readInt();

      this.InvestUnitID = in.readString();

      this.PositionCostOffset = in.readDouble();

    } else {
      for (int i = 0; i < 51; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ErrorID = in.readInt();
          break;

        case 1:
          this.ErrorMsg = in.readString();
          break;

        case 2:
          this.RequestID = in.readInt();
          break;

        case 3:
          this.IsLast = in.readBoolean();
          break;

        case 4:
          this.InstrumentID = in.readString();
          break;

        case 5:
          this.BrokerID = in.readString();
          break;

        case 6:
          this.InvestorID = in.readString();
          break;

        case 7:
          this.PosiDirection = in.readInt();
          break;

        case 8:
          this.HedgeFlag = in.readInt();
          break;

        case 9:
          this.PositionDate = in.readInt();
          break;

        case 10:
          this.YdPosition = in.readInt();
          break;

        case 11:
          this.Position = in.readInt();
          break;

        case 12:
          this.LongFrozen = in.readInt();
          break;

        case 13:
          this.ShortFrozen = in.readInt();
          break;

        case 14:
          this.LongFrozenAmount = in.readDouble();
          break;

        case 15:
          this.ShortFrozenAmount = in.readDouble();
          break;

        case 16:
          this.OpenVolume = in.readInt();
          break;

        case 17:
          this.CloseVolume = in.readInt();
          break;

        case 18:
          this.OpenAmount = in.readDouble();
          break;

        case 19:
          this.CloseAmount = in.readDouble();
          break;

        case 20:
          this.PositionCost = in.readDouble();
          break;

        case 21:
          this.PreMargin = in.readDouble();
          break;

        case 22:
          this.UseMargin = in.readDouble();
          break;

        case 23:
          this.FrozenMargin = in.readDouble();
          break;

        case 24:
          this.FrozenCash = in.readDouble();
          break;

        case 25:
          this.FrozenCommission = in.readDouble();
          break;

        case 26:
          this.CashIn = in.readDouble();
          break;

        case 27:
          this.Commission = in.readDouble();
          break;

        case 28:
          this.CloseProfit = in.readDouble();
          break;

        case 29:
          this.PositionProfit = in.readDouble();
          break;

        case 30:
          this.PreSettlementPrice = in.readDouble();
          break;

        case 31:
          this.SettlementPrice = in.readDouble();
          break;

        case 32:
          this.TradingDay = in.readString();
          break;

        case 33:
          this.SettlementID = in.readInt();
          break;

        case 34:
          this.OpenCost = in.readDouble();
          break;

        case 35:
          this.ExchangeMargin = in.readDouble();
          break;

        case 36:
          this.CombPosition = in.readInt();
          break;

        case 37:
          this.CombLongFrozen = in.readInt();
          break;

        case 38:
          this.CombShortFrozen = in.readInt();
          break;

        case 39:
          this.CloseProfitByDate = in.readDouble();
          break;

        case 40:
          this.CloseProfitByTrade = in.readDouble();
          break;

        case 41:
          this.TodayPosition = in.readInt();
          break;

        case 42:
          this.MarginRateByMoney = in.readDouble();
          break;

        case 43:
          this.MarginRateByVolume = in.readDouble();
          break;

        case 44:
          this.StrikeFrozen = in.readInt();
          break;

        case 45:
          this.StrikeFrozenAmount = in.readDouble();
          break;

        case 46:
          this.AbandonFrozen = in.readInt();
          break;

        case 47:
          this.ExchangeID = in.readString();
          break;

        case 48:
          this.YdStrikeFrozen = in.readInt();
          break;

        case 49:
          this.InvestUnitID = in.readString();
          break;

        case 50:
          this.PositionCostOffset = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










