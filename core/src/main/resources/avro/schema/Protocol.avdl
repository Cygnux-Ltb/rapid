@namespace("io.rapid.core.protocol.avro")
protocol Protocol {

	@namespace("io.rapid.core.protocol.avro.enums")
	enum OrdType {
		// 无效
		INVALID,
		// 限价单
		LIMITED,
		// 市价单
		MARKET,
		// Limited Stop, 在目前的市场价格达到指定的止损价格时, 被激活成为限价单的报单.
		LIMITED_STOP,
		// Market Stop, 在目前的市场价格达到指定的止损价格时, 被激活成为市价单的报单.
		MARKET_STOP,
		// Market To Limited, 按照市价报单的方式成交, 不能成交的部分保留在报单队列中, 变成限价单的报单.
		MTL,
		// Best Price, 不带有价格限定, 按照市场中存在的最好价格买入或者卖出的报单.
		BP,
		// Average Price, 限定最终成交平均价格的报单.
		AP,
		// Kill Or Kill, 表示要求立即全部成交, 否则就全部取消的报单.
		FOK,
		// Fill And Kill, 表示要求立即成交, 对于无法满足的部分予以取消的报单.
		FAK,
		// Minimum Volume, 要求满足成交量达到这个最小成交量, 否则就取消的报单.
		MV
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum OrdValid {
		//Good Till Cancel, 将一直有效, 直到交易员取消这个报单, 或者该合约本身到期的报单.
		GTC,
		//Good Till Date, 将一直有效, 直到指定日期或交易员取消这个报单, 或者该合约本身到期的报单.
		GTD,
		//Good For Day, 只在当日的交易时段有效, 一旦当前交易时段结束, 自动取消的报单.
		GFD
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum OrdSide {
		//无效
		INVALID,
		//买
		BUY,
		//卖
		SELL,
		//融资买入
		MARGIN_BUY,
		//融券卖出
		SHORT_SELL
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum OrdStatus {
		// 无效
		INVALID,
		// 新订单未确认
		PENDING_NEW,
		// 新订单
		NEW,
		// 新订单已拒绝
		NEW_REJECTED,
		// 部分成交
		PARTIALLY_FILLED,
		// 全部成交
		FILLED,
		// 未确认撤单
		PENDING_CANCEL,
		// 已撤单
		CANCELED,
		// 撤单已拒绝
		CANCEL_REJECTED,
		// 未确认修改订单
		PENDING_REPLACE,
		// 已修改
		REPLACED,
		// 已暂停
		SUSPENDED,
		// 未提供
		UNPROVIDED
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum OrdLevel {
		//子订单
		CHILD,
		//父订单
		PARENT,
		//策略订单
		STRATEGY,
		//组订单
		GROUP
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum TrdDirection {
		// 无效
		INVALID,
		// 多
		LONG,
		// 空
		SHORT
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum TrdAction {
		// 无效
		INVALID,
		// 开仓
		OPEN,
		// 平仓
		CLOSE,
		// 平今仓
		CLOSE_TODAY,
		// 平昨仓
		CLOSE_YESTERDAY
	}

	@namespace("io.rapid.core.protocol.avro.enums")
	enum AdaptorStatus {
		// 无效
		INVALID,
		// 不可用
		UNAVAILABLE,
		// 行情启用
		MD_ENABLE,
		// 行情禁用
		MD_DISABLE,
		// 交易启用
		TRADER_ENABLE,
		// 交易禁用
		TRADER_DISABLE
	}

	/**
	 * 新订单
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record NewOrder {
		// Epoch Microsecond Unit
		long generateTime;
		// Epoch Microsecond Unit
		long sendTime;
		long ordSysId;
		int offerQty;
		int minimumQty = 1;
		double offerPrice = 0.0D;
		string exchangeCode;
		int instrumentId;
		string instrumentCode;
		io.rapid.core.protocol.avro.enums.OrdType type;
		io.rapid.core.protocol.avro.enums.OrdValid valid;
		io.rapid.core.protocol.avro.enums.TrdAction action;
		io.rapid.core.protocol.avro.enums.TrdDirection direction;
		string brokerId;
		int accountId;
		int subAccountId;
		int strategyId;
		string operatorId;
		string msg = "";
	}

	/**
	 * 撤单
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record CancelOrder {
		// Epoch Microsecond Unit
		long generateTime;
		// Epoch Microsecond Unit
		long sendTime;
		long ordSysId;
		boolean immediately = true;
		long delayMillis = 0;
		string exchangeCode;
		string instrumentCode;
		string brokerId;
		int accountId;
		int subAccountId;
		int strategyId;
		string operatorId = "";
		string msg = "";
	}

	/**
	 * 查询订单
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record QueryOrder {
		// Epoch Millisecond Unit
		long generateTime = 0;
		// Epoch Millisecond Unit
		long sendTime = 0;
		long ordSysId;
		string exchangeCode;
		string instrumentCode;
		string brokerId;
		int accountId;
		int subAccountId;
		int strategyId;
		string operatorId = "";
	}

	/**
	 * 查询账户持仓
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record QueryPositions {
		// Epoch Millisecond Unit
		long generateTime = 0;
		// Epoch Millisecond Unit
		long sendTime = 0;
		string exchangeCode;
		string instrumentCode;
		string brokerId;
		int accountId;
		int subAccountId;
		int strategyId;
		string operatorId = "";
	}

	/**
	 * 查询账户余额
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record QueryBalance {
		// Epoch Millisecond Unit
		long generateTime = 0;
		// Epoch Millisecond Unit
		long sendTime = 0;
		string brokerId;
		int accountId;
		int subAccountId;
		int strategyId;
		string operatorId = "";
	}

	/**
	 * 订单回报
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record OrderEvent {
		// Epoch Microsecond Unit
		long epochMicros;
		long ordSysId;
		int tradingDay;
		string brokerId;
		string investorId = "";
		string orderRef;
		string brokerOrdSysId;
		string exchangeCode;
		string instrumentCode;
		io.rapid.core.protocol.avro.enums.OrdStatus status;
		io.rapid.core.protocol.avro.enums.TrdDirection direction;
		io.rapid.core.protocol.avro.enums.TrdAction action;
		int offerQty = 0;
		int filledQty = 0;
		long offerPrice = 0;
		long tradePrice = 0;
		string offerTime = "";
		string updateTime = "";
		string msg = "";
	}

	/**
	 * 账户可用余额回报
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record BalanceEvent {
		long epochMillis;
		string brokerId;
		string investorId;
		long available;
		string currencyId;
	}

	/**
	 * 持仓回报
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record PositionsEvent {
		long epochMillis;
		string brokerId;
		string investorId;
		string exchangeCode;
		string instrumentCode;
		int qty;
	}

	/**
	 * 适配器回报
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record AdaptorEvent {
		long epochMillis;
		string adaptorId;
		int accountId;
		io.rapid.core.protocol.avro.enums.AdaptorStatus status;
	}

	/**
	 * 行情类型
	 */
	@namespace("io.rapid.core.protocol.avro.enums")
	enum MarketDataType {
		DEPTH, FAST, LEVEL10, LEVEL20, LEVEL30
	}

	/**
	 * 行情订阅状态
	 */
	@namespace("io.rapid.core.protocol.avro.enums")
	enum SubscribeStatus {
		SUCCEED, PART_SUCCEED, FAILED
	}

	/**
	 * 行情订阅
	 */
	@namespace("io.rapid.core.protocol.avro.request")
	record MarketDataSubscribe {
		io.rapid.core.protocol.avro.enums.MarketDataType type;
		array<string> instrumentCodes;
		string recvAddr;
	}

	/**
	 * 行情订阅回报
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record MarketDataSubscribeEvent {
		io.rapid.core.protocol.avro.enums.SubscribeStatus status;
		array<string> successInstrumentCodes;
		array<string> failInstrumentCodes;
		string msg;
	}

	/**
	 * 深度行情数据结构
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record DepthMarketDataEvent {
		long timestamp;
		int instrumentId;
		string instrumentCode;
		double lastPrice;
		int volume;
		long turnover;
		array<double> bidPrices;
		array<int> bidVolumes;
		array<double> askPrices;
		array<int> askVolumes;
		int depth;
	}

	/**
	 * 五档快速行情数据结构
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record FastMarketDataEvent {
		long timestamp;
		int instrumentId;
		string instrumentCode;
		double lastPrice;
		int volume;
		long turnover;
		double bidPrices1;
		double bidPrices2;
		double bidPrices3;
		double bidPrices4;
		double bidPrices5;
		int bidVolumes1;
		int bidVolumes2;
		int bidVolumes3;
		int bidVolumes4;
		int bidVolumes5;
		double askPrices1;
		double askPrices2;
		double askPrices3;
		double askPrices4;
		double askPrices5;
		int askVolumes1;
		int askVolumes2;
		int askVolumes3;
		int askVolumes4;
		int askVolumes5;
	}

	/**
	 * 十档行情数据结构
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record L10MarketDataEvent {
		long timestamp;
		int instrumentId;
		string instrumentCode;
		double lastPrice;
		int volume;
		long turnover;
		double bidPrices1;
		double bidPrices2;
		double bidPrices3;
		double bidPrices4;
		double bidPrices5;
		double bidPrices6;
		double bidPrices7;
		double bidPrices8;
		double bidPrices9;
		double bidPrices10;
		int bidVolumes1;
		int bidVolumes2;
		int bidVolumes3;
		int bidVolumes4;
		int bidVolumes5;
		int bidVolumes6;
		int bidVolumes7;
		int bidVolumes8;
		int bidVolumes9;
		int bidVolumes10;
		double askPrices1;
		double askPrices2;
		double askPrices3;
		double askPrices4;
		double askPrices5;
		double askPrices6;
		double askPrices7;
		double askPrices8;
		double askPrices9;
		double askPrices10;
		int askVolumes1;
		int askVolumes2;
		int askVolumes3;
		int askVolumes4;
		int askVolumes5;
		int askVolumes6;
		int askVolumes7;
		int askVolumes8;
		int askVolumes9;
		int askVolumes10;
	}

	/**
	 * 二十档行情数据结构
	 */
	@namespace("io.rapid.core.protocol.avro.event")
	record L20MarketDataEvent {
		long timestamp;
		int instrumentId;
		string instrumentCode;
		double lastPrice;
		int volume;
		long turnover;
		double bidPrices1;
		double bidPrices2;
		double bidPrices3;
		double bidPrices4;
		double bidPrices5;
		double bidPrices6;
		double bidPrices7;
		double bidPrices8;
		double bidPrices9;
		double bidPrices10;
		double bidPrices11;
		double bidPrices12;
		double bidPrices13;
		double bidPrices14;
		double bidPrices15;
		double bidPrices16;
		double bidPrices17;
		double bidPrices18;
		double bidPrices19;
		double bidPrices20;
		int bidVolumes1;
		int bidVolumes2;
		int bidVolumes3;
		int bidVolumes4;
		int bidVolumes5;
		int bidVolumes6;
		int bidVolumes7;
		int bidVolumes8;
		int bidVolumes9;
		int bidVolumes10;
		int bidVolumes11;
		int bidVolumes12;
		int bidVolumes13;
		int bidVolumes14;
		int bidVolumes15;
		int bidVolumes16;
		int bidVolumes17;
		int bidVolumes18;
		int bidVolumes19;
		int bidVolumes20;
		double askPrices1;
		double askPrices2;
		double askPrices3;
		double askPrices4;
		double askPrices5;
		double askPrices6;
		double askPrices7;
		double askPrices8;
		double askPrices9;
		double askPrices10;
		double askPrices11;
		double askPrices12;
		double askPrices13;
		double askPrices14;
		double askPrices15;
		double askPrices16;
		double askPrices17;
		double askPrices18;
		double askPrices19;
		double askPrices20;
		int askVolumes1;
		int askVolumes2;
		int askVolumes3;
		int askVolumes4;
		int askVolumes5;
		int askVolumes6;
		int askVolumes7;
		int askVolumes8;
		int askVolumes9;
		int askVolumes10;
		int askVolumes11;
		int askVolumes12;
		int askVolumes13;
		int askVolumes14;
		int askVolumes15;
		int askVolumes16;
		int askVolumes17;
		int askVolumes18;
		int askVolumes19;
		int askVolumes20;
	}

}
