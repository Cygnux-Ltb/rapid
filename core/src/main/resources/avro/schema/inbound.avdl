@namespace("io.rapid.core.serializable.avro")
protocol TypeDefinition {

    import idl "enums.avdl";

    /**
     * 订单回报
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record OrderEvent {
        // Epoch Microsecond Unit
        long epochMicros;
        long ordSysId;
        int tradingDay;
        string brokerId;
        string investorId = "";
        string orderRef;
        string brokerOrdSysId;
        string exchangeCode;
        string instrumentCode;
        io.rapid.core.serializable.avro.enums.OrdStatus status;
        io.rapid.core.serializable.avro.enums.TrdDirection direction;
        io.rapid.core.serializable.avro.enums.TrdAction action;
        int offerQty = 0;
        int filledQty = 0;
        double offerPrice = 0;
        double tradePrice = 0;
        string offerTime = "";
        string updateTime = "";
        string msg = "";
    }

    /**
     * 账户可用余额回报
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record BalanceEvent {
        long epochMillis;
        string brokerId;
        string investorId;
        long available;
        string currencyId;
    }

    /**
     * 持仓回报
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record PositionsEvent {
        long epochMillis;
        string brokerId;
        string investorId;
        string exchangeCode;
        string instrumentCode;
        io.rapid.core.serializable.avro.enums.TrdDirection direction;
        int qty;
    }

    /**
     * 适配器回报
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record AdaptorEvent {
        long epochMillis;
        string adaptorId;
        int accountId;
        io.rapid.core.serializable.avro.enums.AdaptorStatus status;
    }

    /**
     * 行情订阅回报
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record MarketDataSubscribeEvent {
        io.rapid.core.serializable.avro.enums.SubscribeStatus status;
        array<string> successInstrumentCodes;
        array<string> failInstrumentCodes;
        string msg;
    }

    /**
     * 深度行情数据结构
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record DepthMarketDataEvent {
        long timestamp;
        int instrumentId;
        string instrumentCode;
        double lastPrice;
        int volume;
        long turnover;
        array<double> bidPrices;
        array<int> bidVolumes;
        array<double> askPrices;
        array<int> askVolumes;
        int depth;
    }

    /**
     * 五档快速行情数据结构
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record FastMarketDataEvent {
        long timestamp;
        int instrumentId;
        string instrumentCode;
        double lastPrice;
        int volume;
        long turnover;
        double bidPrice1;
        double bidPrice2;
        double bidPrice3;
        double bidPrice4;
        double bidPrice5;
        int bidVolume1;
        int bidVolume2;
        int bidVolume3;
        int bidVolume4;
        int bidVolume5;
        double askPrice1;
        double askPrice2;
        double askPrice3;
        double askPrice4;
        double askPrice5;
        int askVolume1;
        int askVolume2;
        int askVolume3;
        int askVolume4;
        int askVolume5;
    }

    /**
     * 十档行情数据结构
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record L10MarketDataEvent {
        long timestamp;
        int instrumentId;
        string instrumentCode;
        double lastPrice;
        int volume;
        long turnover;
        double bidPrice1;
        double bidPrice2;
        double bidPrice3;
        double bidPrice4;
        double bidPrice5;
        double bidPrice6;
        double bidPrice7;
        double bidPrice8;
        double bidPrice9;
        double bidPrice10;
        int bidVolume1;
        int bidVolume2;
        int bidVolume3;
        int bidVolume4;
        int bidVolume5;
        int bidVolume6;
        int bidVolume7;
        int bidVolume8;
        int bidVolume9;
        int bidVolume10;
        double askPrice1;
        double askPrice2;
        double askPrice3;
        double askPrice4;
        double askPrice5;
        double askPrice6;
        double askPrice7;
        double askPrice8;
        double askPrice9;
        double askPrice10;
        int askVolume1;
        int askVolume2;
        int askVolume3;
        int askVolume4;
        int askVolume5;
        int askVolume6;
        int askVolume7;
        int askVolume8;
        int askVolume9;
        int askVolume10;
    }

    /**
     * 二十档行情数据结构
     */
    @namespace("io.rapid.core.serializable.avro.inbound")
    record L20MarketDataEvent {
        long timestamp;
        int instrumentId;
        string instrumentCode;
        double lastPrice;
        int volume;
        long turnover;
        double bidPrice1;
        double bidPrice2;
        double bidPrice3;
        double bidPrice4;
        double bidPrice5;
        double bidPrice6;
        double bidPrice7;
        double bidPrice8;
        double bidPrice9;
        double bidPrice10;
        double bidPrice11;
        double bidPrice12;
        double bidPrice13;
        double bidPrice14;
        double bidPrice15;
        double bidPrice16;
        double bidPrice17;
        double bidPrice18;
        double bidPrice19;
        double bidPrice20;
        int bidVolume1;
        int bidVolume2;
        int bidVolume3;
        int bidVolume4;
        int bidVolume5;
        int bidVolume6;
        int bidVolume7;
        int bidVolume8;
        int bidVolume9;
        int bidVolume10;
        int bidVolume11;
        int bidVolume12;
        int bidVolume13;
        int bidVolume14;
        int bidVolume15;
        int bidVolume16;
        int bidVolume17;
        int bidVolume18;
        int bidVolume19;
        int bidVolume20;
        double askPrice1;
        double askPrice2;
        double askPrice3;
        double askPrice4;
        double askPrice5;
        double askPrice6;
        double askPrice7;
        double askPrice8;
        double askPrice9;
        double askPrice10;
        double askPrice11;
        double askPrice12;
        double askPrice13;
        double askPrice14;
        double askPrice15;
        double askPrice16;
        double askPrice17;
        double askPrice18;
        double askPrice19;
        double askPrice20;
        int askVolume1;
        int askVolume2;
        int askVolume3;
        int askVolume4;
        int askVolume5;
        int askVolume6;
        int askVolume7;
        int askVolume8;
        int askVolume9;
        int askVolume10;
        int askVolume11;
        int askVolume12;
        int askVolume13;
        int askVolume14;
        int askVolume15;
        int askVolume16;
        int askVolume17;
        int askVolume18;
        int askVolume19;
        int askVolume20;
    }

}