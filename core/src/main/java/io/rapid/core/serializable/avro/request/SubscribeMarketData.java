/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.rapid.core.serializable.avro.request;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** 订阅行情 */
@org.apache.avro.specific.AvroGenerated
public class SubscribeMarketData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7117497759470735327L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubscribeMarketData\",\"namespace\":\"io.rapid.core.serializable.avro.request\",\"doc\":\"订阅行情\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MarketDataType\",\"namespace\":\"io.rapid.core.serializable.avro.enums\",\"doc\":\"行情类型\",\"symbols\":[\"DEPTH\",\"FAST\",\"LEVEL10\",\"LEVEL20\",\"LEVEL30\"]}},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"recvAddr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubscribeMarketData> ENCODER =
      new BinaryMessageEncoder<SubscribeMarketData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubscribeMarketData> DECODER =
      new BinaryMessageDecoder<SubscribeMarketData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubscribeMarketData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubscribeMarketData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubscribeMarketData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SubscribeMarketData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubscribeMarketData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubscribeMarketData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubscribeMarketData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubscribeMarketData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private io.rapid.core.serializable.avro.enums.MarketDataType type;
  private java.lang.String instrumentCode;
  private java.lang.String recvAddr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubscribeMarketData() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param instrumentCode The new value for instrumentCode
   * @param recvAddr The new value for recvAddr
   */
  public SubscribeMarketData(io.rapid.core.serializable.avro.enums.MarketDataType type, java.lang.String instrumentCode, java.lang.String recvAddr) {
    this.type = type;
    this.instrumentCode = instrumentCode;
    this.recvAddr = recvAddr;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return instrumentCode;
    case 2: return recvAddr;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (io.rapid.core.serializable.avro.enums.MarketDataType)value$; break;
    case 1: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 2: recvAddr = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public io.rapid.core.serializable.avro.enums.MarketDataType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public SubscribeMarketData setType(io.rapid.core.serializable.avro.enums.MarketDataType value) {
    this.type = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return The value of the 'instrumentCode' field.
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }


  /**
   * Sets the value of the 'instrumentCode' field.
   * @param value the value to set.
   */
  public SubscribeMarketData setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
    return this;
  }

  /**
   * Gets the value of the 'recvAddr' field.
   * @return The value of the 'recvAddr' field.
   */
  public java.lang.String getRecvAddr() {
    return recvAddr;
  }


  /**
   * Sets the value of the 'recvAddr' field.
   * @param value the value to set.
   */
  public SubscribeMarketData setRecvAddr(java.lang.String value) {
    this.recvAddr = value;
    return this;
  }

  /**
   * Creates a new SubscribeMarketData RecordBuilder.
   * @return A new SubscribeMarketData RecordBuilder
   */
  public static io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder newBuilder() {
    return new io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder();
  }

  /**
   * Creates a new SubscribeMarketData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubscribeMarketData RecordBuilder
   */
  public static io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder newBuilder(io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder();
    } else {
      return new io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder(other);
    }
  }

  /**
   * Creates a new SubscribeMarketData RecordBuilder by copying an existing SubscribeMarketData instance.
   * @param other The existing instance to copy.
   * @return A new SubscribeMarketData RecordBuilder
   */
  public static io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder newBuilder(io.rapid.core.serializable.avro.request.SubscribeMarketData other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder();
    } else {
      return new io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder(other);
    }
  }

  /**
   * RecordBuilder for SubscribeMarketData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubscribeMarketData>
    implements org.apache.avro.data.RecordBuilder<SubscribeMarketData> {

    private io.rapid.core.serializable.avro.enums.MarketDataType type;
    private java.lang.String instrumentCode;
    private java.lang.String recvAddr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[1].schema(), other.instrumentCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.recvAddr)) {
        this.recvAddr = data().deepCopy(fields()[2].schema(), other.recvAddr);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing SubscribeMarketData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.rapid.core.serializable.avro.request.SubscribeMarketData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[1].schema(), other.instrumentCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recvAddr)) {
        this.recvAddr = data().deepCopy(fields()[2].schema(), other.recvAddr);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public io.rapid.core.serializable.avro.enums.MarketDataType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder setType(io.rapid.core.serializable.avro.enums.MarketDataType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }


    /**
      * Sets the value of the 'instrumentCode' field.
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[1], value);
      this.instrumentCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'recvAddr' field.
      * @return The value.
      */
    public java.lang.String getRecvAddr() {
      return recvAddr;
    }


    /**
      * Sets the value of the 'recvAddr' field.
      * @param value The value of 'recvAddr'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder setRecvAddr(java.lang.String value) {
      validate(fields()[2], value);
      this.recvAddr = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'recvAddr' field has been set.
      * @return True if the 'recvAddr' field has been set, false otherwise.
      */
    public boolean hasRecvAddr() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'recvAddr' field.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.request.SubscribeMarketData.Builder clearRecvAddr() {
      recvAddr = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SubscribeMarketData build() {
      try {
        SubscribeMarketData record = new SubscribeMarketData();
        record.type = fieldSetFlags()[0] ? this.type : (io.rapid.core.serializable.avro.enums.MarketDataType) defaultValue(fields()[0]);
        record.instrumentCode = fieldSetFlags()[1] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[1]);
        record.recvAddr = fieldSetFlags()[2] ? this.recvAddr : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubscribeMarketData>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubscribeMarketData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubscribeMarketData>
    READER$ = (org.apache.avro.io.DatumReader<SubscribeMarketData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.type.ordinal());

    out.writeString(this.instrumentCode);

    out.writeString(this.recvAddr);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = io.rapid.core.serializable.avro.enums.MarketDataType.values()[in.readEnum()];

      this.instrumentCode = in.readString();

      this.recvAddr = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = io.rapid.core.serializable.avro.enums.MarketDataType.values()[in.readEnum()];
          break;

        case 1:
          this.instrumentCode = in.readString();
          break;

        case 2:
          this.recvAddr = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










