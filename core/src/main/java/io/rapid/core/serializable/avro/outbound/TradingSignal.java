/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.rapid.core.serializable.avro.outbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** 交易信号 */
@org.apache.avro.specific.AvroGenerated
public class TradingSignal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3912609771742073015L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TradingSignal\",\"namespace\":\"io.rapid.core.serializable.avro.outbound\",\"doc\":\"交易信号\",\"fields\":[{\"name\":\"generateTime\",\"type\":\"long\",\"doc\":\"Epoch Microsecond Unit\"},{\"name\":\"sendTime\",\"type\":\"long\",\"doc\":\"Epoch Microsecond Unit\"},{\"name\":\"orderWatermark\",\"type\":\"int\",\"doc\":\"订单水位\"},{\"name\":\"minimumQty\",\"type\":\"int\",\"doc\":\"最小成交数量\",\"default\":1},{\"name\":\"offerQty\",\"type\":\"double\",\"doc\":\"委托数量\"},{\"name\":\"offerPrice\",\"type\":\"double\",\"doc\":\"委托价格\",\"default\":0.0},{\"name\":\"stopProfit\",\"type\":\"double\",\"doc\":\"止盈\",\"default\":0.0},{\"name\":\"stopLoss\",\"type\":\"double\",\"doc\":\"止损\",\"default\":0.0},{\"name\":\"instrumentId\",\"type\":\"int\",\"doc\":\"交易标的ID\"},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易标的代码\"},{\"name\":\"ratioOfBalance\",\"type\":\"double\",\"doc\":\"订单比例\",\"default\":0.15},{\"name\":\"ratioOfWin\",\"type\":\"double\",\"doc\":\"胜率\",\"default\":0.5},{\"name\":\"valid\",\"type\":{\"type\":\"enum\",\"name\":\"OrdValid\",\"namespace\":\"io.rapid.core.serializable.avro.enums\",\"symbols\":[\"INVALID\",\"GTC\",\"GTD\",\"GFD\"]},\"doc\":\"订单有效类型\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"TrdDirection\",\"namespace\":\"io.rapid.core.serializable.avro.enums\",\"symbols\":[\"INVALID\",\"LONG\",\"SHORT\"]},\"doc\":\"订单方向\"},{\"name\":\"subAccountId\",\"type\":\"int\",\"doc\":\"子账户ID\"},{\"name\":\"strategyId\",\"type\":\"int\",\"doc\":\"策略ID\"},{\"name\":\"delayMillis\",\"type\":\"long\",\"doc\":\"延迟时间\",\"default\":0},{\"name\":\"operatorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"操作ID\",\"default\":\"\"},{\"name\":\"remark\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"备注\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TradingSignal> ENCODER =
      new BinaryMessageEncoder<TradingSignal>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TradingSignal> DECODER =
      new BinaryMessageDecoder<TradingSignal>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TradingSignal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TradingSignal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TradingSignal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TradingSignal>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TradingSignal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TradingSignal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TradingSignal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TradingSignal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Epoch Microsecond Unit */
  private long generateTime;
  /** Epoch Microsecond Unit */
  private long sendTime;
  /** 订单水位 */
  private int orderWatermark;
  /** 最小成交数量 */
  private int minimumQty;
  /** 委托数量 */
  private double offerQty;
  /** 委托价格 */
  private double offerPrice;
  /** 止盈 */
  private double stopProfit;
  /** 止损 */
  private double stopLoss;
  /** 交易标的ID */
  private int instrumentId;
  /** 交易标的代码 */
  private java.lang.String instrumentCode;
  /** 订单比例 */
  private double ratioOfBalance;
  /** 胜率 */
  private double ratioOfWin;
  /** 订单有效类型 */
  private io.rapid.core.serializable.avro.enums.OrdValid valid;
  /** 订单方向 */
  private io.rapid.core.serializable.avro.enums.TrdDirection direction;
  /** 子账户ID */
  private int subAccountId;
  /** 策略ID */
  private int strategyId;
  /** 延迟时间 */
  private long delayMillis;
  /** 操作ID */
  private java.lang.String operatorId;
  /** 备注 */
  private java.lang.String remark;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TradingSignal() {}

  /**
   * All-args constructor.
   * @param generateTime Epoch Microsecond Unit
   * @param sendTime Epoch Microsecond Unit
   * @param orderWatermark 订单水位
   * @param minimumQty 最小成交数量
   * @param offerQty 委托数量
   * @param offerPrice 委托价格
   * @param stopProfit 止盈
   * @param stopLoss 止损
   * @param instrumentId 交易标的ID
   * @param instrumentCode 交易标的代码
   * @param ratioOfBalance 订单比例
   * @param ratioOfWin 胜率
   * @param valid 订单有效类型
   * @param direction 订单方向
   * @param subAccountId 子账户ID
   * @param strategyId 策略ID
   * @param delayMillis 延迟时间
   * @param operatorId 操作ID
   * @param remark 备注
   */
  public TradingSignal(java.lang.Long generateTime, java.lang.Long sendTime, java.lang.Integer orderWatermark, java.lang.Integer minimumQty, java.lang.Double offerQty, java.lang.Double offerPrice, java.lang.Double stopProfit, java.lang.Double stopLoss, java.lang.Integer instrumentId, java.lang.String instrumentCode, java.lang.Double ratioOfBalance, java.lang.Double ratioOfWin, io.rapid.core.serializable.avro.enums.OrdValid valid, io.rapid.core.serializable.avro.enums.TrdDirection direction, java.lang.Integer subAccountId, java.lang.Integer strategyId, java.lang.Long delayMillis, java.lang.String operatorId, java.lang.String remark) {
    this.generateTime = generateTime;
    this.sendTime = sendTime;
    this.orderWatermark = orderWatermark;
    this.minimumQty = minimumQty;
    this.offerQty = offerQty;
    this.offerPrice = offerPrice;
    this.stopProfit = stopProfit;
    this.stopLoss = stopLoss;
    this.instrumentId = instrumentId;
    this.instrumentCode = instrumentCode;
    this.ratioOfBalance = ratioOfBalance;
    this.ratioOfWin = ratioOfWin;
    this.valid = valid;
    this.direction = direction;
    this.subAccountId = subAccountId;
    this.strategyId = strategyId;
    this.delayMillis = delayMillis;
    this.operatorId = operatorId;
    this.remark = remark;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return generateTime;
    case 1: return sendTime;
    case 2: return orderWatermark;
    case 3: return minimumQty;
    case 4: return offerQty;
    case 5: return offerPrice;
    case 6: return stopProfit;
    case 7: return stopLoss;
    case 8: return instrumentId;
    case 9: return instrumentCode;
    case 10: return ratioOfBalance;
    case 11: return ratioOfWin;
    case 12: return valid;
    case 13: return direction;
    case 14: return subAccountId;
    case 15: return strategyId;
    case 16: return delayMillis;
    case 17: return operatorId;
    case 18: return remark;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: generateTime = (java.lang.Long)value$; break;
    case 1: sendTime = (java.lang.Long)value$; break;
    case 2: orderWatermark = (java.lang.Integer)value$; break;
    case 3: minimumQty = (java.lang.Integer)value$; break;
    case 4: offerQty = (java.lang.Double)value$; break;
    case 5: offerPrice = (java.lang.Double)value$; break;
    case 6: stopProfit = (java.lang.Double)value$; break;
    case 7: stopLoss = (java.lang.Double)value$; break;
    case 8: instrumentId = (java.lang.Integer)value$; break;
    case 9: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 10: ratioOfBalance = (java.lang.Double)value$; break;
    case 11: ratioOfWin = (java.lang.Double)value$; break;
    case 12: valid = (io.rapid.core.serializable.avro.enums.OrdValid)value$; break;
    case 13: direction = (io.rapid.core.serializable.avro.enums.TrdDirection)value$; break;
    case 14: subAccountId = (java.lang.Integer)value$; break;
    case 15: strategyId = (java.lang.Integer)value$; break;
    case 16: delayMillis = (java.lang.Long)value$; break;
    case 17: operatorId = value$ != null ? value$.toString() : null; break;
    case 18: remark = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'generateTime' field.
   * @return Epoch Microsecond Unit
   */
  public long getGenerateTime() {
    return generateTime;
  }


  /**
   * Sets the value of the 'generateTime' field.
   * Epoch Microsecond Unit
   * @param value the value to set.
   */
  public TradingSignal setGenerateTime(long value) {
    this.generateTime = value;
    return this;
  }

  /**
   * Gets the value of the 'sendTime' field.
   * @return Epoch Microsecond Unit
   */
  public long getSendTime() {
    return sendTime;
  }


  /**
   * Sets the value of the 'sendTime' field.
   * Epoch Microsecond Unit
   * @param value the value to set.
   */
  public TradingSignal setSendTime(long value) {
    this.sendTime = value;
    return this;
  }

  /**
   * Gets the value of the 'orderWatermark' field.
   * @return 订单水位
   */
  public int getOrderWatermark() {
    return orderWatermark;
  }


  /**
   * Sets the value of the 'orderWatermark' field.
   * 订单水位
   * @param value the value to set.
   */
  public TradingSignal setOrderWatermark(int value) {
    this.orderWatermark = value;
    return this;
  }

  /**
   * Gets the value of the 'minimumQty' field.
   * @return 最小成交数量
   */
  public int getMinimumQty() {
    return minimumQty;
  }


  /**
   * Sets the value of the 'minimumQty' field.
   * 最小成交数量
   * @param value the value to set.
   */
  public TradingSignal setMinimumQty(int value) {
    this.minimumQty = value;
    return this;
  }

  /**
   * Gets the value of the 'offerQty' field.
   * @return 委托数量
   */
  public double getOfferQty() {
    return offerQty;
  }


  /**
   * Sets the value of the 'offerQty' field.
   * 委托数量
   * @param value the value to set.
   */
  public TradingSignal setOfferQty(double value) {
    this.offerQty = value;
    return this;
  }

  /**
   * Gets the value of the 'offerPrice' field.
   * @return 委托价格
   */
  public double getOfferPrice() {
    return offerPrice;
  }


  /**
   * Sets the value of the 'offerPrice' field.
   * 委托价格
   * @param value the value to set.
   */
  public TradingSignal setOfferPrice(double value) {
    this.offerPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'stopProfit' field.
   * @return 止盈
   */
  public double getStopProfit() {
    return stopProfit;
  }


  /**
   * Sets the value of the 'stopProfit' field.
   * 止盈
   * @param value the value to set.
   */
  public TradingSignal setStopProfit(double value) {
    this.stopProfit = value;
    return this;
  }

  /**
   * Gets the value of the 'stopLoss' field.
   * @return 止损
   */
  public double getStopLoss() {
    return stopLoss;
  }


  /**
   * Sets the value of the 'stopLoss' field.
   * 止损
   * @param value the value to set.
   */
  public TradingSignal setStopLoss(double value) {
    this.stopLoss = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentId' field.
   * @return 交易标的ID
   */
  public int getInstrumentId() {
    return instrumentId;
  }


  /**
   * Sets the value of the 'instrumentId' field.
   * 交易标的ID
   * @param value the value to set.
   */
  public TradingSignal setInstrumentId(int value) {
    this.instrumentId = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return 交易标的代码
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }


  /**
   * Sets the value of the 'instrumentCode' field.
   * 交易标的代码
   * @param value the value to set.
   */
  public TradingSignal setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
    return this;
  }

  /**
   * Gets the value of the 'ratioOfBalance' field.
   * @return 订单比例
   */
  public double getRatioOfBalance() {
    return ratioOfBalance;
  }


  /**
   * Sets the value of the 'ratioOfBalance' field.
   * 订单比例
   * @param value the value to set.
   */
  public TradingSignal setRatioOfBalance(double value) {
    this.ratioOfBalance = value;
    return this;
  }

  /**
   * Gets the value of the 'ratioOfWin' field.
   * @return 胜率
   */
  public double getRatioOfWin() {
    return ratioOfWin;
  }


  /**
   * Sets the value of the 'ratioOfWin' field.
   * 胜率
   * @param value the value to set.
   */
  public TradingSignal setRatioOfWin(double value) {
    this.ratioOfWin = value;
    return this;
  }

  /**
   * Gets the value of the 'valid' field.
   * @return 订单有效类型
   */
  public io.rapid.core.serializable.avro.enums.OrdValid getValid() {
    return valid;
  }


  /**
   * Sets the value of the 'valid' field.
   * 订单有效类型
   * @param value the value to set.
   */
  public TradingSignal setValid(io.rapid.core.serializable.avro.enums.OrdValid value) {
    this.valid = value;
    return this;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return 订单方向
   */
  public io.rapid.core.serializable.avro.enums.TrdDirection getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * 订单方向
   * @param value the value to set.
   */
  public TradingSignal setDirection(io.rapid.core.serializable.avro.enums.TrdDirection value) {
    this.direction = value;
    return this;
  }

  /**
   * Gets the value of the 'subAccountId' field.
   * @return 子账户ID
   */
  public int getSubAccountId() {
    return subAccountId;
  }


  /**
   * Sets the value of the 'subAccountId' field.
   * 子账户ID
   * @param value the value to set.
   */
  public TradingSignal setSubAccountId(int value) {
    this.subAccountId = value;
    return this;
  }

  /**
   * Gets the value of the 'strategyId' field.
   * @return 策略ID
   */
  public int getStrategyId() {
    return strategyId;
  }


  /**
   * Sets the value of the 'strategyId' field.
   * 策略ID
   * @param value the value to set.
   */
  public TradingSignal setStrategyId(int value) {
    this.strategyId = value;
    return this;
  }

  /**
   * Gets the value of the 'delayMillis' field.
   * @return 延迟时间
   */
  public long getDelayMillis() {
    return delayMillis;
  }


  /**
   * Sets the value of the 'delayMillis' field.
   * 延迟时间
   * @param value the value to set.
   */
  public TradingSignal setDelayMillis(long value) {
    this.delayMillis = value;
    return this;
  }

  /**
   * Gets the value of the 'operatorId' field.
   * @return 操作ID
   */
  public java.lang.String getOperatorId() {
    return operatorId;
  }


  /**
   * Sets the value of the 'operatorId' field.
   * 操作ID
   * @param value the value to set.
   */
  public TradingSignal setOperatorId(java.lang.String value) {
    this.operatorId = value;
    return this;
  }

  /**
   * Gets the value of the 'remark' field.
   * @return 备注
   */
  public java.lang.String getRemark() {
    return remark;
  }


  /**
   * Sets the value of the 'remark' field.
   * 备注
   * @param value the value to set.
   */
  public TradingSignal setRemark(java.lang.String value) {
    this.remark = value;
    return this;
  }

  /**
   * Creates a new TradingSignal RecordBuilder.
   * @return A new TradingSignal RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.TradingSignal.Builder newBuilder() {
    return new io.rapid.core.serializable.avro.outbound.TradingSignal.Builder();
  }

  /**
   * Creates a new TradingSignal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TradingSignal RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.TradingSignal.Builder newBuilder(io.rapid.core.serializable.avro.outbound.TradingSignal.Builder other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.outbound.TradingSignal.Builder();
    } else {
      return new io.rapid.core.serializable.avro.outbound.TradingSignal.Builder(other);
    }
  }

  /**
   * Creates a new TradingSignal RecordBuilder by copying an existing TradingSignal instance.
   * @param other The existing instance to copy.
   * @return A new TradingSignal RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.TradingSignal.Builder newBuilder(io.rapid.core.serializable.avro.outbound.TradingSignal other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.outbound.TradingSignal.Builder();
    } else {
      return new io.rapid.core.serializable.avro.outbound.TradingSignal.Builder(other);
    }
  }

  /**
   * RecordBuilder for TradingSignal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TradingSignal>
    implements org.apache.avro.data.RecordBuilder<TradingSignal> {

    /** Epoch Microsecond Unit */
    private long generateTime;
    /** Epoch Microsecond Unit */
    private long sendTime;
    /** 订单水位 */
    private int orderWatermark;
    /** 最小成交数量 */
    private int minimumQty;
    /** 委托数量 */
    private double offerQty;
    /** 委托价格 */
    private double offerPrice;
    /** 止盈 */
    private double stopProfit;
    /** 止损 */
    private double stopLoss;
    /** 交易标的ID */
    private int instrumentId;
    /** 交易标的代码 */
    private java.lang.String instrumentCode;
    /** 订单比例 */
    private double ratioOfBalance;
    /** 胜率 */
    private double ratioOfWin;
    /** 订单有效类型 */
    private io.rapid.core.serializable.avro.enums.OrdValid valid;
    /** 订单方向 */
    private io.rapid.core.serializable.avro.enums.TrdDirection direction;
    /** 子账户ID */
    private int subAccountId;
    /** 策略ID */
    private int strategyId;
    /** 延迟时间 */
    private long delayMillis;
    /** 操作ID */
    private java.lang.String operatorId;
    /** 备注 */
    private java.lang.String remark;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.rapid.core.serializable.avro.outbound.TradingSignal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.orderWatermark)) {
        this.orderWatermark = data().deepCopy(fields()[2].schema(), other.orderWatermark);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.minimumQty)) {
        this.minimumQty = data().deepCopy(fields()[3].schema(), other.minimumQty);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[4].schema(), other.offerQty);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[5].schema(), other.offerPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.stopProfit)) {
        this.stopProfit = data().deepCopy(fields()[6].schema(), other.stopProfit);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.stopLoss)) {
        this.stopLoss = data().deepCopy(fields()[7].schema(), other.stopLoss);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[8].schema(), other.instrumentId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[9].schema(), other.instrumentCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.ratioOfBalance)) {
        this.ratioOfBalance = data().deepCopy(fields()[10].schema(), other.ratioOfBalance);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.ratioOfWin)) {
        this.ratioOfWin = data().deepCopy(fields()[11].schema(), other.ratioOfWin);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.valid)) {
        this.valid = data().deepCopy(fields()[12].schema(), other.valid);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.direction)) {
        this.direction = data().deepCopy(fields()[13].schema(), other.direction);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[14].schema(), other.subAccountId);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.strategyId)) {
        this.strategyId = data().deepCopy(fields()[15].schema(), other.strategyId);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.delayMillis)) {
        this.delayMillis = data().deepCopy(fields()[16].schema(), other.delayMillis);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.operatorId)) {
        this.operatorId = data().deepCopy(fields()[17].schema(), other.operatorId);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.remark)) {
        this.remark = data().deepCopy(fields()[18].schema(), other.remark);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing TradingSignal instance
     * @param other The existing instance to copy.
     */
    private Builder(io.rapid.core.serializable.avro.outbound.TradingSignal other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderWatermark)) {
        this.orderWatermark = data().deepCopy(fields()[2].schema(), other.orderWatermark);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.minimumQty)) {
        this.minimumQty = data().deepCopy(fields()[3].schema(), other.minimumQty);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[4].schema(), other.offerQty);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[5].schema(), other.offerPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stopProfit)) {
        this.stopProfit = data().deepCopy(fields()[6].schema(), other.stopProfit);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.stopLoss)) {
        this.stopLoss = data().deepCopy(fields()[7].schema(), other.stopLoss);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[8].schema(), other.instrumentId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[9].schema(), other.instrumentCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ratioOfBalance)) {
        this.ratioOfBalance = data().deepCopy(fields()[10].schema(), other.ratioOfBalance);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ratioOfWin)) {
        this.ratioOfWin = data().deepCopy(fields()[11].schema(), other.ratioOfWin);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.valid)) {
        this.valid = data().deepCopy(fields()[12].schema(), other.valid);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.direction)) {
        this.direction = data().deepCopy(fields()[13].schema(), other.direction);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[14].schema(), other.subAccountId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.strategyId)) {
        this.strategyId = data().deepCopy(fields()[15].schema(), other.strategyId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.delayMillis)) {
        this.delayMillis = data().deepCopy(fields()[16].schema(), other.delayMillis);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.operatorId)) {
        this.operatorId = data().deepCopy(fields()[17].schema(), other.operatorId);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.remark)) {
        this.remark = data().deepCopy(fields()[18].schema(), other.remark);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'generateTime' field.
      * Epoch Microsecond Unit
      * @return The value.
      */
    public long getGenerateTime() {
      return generateTime;
    }


    /**
      * Sets the value of the 'generateTime' field.
      * Epoch Microsecond Unit
      * @param value The value of 'generateTime'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setGenerateTime(long value) {
      validate(fields()[0], value);
      this.generateTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'generateTime' field has been set.
      * Epoch Microsecond Unit
      * @return True if the 'generateTime' field has been set, false otherwise.
      */
    public boolean hasGenerateTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'generateTime' field.
      * Epoch Microsecond Unit
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearGenerateTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendTime' field.
      * Epoch Microsecond Unit
      * @return The value.
      */
    public long getSendTime() {
      return sendTime;
    }


    /**
      * Sets the value of the 'sendTime' field.
      * Epoch Microsecond Unit
      * @param value The value of 'sendTime'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setSendTime(long value) {
      validate(fields()[1], value);
      this.sendTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sendTime' field has been set.
      * Epoch Microsecond Unit
      * @return True if the 'sendTime' field has been set, false otherwise.
      */
    public boolean hasSendTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sendTime' field.
      * Epoch Microsecond Unit
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearSendTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderWatermark' field.
      * 订单水位
      * @return The value.
      */
    public int getOrderWatermark() {
      return orderWatermark;
    }


    /**
      * Sets the value of the 'orderWatermark' field.
      * 订单水位
      * @param value The value of 'orderWatermark'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setOrderWatermark(int value) {
      validate(fields()[2], value);
      this.orderWatermark = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderWatermark' field has been set.
      * 订单水位
      * @return True if the 'orderWatermark' field has been set, false otherwise.
      */
    public boolean hasOrderWatermark() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderWatermark' field.
      * 订单水位
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearOrderWatermark() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'minimumQty' field.
      * 最小成交数量
      * @return The value.
      */
    public int getMinimumQty() {
      return minimumQty;
    }


    /**
      * Sets the value of the 'minimumQty' field.
      * 最小成交数量
      * @param value The value of 'minimumQty'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setMinimumQty(int value) {
      validate(fields()[3], value);
      this.minimumQty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'minimumQty' field has been set.
      * 最小成交数量
      * @return True if the 'minimumQty' field has been set, false otherwise.
      */
    public boolean hasMinimumQty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'minimumQty' field.
      * 最小成交数量
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearMinimumQty() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerQty' field.
      * 委托数量
      * @return The value.
      */
    public double getOfferQty() {
      return offerQty;
    }


    /**
      * Sets the value of the 'offerQty' field.
      * 委托数量
      * @param value The value of 'offerQty'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setOfferQty(double value) {
      validate(fields()[4], value);
      this.offerQty = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'offerQty' field has been set.
      * 委托数量
      * @return True if the 'offerQty' field has been set, false otherwise.
      */
    public boolean hasOfferQty() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'offerQty' field.
      * 委托数量
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearOfferQty() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerPrice' field.
      * 委托价格
      * @return The value.
      */
    public double getOfferPrice() {
      return offerPrice;
    }


    /**
      * Sets the value of the 'offerPrice' field.
      * 委托价格
      * @param value The value of 'offerPrice'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setOfferPrice(double value) {
      validate(fields()[5], value);
      this.offerPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'offerPrice' field has been set.
      * 委托价格
      * @return True if the 'offerPrice' field has been set, false otherwise.
      */
    public boolean hasOfferPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'offerPrice' field.
      * 委托价格
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearOfferPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'stopProfit' field.
      * 止盈
      * @return The value.
      */
    public double getStopProfit() {
      return stopProfit;
    }


    /**
      * Sets the value of the 'stopProfit' field.
      * 止盈
      * @param value The value of 'stopProfit'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setStopProfit(double value) {
      validate(fields()[6], value);
      this.stopProfit = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'stopProfit' field has been set.
      * 止盈
      * @return True if the 'stopProfit' field has been set, false otherwise.
      */
    public boolean hasStopProfit() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'stopProfit' field.
      * 止盈
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearStopProfit() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'stopLoss' field.
      * 止损
      * @return The value.
      */
    public double getStopLoss() {
      return stopLoss;
    }


    /**
      * Sets the value of the 'stopLoss' field.
      * 止损
      * @param value The value of 'stopLoss'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setStopLoss(double value) {
      validate(fields()[7], value);
      this.stopLoss = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'stopLoss' field has been set.
      * 止损
      * @return True if the 'stopLoss' field has been set, false otherwise.
      */
    public boolean hasStopLoss() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'stopLoss' field.
      * 止损
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearStopLoss() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentId' field.
      * 交易标的ID
      * @return The value.
      */
    public int getInstrumentId() {
      return instrumentId;
    }


    /**
      * Sets the value of the 'instrumentId' field.
      * 交易标的ID
      * @param value The value of 'instrumentId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setInstrumentId(int value) {
      validate(fields()[8], value);
      this.instrumentId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentId' field has been set.
      * 交易标的ID
      * @return True if the 'instrumentId' field has been set, false otherwise.
      */
    public boolean hasInstrumentId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'instrumentId' field.
      * 交易标的ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearInstrumentId() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * 交易标的代码
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }


    /**
      * Sets the value of the 'instrumentCode' field.
      * 交易标的代码
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[9], value);
      this.instrumentCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * 交易标的代码
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * 交易标的代码
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ratioOfBalance' field.
      * 订单比例
      * @return The value.
      */
    public double getRatioOfBalance() {
      return ratioOfBalance;
    }


    /**
      * Sets the value of the 'ratioOfBalance' field.
      * 订单比例
      * @param value The value of 'ratioOfBalance'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setRatioOfBalance(double value) {
      validate(fields()[10], value);
      this.ratioOfBalance = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ratioOfBalance' field has been set.
      * 订单比例
      * @return True if the 'ratioOfBalance' field has been set, false otherwise.
      */
    public boolean hasRatioOfBalance() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ratioOfBalance' field.
      * 订单比例
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearRatioOfBalance() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'ratioOfWin' field.
      * 胜率
      * @return The value.
      */
    public double getRatioOfWin() {
      return ratioOfWin;
    }


    /**
      * Sets the value of the 'ratioOfWin' field.
      * 胜率
      * @param value The value of 'ratioOfWin'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setRatioOfWin(double value) {
      validate(fields()[11], value);
      this.ratioOfWin = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'ratioOfWin' field has been set.
      * 胜率
      * @return True if the 'ratioOfWin' field has been set, false otherwise.
      */
    public boolean hasRatioOfWin() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'ratioOfWin' field.
      * 胜率
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearRatioOfWin() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'valid' field.
      * 订单有效类型
      * @return The value.
      */
    public io.rapid.core.serializable.avro.enums.OrdValid getValid() {
      return valid;
    }


    /**
      * Sets the value of the 'valid' field.
      * 订单有效类型
      * @param value The value of 'valid'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setValid(io.rapid.core.serializable.avro.enums.OrdValid value) {
      validate(fields()[12], value);
      this.valid = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'valid' field has been set.
      * 订单有效类型
      * @return True if the 'valid' field has been set, false otherwise.
      */
    public boolean hasValid() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'valid' field.
      * 订单有效类型
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearValid() {
      valid = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * 订单方向
      * @return The value.
      */
    public io.rapid.core.serializable.avro.enums.TrdDirection getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * 订单方向
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setDirection(io.rapid.core.serializable.avro.enums.TrdDirection value) {
      validate(fields()[13], value);
      this.direction = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * 订单方向
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'direction' field.
      * 订单方向
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'subAccountId' field.
      * 子账户ID
      * @return The value.
      */
    public int getSubAccountId() {
      return subAccountId;
    }


    /**
      * Sets the value of the 'subAccountId' field.
      * 子账户ID
      * @param value The value of 'subAccountId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setSubAccountId(int value) {
      validate(fields()[14], value);
      this.subAccountId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'subAccountId' field has been set.
      * 子账户ID
      * @return True if the 'subAccountId' field has been set, false otherwise.
      */
    public boolean hasSubAccountId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'subAccountId' field.
      * 子账户ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearSubAccountId() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'strategyId' field.
      * 策略ID
      * @return The value.
      */
    public int getStrategyId() {
      return strategyId;
    }


    /**
      * Sets the value of the 'strategyId' field.
      * 策略ID
      * @param value The value of 'strategyId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setStrategyId(int value) {
      validate(fields()[15], value);
      this.strategyId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'strategyId' field has been set.
      * 策略ID
      * @return True if the 'strategyId' field has been set, false otherwise.
      */
    public boolean hasStrategyId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'strategyId' field.
      * 策略ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearStrategyId() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'delayMillis' field.
      * 延迟时间
      * @return The value.
      */
    public long getDelayMillis() {
      return delayMillis;
    }


    /**
      * Sets the value of the 'delayMillis' field.
      * 延迟时间
      * @param value The value of 'delayMillis'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setDelayMillis(long value) {
      validate(fields()[16], value);
      this.delayMillis = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'delayMillis' field has been set.
      * 延迟时间
      * @return True if the 'delayMillis' field has been set, false otherwise.
      */
    public boolean hasDelayMillis() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'delayMillis' field.
      * 延迟时间
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearDelayMillis() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'operatorId' field.
      * 操作ID
      * @return The value.
      */
    public java.lang.String getOperatorId() {
      return operatorId;
    }


    /**
      * Sets the value of the 'operatorId' field.
      * 操作ID
      * @param value The value of 'operatorId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setOperatorId(java.lang.String value) {
      validate(fields()[17], value);
      this.operatorId = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'operatorId' field has been set.
      * 操作ID
      * @return True if the 'operatorId' field has been set, false otherwise.
      */
    public boolean hasOperatorId() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'operatorId' field.
      * 操作ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearOperatorId() {
      operatorId = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'remark' field.
      * 备注
      * @return The value.
      */
    public java.lang.String getRemark() {
      return remark;
    }


    /**
      * Sets the value of the 'remark' field.
      * 备注
      * @param value The value of 'remark'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder setRemark(java.lang.String value) {
      validate(fields()[18], value);
      this.remark = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'remark' field has been set.
      * 备注
      * @return True if the 'remark' field has been set, false otherwise.
      */
    public boolean hasRemark() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'remark' field.
      * 备注
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.TradingSignal.Builder clearRemark() {
      remark = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public TradingSignal build() {
      try {
        TradingSignal record = new TradingSignal();
        record.generateTime = fieldSetFlags()[0] ? this.generateTime : (java.lang.Long) defaultValue(fields()[0]);
        record.sendTime = fieldSetFlags()[1] ? this.sendTime : (java.lang.Long) defaultValue(fields()[1]);
        record.orderWatermark = fieldSetFlags()[2] ? this.orderWatermark : (java.lang.Integer) defaultValue(fields()[2]);
        record.minimumQty = fieldSetFlags()[3] ? this.minimumQty : (java.lang.Integer) defaultValue(fields()[3]);
        record.offerQty = fieldSetFlags()[4] ? this.offerQty : (java.lang.Double) defaultValue(fields()[4]);
        record.offerPrice = fieldSetFlags()[5] ? this.offerPrice : (java.lang.Double) defaultValue(fields()[5]);
        record.stopProfit = fieldSetFlags()[6] ? this.stopProfit : (java.lang.Double) defaultValue(fields()[6]);
        record.stopLoss = fieldSetFlags()[7] ? this.stopLoss : (java.lang.Double) defaultValue(fields()[7]);
        record.instrumentId = fieldSetFlags()[8] ? this.instrumentId : (java.lang.Integer) defaultValue(fields()[8]);
        record.instrumentCode = fieldSetFlags()[9] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[9]);
        record.ratioOfBalance = fieldSetFlags()[10] ? this.ratioOfBalance : (java.lang.Double) defaultValue(fields()[10]);
        record.ratioOfWin = fieldSetFlags()[11] ? this.ratioOfWin : (java.lang.Double) defaultValue(fields()[11]);
        record.valid = fieldSetFlags()[12] ? this.valid : (io.rapid.core.serializable.avro.enums.OrdValid) defaultValue(fields()[12]);
        record.direction = fieldSetFlags()[13] ? this.direction : (io.rapid.core.serializable.avro.enums.TrdDirection) defaultValue(fields()[13]);
        record.subAccountId = fieldSetFlags()[14] ? this.subAccountId : (java.lang.Integer) defaultValue(fields()[14]);
        record.strategyId = fieldSetFlags()[15] ? this.strategyId : (java.lang.Integer) defaultValue(fields()[15]);
        record.delayMillis = fieldSetFlags()[16] ? this.delayMillis : (java.lang.Long) defaultValue(fields()[16]);
        record.operatorId = fieldSetFlags()[17] ? this.operatorId : (java.lang.String) defaultValue(fields()[17]);
        record.remark = fieldSetFlags()[18] ? this.remark : (java.lang.String) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TradingSignal>
    WRITER$ = (org.apache.avro.io.DatumWriter<TradingSignal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TradingSignal>
    READER$ = (org.apache.avro.io.DatumReader<TradingSignal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.generateTime);

    out.writeLong(this.sendTime);

    out.writeInt(this.orderWatermark);

    out.writeInt(this.minimumQty);

    out.writeDouble(this.offerQty);

    out.writeDouble(this.offerPrice);

    out.writeDouble(this.stopProfit);

    out.writeDouble(this.stopLoss);

    out.writeInt(this.instrumentId);

    out.writeString(this.instrumentCode);

    out.writeDouble(this.ratioOfBalance);

    out.writeDouble(this.ratioOfWin);

    out.writeEnum(this.valid.ordinal());

    out.writeEnum(this.direction.ordinal());

    out.writeInt(this.subAccountId);

    out.writeInt(this.strategyId);

    out.writeLong(this.delayMillis);

    out.writeString(this.operatorId);

    out.writeString(this.remark);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.generateTime = in.readLong();

      this.sendTime = in.readLong();

      this.orderWatermark = in.readInt();

      this.minimumQty = in.readInt();

      this.offerQty = in.readDouble();

      this.offerPrice = in.readDouble();

      this.stopProfit = in.readDouble();

      this.stopLoss = in.readDouble();

      this.instrumentId = in.readInt();

      this.instrumentCode = in.readString();

      this.ratioOfBalance = in.readDouble();

      this.ratioOfWin = in.readDouble();

      this.valid = io.rapid.core.serializable.avro.enums.OrdValid.values()[in.readEnum()];

      this.direction = io.rapid.core.serializable.avro.enums.TrdDirection.values()[in.readEnum()];

      this.subAccountId = in.readInt();

      this.strategyId = in.readInt();

      this.delayMillis = in.readLong();

      this.operatorId = in.readString();

      this.remark = in.readString();

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.generateTime = in.readLong();
          break;

        case 1:
          this.sendTime = in.readLong();
          break;

        case 2:
          this.orderWatermark = in.readInt();
          break;

        case 3:
          this.minimumQty = in.readInt();
          break;

        case 4:
          this.offerQty = in.readDouble();
          break;

        case 5:
          this.offerPrice = in.readDouble();
          break;

        case 6:
          this.stopProfit = in.readDouble();
          break;

        case 7:
          this.stopLoss = in.readDouble();
          break;

        case 8:
          this.instrumentId = in.readInt();
          break;

        case 9:
          this.instrumentCode = in.readString();
          break;

        case 10:
          this.ratioOfBalance = in.readDouble();
          break;

        case 11:
          this.ratioOfWin = in.readDouble();
          break;

        case 12:
          this.valid = io.rapid.core.serializable.avro.enums.OrdValid.values()[in.readEnum()];
          break;

        case 13:
          this.direction = io.rapid.core.serializable.avro.enums.TrdDirection.values()[in.readEnum()];
          break;

        case 14:
          this.subAccountId = in.readInt();
          break;

        case 15:
          this.strategyId = in.readInt();
          break;

        case 16:
          this.delayMillis = in.readLong();
          break;

        case 17:
          this.operatorId = in.readString();
          break;

        case 18:
          this.remark = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










