/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.rapid.core.serializable.avro.outbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** 查询账户余额 (查询范围逐步提升) */
@org.apache.avro.specific.AvroGenerated
public class QueryBalance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5860260131726532564L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QueryBalance\",\"namespace\":\"io.rapid.core.serializable.avro.outbound\",\"doc\":\"查询账户余额 (查询范围逐步提升)\",\"fields\":[{\"name\":\"generateTime\",\"type\":\"long\",\"doc\":\"Epoch Millisecond Unit\",\"default\":0},{\"name\":\"sendTime\",\"type\":\"long\",\"doc\":\"Epoch Millisecond Unit\",\"default\":0},{\"name\":\"accountId\",\"type\":\"int\",\"doc\":\"1.账户ID\",\"default\":0},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"2.经纪商ID\",\"default\":\"\"},{\"name\":\"subAccountId\",\"type\":\"int\",\"doc\":\"3.子账户ID\",\"default\":0},{\"name\":\"reason\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"操作原因\",\"default\":\"\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"操作来源\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<QueryBalance> ENCODER =
      new BinaryMessageEncoder<QueryBalance>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<QueryBalance> DECODER =
      new BinaryMessageDecoder<QueryBalance>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<QueryBalance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<QueryBalance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<QueryBalance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<QueryBalance>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this QueryBalance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a QueryBalance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a QueryBalance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static QueryBalance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Epoch Millisecond Unit */
  private long generateTime;
  /** Epoch Millisecond Unit */
  private long sendTime;
  /** 1.账户ID */
  private int accountId;
  /** 2.经纪商ID */
  private java.lang.String brokerId;
  /** 3.子账户ID */
  private int subAccountId;
  /** 操作原因 */
  private java.lang.String reason;
  /** 操作来源 */
  private java.lang.String source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QueryBalance() {}

  /**
   * All-args constructor.
   * @param generateTime Epoch Millisecond Unit
   * @param sendTime Epoch Millisecond Unit
   * @param accountId 1.账户ID
   * @param brokerId 2.经纪商ID
   * @param subAccountId 3.子账户ID
   * @param reason 操作原因
   * @param source 操作来源
   */
  public QueryBalance(java.lang.Long generateTime, java.lang.Long sendTime, java.lang.Integer accountId, java.lang.String brokerId, java.lang.Integer subAccountId, java.lang.String reason, java.lang.String source) {
    this.generateTime = generateTime;
    this.sendTime = sendTime;
    this.accountId = accountId;
    this.brokerId = brokerId;
    this.subAccountId = subAccountId;
    this.reason = reason;
    this.source = source;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return generateTime;
    case 1: return sendTime;
    case 2: return accountId;
    case 3: return brokerId;
    case 4: return subAccountId;
    case 5: return reason;
    case 6: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: generateTime = (java.lang.Long)value$; break;
    case 1: sendTime = (java.lang.Long)value$; break;
    case 2: accountId = (java.lang.Integer)value$; break;
    case 3: brokerId = value$ != null ? value$.toString() : null; break;
    case 4: subAccountId = (java.lang.Integer)value$; break;
    case 5: reason = value$ != null ? value$.toString() : null; break;
    case 6: source = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'generateTime' field.
   * @return Epoch Millisecond Unit
   */
  public long getGenerateTime() {
    return generateTime;
  }


  /**
   * Sets the value of the 'generateTime' field.
   * Epoch Millisecond Unit
   * @param value the value to set.
   */
  public QueryBalance setGenerateTime(long value) {
    this.generateTime = value;
    return this;
  }

  /**
   * Gets the value of the 'sendTime' field.
   * @return Epoch Millisecond Unit
   */
  public long getSendTime() {
    return sendTime;
  }


  /**
   * Sets the value of the 'sendTime' field.
   * Epoch Millisecond Unit
   * @param value the value to set.
   */
  public QueryBalance setSendTime(long value) {
    this.sendTime = value;
    return this;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return 1.账户ID
   */
  public int getAccountId() {
    return accountId;
  }


  /**
   * Sets the value of the 'accountId' field.
   * 1.账户ID
   * @param value the value to set.
   */
  public QueryBalance setAccountId(int value) {
    this.accountId = value;
    return this;
  }

  /**
   * Gets the value of the 'brokerId' field.
   * @return 2.经纪商ID
   */
  public java.lang.String getBrokerId() {
    return brokerId;
  }


  /**
   * Sets the value of the 'brokerId' field.
   * 2.经纪商ID
   * @param value the value to set.
   */
  public QueryBalance setBrokerId(java.lang.String value) {
    this.brokerId = value;
    return this;
  }

  /**
   * Gets the value of the 'subAccountId' field.
   * @return 3.子账户ID
   */
  public int getSubAccountId() {
    return subAccountId;
  }


  /**
   * Sets the value of the 'subAccountId' field.
   * 3.子账户ID
   * @param value the value to set.
   */
  public QueryBalance setSubAccountId(int value) {
    this.subAccountId = value;
    return this;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return 操作原因
   */
  public java.lang.String getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * 操作原因
   * @param value the value to set.
   */
  public QueryBalance setReason(java.lang.String value) {
    this.reason = value;
    return this;
  }

  /**
   * Gets the value of the 'source' field.
   * @return 操作来源
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * 操作来源
   * @param value the value to set.
   */
  public QueryBalance setSource(java.lang.String value) {
    this.source = value;
    return this;
  }

  /**
   * Creates a new QueryBalance RecordBuilder.
   * @return A new QueryBalance RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.QueryBalance.Builder newBuilder() {
    return new io.rapid.core.serializable.avro.outbound.QueryBalance.Builder();
  }

  /**
   * Creates a new QueryBalance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QueryBalance RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.QueryBalance.Builder newBuilder(io.rapid.core.serializable.avro.outbound.QueryBalance.Builder other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.outbound.QueryBalance.Builder();
    } else {
      return new io.rapid.core.serializable.avro.outbound.QueryBalance.Builder(other);
    }
  }

  /**
   * Creates a new QueryBalance RecordBuilder by copying an existing QueryBalance instance.
   * @param other The existing instance to copy.
   * @return A new QueryBalance RecordBuilder
   */
  public static io.rapid.core.serializable.avro.outbound.QueryBalance.Builder newBuilder(io.rapid.core.serializable.avro.outbound.QueryBalance other) {
    if (other == null) {
      return new io.rapid.core.serializable.avro.outbound.QueryBalance.Builder();
    } else {
      return new io.rapid.core.serializable.avro.outbound.QueryBalance.Builder(other);
    }
  }

  /**
   * RecordBuilder for QueryBalance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QueryBalance>
    implements org.apache.avro.data.RecordBuilder<QueryBalance> {

    /** Epoch Millisecond Unit */
    private long generateTime;
    /** Epoch Millisecond Unit */
    private long sendTime;
    /** 1.账户ID */
    private int accountId;
    /** 2.经纪商ID */
    private java.lang.String brokerId;
    /** 3.子账户ID */
    private int subAccountId;
    /** 操作原因 */
    private java.lang.String reason;
    /** 操作来源 */
    private java.lang.String source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.rapid.core.serializable.avro.outbound.QueryBalance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[3].schema(), other.brokerId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[4].schema(), other.subAccountId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.reason)) {
        this.reason = data().deepCopy(fields()[5].schema(), other.reason);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing QueryBalance instance
     * @param other The existing instance to copy.
     */
    private Builder(io.rapid.core.serializable.avro.outbound.QueryBalance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[3].schema(), other.brokerId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[4].schema(), other.subAccountId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.reason)) {
        this.reason = data().deepCopy(fields()[5].schema(), other.reason);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'generateTime' field.
      * Epoch Millisecond Unit
      * @return The value.
      */
    public long getGenerateTime() {
      return generateTime;
    }


    /**
      * Sets the value of the 'generateTime' field.
      * Epoch Millisecond Unit
      * @param value The value of 'generateTime'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setGenerateTime(long value) {
      validate(fields()[0], value);
      this.generateTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'generateTime' field has been set.
      * Epoch Millisecond Unit
      * @return True if the 'generateTime' field has been set, false otherwise.
      */
    public boolean hasGenerateTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'generateTime' field.
      * Epoch Millisecond Unit
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearGenerateTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendTime' field.
      * Epoch Millisecond Unit
      * @return The value.
      */
    public long getSendTime() {
      return sendTime;
    }


    /**
      * Sets the value of the 'sendTime' field.
      * Epoch Millisecond Unit
      * @param value The value of 'sendTime'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setSendTime(long value) {
      validate(fields()[1], value);
      this.sendTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sendTime' field has been set.
      * Epoch Millisecond Unit
      * @return True if the 'sendTime' field has been set, false otherwise.
      */
    public boolean hasSendTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sendTime' field.
      * Epoch Millisecond Unit
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearSendTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * 1.账户ID
      * @return The value.
      */
    public int getAccountId() {
      return accountId;
    }


    /**
      * Sets the value of the 'accountId' field.
      * 1.账户ID
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setAccountId(int value) {
      validate(fields()[2], value);
      this.accountId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * 1.账户ID
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountId' field.
      * 1.账户ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearAccountId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerId' field.
      * 2.经纪商ID
      * @return The value.
      */
    public java.lang.String getBrokerId() {
      return brokerId;
    }


    /**
      * Sets the value of the 'brokerId' field.
      * 2.经纪商ID
      * @param value The value of 'brokerId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setBrokerId(java.lang.String value) {
      validate(fields()[3], value);
      this.brokerId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerId' field has been set.
      * 2.经纪商ID
      * @return True if the 'brokerId' field has been set, false otherwise.
      */
    public boolean hasBrokerId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'brokerId' field.
      * 2.经纪商ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subAccountId' field.
      * 3.子账户ID
      * @return The value.
      */
    public int getSubAccountId() {
      return subAccountId;
    }


    /**
      * Sets the value of the 'subAccountId' field.
      * 3.子账户ID
      * @param value The value of 'subAccountId'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setSubAccountId(int value) {
      validate(fields()[4], value);
      this.subAccountId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subAccountId' field has been set.
      * 3.子账户ID
      * @return True if the 'subAccountId' field has been set, false otherwise.
      */
    public boolean hasSubAccountId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subAccountId' field.
      * 3.子账户ID
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearSubAccountId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * 操作原因
      * @return The value.
      */
    public java.lang.String getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * 操作原因
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setReason(java.lang.String value) {
      validate(fields()[5], value);
      this.reason = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * 操作原因
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'reason' field.
      * 操作原因
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearReason() {
      reason = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * 操作来源
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * 操作来源
      * @param value The value of 'source'.
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder setSource(java.lang.String value) {
      validate(fields()[6], value);
      this.source = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * 操作来源
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'source' field.
      * 操作来源
      * @return This builder.
      */
    public io.rapid.core.serializable.avro.outbound.QueryBalance.Builder clearSource() {
      source = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public QueryBalance build() {
      try {
        QueryBalance record = new QueryBalance();
        record.generateTime = fieldSetFlags()[0] ? this.generateTime : (java.lang.Long) defaultValue(fields()[0]);
        record.sendTime = fieldSetFlags()[1] ? this.sendTime : (java.lang.Long) defaultValue(fields()[1]);
        record.accountId = fieldSetFlags()[2] ? this.accountId : (java.lang.Integer) defaultValue(fields()[2]);
        record.brokerId = fieldSetFlags()[3] ? this.brokerId : (java.lang.String) defaultValue(fields()[3]);
        record.subAccountId = fieldSetFlags()[4] ? this.subAccountId : (java.lang.Integer) defaultValue(fields()[4]);
        record.reason = fieldSetFlags()[5] ? this.reason : (java.lang.String) defaultValue(fields()[5]);
        record.source = fieldSetFlags()[6] ? this.source : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<QueryBalance>
    WRITER$ = (org.apache.avro.io.DatumWriter<QueryBalance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<QueryBalance>
    READER$ = (org.apache.avro.io.DatumReader<QueryBalance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.generateTime);

    out.writeLong(this.sendTime);

    out.writeInt(this.accountId);

    out.writeString(this.brokerId);

    out.writeInt(this.subAccountId);

    out.writeString(this.reason);

    out.writeString(this.source);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.generateTime = in.readLong();

      this.sendTime = in.readLong();

      this.accountId = in.readInt();

      this.brokerId = in.readString();

      this.subAccountId = in.readInt();

      this.reason = in.readString();

      this.source = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.generateTime = in.readLong();
          break;

        case 1:
          this.sendTime = in.readLong();
          break;

        case 2:
          this.accountId = in.readInt();
          break;

        case 3:
          this.brokerId = in.readString();
          break;

        case 4:
          this.subAccountId = in.readInt();
          break;

        case 5:
          this.reason = in.readString();
          break;

        case 6:
          this.source = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










